using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Xml.Serialization;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityStandardAssets.ImageEffects;

public class Game : MonoBehaviour
{
    public delegate void Callback();

    public class queuedQuip
    {
        public string quip;

        public float delay;

        public float staleness;

        public RackCharacter subject;

        public RackCharacter speaker;
    }

    public delegate void NFDelegate();

    public static Game gameInstance;

    public static int gameVersion = 2002;

    public static int wipeVersion = 2001;

    public int konamiStep;

    public static bool reloadedFromGame = false;

    public static string characterAssetDirectory;

    public static string persistentDataPath;

    public static bool freeplay = false;

    public bool anythingLoading;

    public float loadedAmount;

    public float loadingAmount;

    public GameObject defaultAudioSource;

    public string contextMessage = string.Empty;

    public Func<bool> contextFunction;

    public float interactionZoom = 0.5f;

    public static bool VRmode = false;

    public GameObject mainCam;

    public GameObject uiCam;

    public GameObject UI;

    public GameObject thinkingIndicator;

    public GameObject colorPicker;

    public Vector3 camTarget = default(Vector3);

    public Vector3 camTarget_actual = default(Vector3);

    public Vector3 camPos = default(Vector3);

    public Vector3 camPos_actual = default(Vector3);

    public float camFollowAngle;

    public float camFollowDist;

    public float camFollowElevation;

    public GameObject DOFfocus;

    public bool firstPersonMode;

    public float firstPersonLookAngle;

    public RaycastHit camHit;

    public float OOBoffset;

    public string currentZone = string.Empty;

    public string lastZone = string.Empty;

    public string curTool = string.Empty;

    public int curToolMode;

    public List<string> toolHotkeys = new List<string>();

    public List<string> toolMaterial = new List<string>();

    public List<SexToy> toolSexToys = new List<SexToy>();

    public bool inventoryOpen;

    public bool pauseOpen;

    public bool hideTranslationErrors;

    public bool popupOpen;

    public bool draggingUIthing;

    public bool colorPickerOpen;

    public GameObject devConsole;

    public bool devConsoleOpen;

    public string curDialogue = string.Empty;

    public static RackCharacter dialoguePartner = null;

    public int curDialogueNode;

    public string curDialogueText = string.Empty;

    public string convertedDialogueText = string.Empty;

    public DialogueTree dialogueTree;

    public bool characterSelectorOpen;

    public RenderTexture characterPreviewRT;

    public Drone helperDrone;

    public Shader shader;

    public Shader ghostShader;

    public Material defaultMaterial;

    public Material ghostMaterial;

    public const ReflectionProbeUsage probeStyle = ReflectionProbeUsage.Simple;

    public float mX;

    public float mY;

    public Vector3 mouseChange;

    public Vector3 mouseChangeSinceLastFixedUpdate;

    public bool lockedPosition;

    public bool lockedFocus;

    public List<RackCharacter> characters = new List<RackCharacter>();

    public static AssetBundle textureBundle;

    public GameObject masterSkeleton;

    public List<Interaction> interactions = new List<Interaction>();

    public GameObject World;

    public Collider[] worldColliders;

    public ResearchGrid researchGrid;

    public Vector3 v3;

    public Vector3 v32;

    public Color c3;

    public static char PathDirectorySeparatorChar;

    public List<string> threadSoundsQueued = new List<string>();

    public List<float> threadSoundsQueued_vol = new List<float>();

    public List<float> threadSoundsQueued_pitch = new List<float>();

    public static List<AudioClip> uiSounds = new List<AudioClip>();

    public static List<string> uiSoundNames = new List<string>();

    public GameObject audioListener;

    public AudioMixer mixer;

    public AudioSource uiAudio;

    public LabDoor[] labDoors;

    private GameObject mainCamContainer;

    public GameObject newsWindow;

    public static NewsAndVersionData newsData;

    public GameObject newsMaximize;

    public GameObject newsMinimize;

    public string downloadURL;

    private bool newsOpen = true;

    private Vector3 originalNewsLocation;

    private Transform ToolMenu;

    private Transform[] ToolMenuModeMenuMode = new Transform[6];

    private Text[] ToolMenuModeMenuModeTxt = new Text[6];

    private Transform[] ToolMenuHotkeys = new Transform[10];

    private Transform ToolMenuCurTool;

    private Transform ToolMenuCurToolChemicalDisplay;

    private Text ToolMenuCurToolChemicalDisplayDoseText;

    private Text ToolMenuCurToolChemicalDisplayDoseTextFraction;

    private Transform SpecimenCapacityWarning;

    private Transform[] chemicalWindowChems = new Transform[6];

    private Text[] chemicalWindowChemTexts = new Text[6];

    private Transform LabEditingInterfaceCursor;

    public bool hoveringOverTerminateButton;

    public static string pausePage = string.Empty;

    public bool creditsOpen;

    public float loadTransition;

    private bool manualFPSset;

    public static bool thereHasBeenAtLeastOneFixedUpdate = false;

    private bool showThoughtGauge;

    private bool toggleThoughtGauge = true;

    private float lastDominance;

    private float lastAggression;

    private float lastFriendliness;

    public GameObject commandPanelTemplate;

    public List<GameObject> commandPanels = new List<GameObject>();

    public static float framerate = 0f;

    public float timeScale = 1f;

    public float timeScale_act = 1f;

    private float FDT = 0.02f;

    public float rDist;

    private RackCharacter subject;

    private string[][] autoDialogueOptions = new string[4][];

    public List<queuedQuip> queuedQuips = new List<queuedQuip>();

    public bool inlineDialogueOpen;

    public bool wasInlineDialogueOpen;

    private float inlineDialogueTransition;

    public string inlineDialogueSubmenu = string.Empty;

    private bool inlineDialogueInitted;

    private List<string> inlineDialogueSubmenuOptions = new List<string>();

    public List<string[]> inlineDialogueSubmenuSubOptions = new List<string[]>();

    private float[] inlineDialogueSubOptionConfidences;

    private List<Color> inlineDialogueSubmenuOptionColors = new List<Color>();

    private List<GameObject> inlineDialogueCategoryTexts = new List<GameObject>();

    private List<Transform> inlineDialogueCategoryIcons = new List<Transform>();

    private float inlineDialogueRadius;

    private float radians = 0.0174527783f;

    private float radianCircumference = 6.283f;

    private float ang;

    private float mAng;

    public bool pickingInlineDialogueCategory;

    private int numInlineDialogueSubmenuSubOptions;

    private List<GameObject> inlineDialogueSubOptions = new List<GameObject>();

    private Vector3 inlineDialogueSubMenuMouseStart = default(Vector3);

    public int activeInlineDialogueSubmenu;

    private int hoverInlineDialogueSubOption = -1;

    public int last_hoverInlineDialogueSubOption = -1;

    private float timeInInlineDialogueMenu;

    private string inlineDialogueToSay = string.Empty;

    private bool inlineDialogueStillInSelectionRadius;

    private bool last_inlineDialogueStillInSelectionRadius;

    public float timeSinceInlineDialogueWasSaid;

    public string inlineDialogueOptionDescription = string.Empty;

    public float autoDialogueCooldown;

    public float distToClosestTestSubject;

    private float ADT;

    private Color climaxColor;

    private float playerClimaxPulse;

    private float playerClimaxTransition;

    private bool hideClimaxMenuForTutorialReasons = true;

    public float warningDisplayTime;

    public string toolModeRequiredPose = string.Empty;

    private bool inATestinRoom;

    private float toolbarTransition;

    private int lastSelectedChemicalCompoundID = -1;

    public int numToolModesAvailable;

    public float timeSinceToolModeMenuOpen;

    public string s;

    private float lastChemicalCompoundAmountOwned = -1f;

    private bool hideToolMenuForTutorialReasons = true;

    private GameObject chemicalSelectionUI;

    private Transform chemicalSelectionTileContainer;

    private GameObject chemicalSelectionTileTemplate;

    private Transform chemicalSelectionRightMenu;

    private ScienceTextAnimator chemicalSelection_txtChemicalName;

    private ScienceTextAnimator chemicalSelection_txtChemicalDescription;

    private bool chemicalSelectionMenuInitted;

    private bool lastShowingChemicalSelectionMenu;

    public List<GameObject> chemicalSelectionTiles = new List<GameObject>();

    private int selectedChemicalCompoundID = -1;

    private float timeShowingChemicalSelection;

    public int anatomyTools;

    public int currentTestRoom;

    public List<GameObject> toolbarItems = new List<GameObject>();

    public List<float> toolbarPops = new List<float>();

    public GameObject curToolDisplay;

    public int curToolID;

    public KeyCode ChemicalSelectionMenuKey;

    public bool showingChemicalSelectionMenu;

    public Ray screenRay;

    public string hoveringHotspot = string.Empty;

    public string lastHoveringHotspot = string.Empty;

    public float timeSinceHover;

    public float timeSinceHoverChange;

    private float hotspotIconSize = 0.4f;

    public List<GameObject> hotspotLines = new List<GameObject>();

    private Transform hotspotTransform;

    public Interaction currentInteraction;

    public Vector2 interactionAngle = default(Vector2);

    public float timeSpentInteracting;

    private bool needInteractionHotspotRebuild = true;

    private List<GameObject> interactionSpotHotspots = new List<GameObject>();

    private List<InteractionTrigger> interactionSpotTriggers = new List<InteractionTrigger>();

    private int lastHoveringOverInteractionHotspot;

    private int hoveringOverInteractionHotspot;

    private string junk;

    private bool hideInteractionHotspotsForTutorialReasons = true;

    public Color col;

    private GameObject interactionReticle;

    private float reticleCornerDist;

    public float penetrationPopTime;

    public float effectiveInteractionSensitivity = 0.5f;

    public float mouseSpeed;

    public ParticleSystem mouseParticles;

    public ParticleSystem.MainModule mouseParticlesMain;

    public ParticleSystem mousePParticles;

    public ParticleSystem.MainModule mousePParticlesMain;

    private Color greyCol;

    private Color greenCol;

    private Color redCol;

    private bool showHandsFreeTerminateBar;

    private GameObject handsFreeTerminateBar;

    private bool bteInitted;

    private ParticleSystem.MainModule bte0main;

    private ParticleSystem.MainModule bte1main;

    private bool ableToPleasureSelf;

    public RackCharacter delayedInteraction_subject;

    public string delayedInteraction_node;

    public string delayedInteraction_tool;

    public int delayedInteraction_mode;

    public float delayedInteraction_delay;

    private Camera dialogueCam;

    private GameObject DialogueWindow;

    public float dialogueSpeakerScale;

    public bool dialogueOnRight = true;

    public float dialogueAnimationProgress;

    public static bool doneAnimatingDialogue = false;

    public static int curDialogueBreakStep = 0;

    public float dialogueCameraDisplacementAmount = 4.5f;

    public Vector3 dialogueCameraDisplacement = Vector3.zero;

    public Vector3 dialogueCamPos = Vector3.zero;

    public bool dialogueWasOpen;

    public bool shopOpen;

    public bool needShopRebuild;

    public List<GameObject> shopUIItems = new List<GameObject>();

    public List<GameObject> cartUIItems = new List<GameObject>();

    public List<LayoutItemSpecialProperties> cartSpecialProperties = new List<LayoutItemSpecialProperties>();

    public List<bool> cartItemHasComponents = new List<bool>();

    public GameObject shopItemTemplate;

    public List<string> cartContents = new List<string>();

    public float previewObjectSize = 15f;

    private float previewObjectActualMag;

    private GameObject mostRecentlyHoveredShopItem;

    public int cartTotalCost;

    public float cartTotalCost_display;

    private bool newComponentDropped;

    public bool selectingComponents;

    public string[] componentsNeeded = new string[5];

    public bool[] componentsPicked = new bool[5];

    public bool[] componentsWerePicked = new bool[5];

    public string componentSelectionTarget = string.Empty;

    public bool materialGridOpen;

    public List<string> confirmedComponentNames = new List<string>();

    public List<LayoutItemSpecialProperties> confirmedComponentProperties = new List<LayoutItemSpecialProperties>();

    private Color notEnoughMoneyColor;

    private float shopScroll;

    private float cartScroll;

    private GameObject IPScam;

    private GameObject IPS;

    private float IPStotalErrorVel;

    private float IPStotalErrorY;

    public int selectedShopMaterial;

    private GameObject MaterialGridPanelTemplate;

    private List<GameObject> materialGridPanels = new List<GameObject>();

    public float materialGridPanX;

    public float materialGridPanY;

    public float materialGridWidth;

    public float materialGridHeight;

    public static Vector3 locationOfNearestLabItemV3 = default(Vector3);

    private float labEditScroll;

    private GameObject labEditItemTemplate;

    public bool needLabEditRebuild;

    private List<string> itemsAvailableForLabEditingPlacement = new List<string>();

    public List<int> itemsAvailableForLabEditingPlacementCounts = new List<int>();

    public List<GameObject> labEditUIItems = new List<GameObject>();

    public int curLabEditItem;

    public float timeSinceLabEditHover = 99f;

    private List<Vector3> editableItemPositions = new List<Vector3>();

    private List<Vector3> editableItemLPositions = new List<Vector3>();

    private List<GameObject> editableItemHotspots = new List<GameObject>();

    private List<string> editableItems = new List<string>();

    private List<int> editableItemLayoutIndices = new List<int>();

    private List<int> editableItemItemIndices = new List<int>();

    private GameObject editableItemHotspotTemplate;

    private int hoveringOverEditableItem = -1;

    private int lasthoveringOverEditableItem = -1;

    private string labEditGrabbedItem = string.Empty;

    private bool lastLabEditing;

    public float labEditRotateTickDelay = 0.002f;

    public float recentItemPlacement = 99f;

    private float editItemScrollDelay;

    public bool preferencesMenuOpen;

    public static bool waitingForDialogueContinue = false;

    public GameObject DialogueEditorCheatSheet;

    public GameObject DialogueEditorCheatSheetButton;

    public bool dialogueCheatsheetOpen;

    public List<string> modifiedDialoguePhrases = new List<string>();

    private List<Dropdown.OptionData> dialogueNodeOptions;

    private bool rebuildingDialogueEditor;

    private bool dialogueEditorWasOpen;

    private GameObject DialogueNodeTemplate;

    private GameObject DialogueResponseTemplate;

    private GameObject unsavedChangesIndicator;

    private DialogueTree curDialogueTree;

    private string curDialogueFilename;

    private List<GameObject> DialogueNodes = new List<GameObject>();

    private List<GameObject> DialogueResponses = new List<GameObject>();

    public int draggingDialogueNode = -1;

    public float dialogueDragLastX;

    public float dialogueDragLastY;

    public float dialogueEditorZoom = 1f;

    public float dialogueEditorPanX;

    public float dialogueEditorPanY;

    private GameObject dialogueXMLdisplay;

    private bool showDialogueXMLdisplay;

    public float dialogueEditorNodeWindowWidth;

    public float dialogueEditorNodeWindowHeight;

    public float dialogueEditorResponseWindowWidth;

    public float dialogueEditorResponseWindowHeight;

    public static bool loadingAnyCharacters = false;

    public float justTeleportedToHallway;

    public static bool daddyCummyCheat = false;

    public static bool bigHeadCheat = false;

    public static bool rainbowJizzCheat = false;

    public static bool autoCamSpin = false;

    public Transform testHand;

    private float testHandZ = 0.8f;

    public float assignedCost;

    public List<RackCharacter> currentTestSubjects = new List<RackCharacter>();

    public bool fadingToFinishPreparingTestSubjects;

    public bool wasCharacterSelectorOpen;

    public List<RackCharacter> randomCharactersForSelection = new List<RackCharacter>();

    public static int maxCharactersForSelector = 6;

    public int characterSelector_currentSelected;

    private int characterSelector_currentSelected_last = -1;

    private List<int> subjectTypes = new List<int>();

    private List<int> subjectValues = new List<int>();

    public List<int> subjectRoomAssignments = new List<int>();

    private List<int> subjectApparatusAssignments = new List<int>();

    public bool anyRandomCharsStillInitting;

    public float charSelectCostErrorBuzz;

    public bool stasisSFXstarted;

    private bool[] stasisTubesWereOccupied = new bool[6];

    public Material glowBlueMat;

    public Material glowOrangeMat;

    public GameObject preferenceTemplate;

    private float preferenceDisplayX = 0.25f;

    private bool stasisParticlesInitted;

    private ParticleSystem.MainModule[] stasisParticles = new ParticleSystem.MainModule[6];

    private List<GameObject> subjectPreferencePreviews = new List<GameObject>();

    private bool showingPrefs;

    public float uiMouseX;

    public float uiMouseY;

    public Vector3 uiMouse = default(Vector3);

    public bool mouseMoved;

    public Vector3 lastMousePosition = Vector3.zero;

    public float screenWidth;

    public float screenHeight;

    public GameObject EditorUI;

    public bool editorUIinitted;

    public bool editingDialogue;

    public static List<string> consoleLines = new List<string>();

    public static int updatingEmbellishmentSpeciesID = 0;

    public static bool allowHandPositioning = true;

    public static bool allowIK = true;

    public static bool enjoymentDebugging = false;

    public static bool allowShiftSphere = false;

    public static bool allowCum = true;

    public List<Toast> toasts = new List<Toast>();

    public List<Toast> toastsQueued = new List<Toast>();

    public GameObject ToastTemplate;

    public float toastDelay;

    private float WAIcooldown;

    private string openDoorMessage = string.Empty;

    public bool UIinUse;

    public float time;

    private bool showOrgasmGrid;

    private float recentSubjectOrgasm = 90f;

    private GameObject orgasmGrid;

    private Transform orgasmGridCursor;

    private ParticleSystem orgasmGridHeadPS;

    private ParticleSystem.EmissionModule orgasmGridHeadEM;

    private ParticleSystem orgasmGridTrailPS;

    private ParticleSystem.EmissionModule orgasmGridTrailEM;

    private ParticleSystem.MainModule orgasmGridHeadMM;

    private ParticleSystem.MainModule orgasmGridTrailMM;

    private bool orgasmGridInitted;

    private bool wasShowingOrgasmGrid = true;

    private float orgasmGridWidth;

    private float orgasmGridHeight;

    private Text orgasmGridRating;

    private float orgasmRating;

    private int nextOrgasmRatingNode;

    private float[] orgasmRatingNodes = new float[100];

    private float orgasmRatingNodeSpacing;

    private bool tutorialWasOpen;

    private int originalDialogueCamCullingMask;

    private Transform tutorialDrone;

    private GameObject tutorialDroneText;

    private ScienceTextAnimator tutorialDroneAdvice;

    private Transform tutorialDroneArrow;

    private GameObject tutorialDroneBlocker;

    private bool wasTutorialDroneAdviceInstant;

    private GameObject tutorialDroneImage;

    private string lastTutorialDroneImage = string.Empty;

    private GameObject chemicalSynthesisUI;

    private Transform chemicalSynthesisTileContainer;

    private GameObject chemicalSynthesisTileTemplate;

    private Transform chemicalSynthesisRightMenu;

    private Transform chemicalSynthesisCheckoutMenu;

    private ScienceTextAnimator chemicalSynthesis_txtChemicalName;

    private ScienceTextAnimator chemicalSynthesis_txtChemicalDescription;

    private Text[] chemicalSynthesis_hoverCost = new Text[6];

    private Image[] chemicalSynthesis_hoverCostHex = new Image[6];

    private Color[] originalChemicalHexColors = new Color[6];

    private bool chemicalSynthesisInitialized;

    public bool chemicalSynthesisMenuOpen;

    public bool chemicalSynthesisMenuWasOpen;

    private List<string> chemicalsAvailableForSynthesis = new List<string>();

    private List<GameObject> chemicalTiles = new List<GameObject>();

    private int lastHoverChemical = -2;

    public bool showInvertedDefinition;

    public bool chemicalSynthesis_inverting;

    public string chemicalSynthesis_selectedChemical = string.Empty;

    public int chemicalSynthesis_selectedChemicalQuantity;

    public static bool selectedChemicalWasJustForciblyChanged = false;

    private bool inittedChemicalCompoundUI;

    private Transform emote0;

    private Transform emote1;

    private Transform objectivesMenu;

    private GameObject objectiveTemplate;

    private List<GameObject> objectivePanels = new List<GameObject>();

    private List<Transform> objectivePanelMarkers = new List<Transform>();

    private GameObject cmdClearObjectives;

    public bool showObjectives = true;

    private int visibleObjectives;

    public bool lightingControlPanelOpen;

    public GameObject LCPpanelTemplate;

    public List<GameObject> LCPpanels = new List<GameObject>();

    public List<int> LCPpanelIDs = new List<int>();

    public Transform currentLightingControlPanelOpen;

    private bool needRoomReflectionUpdate;

    public float gadgetwidth;

    public float gadgetheight;

    public List<string> activeGadgets = new List<string>();

    public List<SexToy> activeGadgetSexToys = new List<SexToy>();

    public List<GameObject> gadgetGOs = new List<GameObject>();

    public List<int> gadgetsJustTurnedOn = new List<int>();

    public List<int> gadgetsToKill = new List<int>();

    public float gadgetUIposY;

    public const float gadgetUIpadding = 10f;

    public bool showGadgets = true;

    public int patreonFetchStatus;

    public string rawPatreonData = string.Empty;

    public string[] patreonSupporters;

    public int nextPatron;

    public Color patronTextColor;

    public float warningVelocity;

    public float warningSize;

    private List<bool> sexPoseHover = new List<bool>();

    private bool sexPoseMenuWasOpen;

    private int numSexPosesShown;

    public bool satisfactionMessageOpen;

    public int mostRecentSatisfactionRating;

    public bool confirmingTerminate;

    private string satisfactionString = string.Empty;

    private bool hideTerminateMenuForTutorialReasons = true;

    public bool fadingToBlack;

    public List<Action> fadeToBlackActions = new List<Action>();

    public float blackAmount;

    public Color blackerColor;

    public bool stillThinkingAfterFirstSpeciesSelection;

    public GameObject ResearchHologram;

    public GameObject ResearchHotspotBeacon;

    public bool inResearchMode;

    public Vector3 locationBeforeEnteringResearchHologram;

    private Texture2D transitionTex;

    public bool takingResearchTransitionScreenshot;

    public float researchTransition;

    public List<ResearchGrid> researchHotspots = new List<ResearchGrid>();

    public float researchToastTime;

    public bool researchToastPlaying;

    public bool wasAnyResearchHotspotBeingUsed;

    public bool anyResearchHotspotBeingUsed;

    public float researchHotspotBlackerTransition;

    private bool lastARHBU;

    private float displayedResearchCompletion;

    private bool preferenceMenuFetishesBuilt;

    private List<GameObject> fetishSliders;

    private bool preferencesMenuWasOpen;

    private float fetishOverflow;

    private float fetishScroll;

    private List<GameObject> speciesSliders;

    private float speciesOverflow;

    private float speciesScroll;

    private Vector3 cpos = default(Vector3);

    public GameObject BagTemplate;

    public List<GameObject> displayedBags = new List<GameObject>();

    public List<string> interactingWithBags = new List<string>();

    public string inventoryTooltipTitle = string.Empty;

    public string inventoryTooltipDescription = string.Empty;

    public string inventoryTooltipColor = string.Empty;

    public string draggingInventoryItem = string.Empty;

    public string draggingInventoryItemOriginalBag = string.Empty;

    public LayoutItemSpecialProperties draggingInventoryItemProperties = new LayoutItemSpecialProperties();

    public Bag inventoryDragHoverBag;

    public string inventoryDragHoverBagUID = string.Empty;

    public int inventoryDragHoverBagX;

    public int inventoryDragHoverBagY;

    public float inventoryDragOffsetX;

    public float inventoryDragOffsetY;

    public GameObject inventoryTooltip;

    public bool needInventoryRefresh;

    public GameObject dragItem;

    public float totalInventoryHeight;

    public List<GameObject> clothingUIlines = new List<GameObject>();

    public bool wasHoveringAPieceOfClothingOverTheClothingMenu;

    public float timePlayedElapsed;

    public float deltaTime;

    public List<Vector3> clothingPickupPoints = new List<Vector3>();

    public List<string> clothingPickupNames = new List<string>();

    public List<string> clothingMenuSlotNames = new List<string>();

    public List<Vector3> sextoyPickupPoints = new List<Vector3>();

    public List<string> sextoyPickupNames = new List<string>();

    public List<bool> sextoyPickupsActive = new List<bool>();

    public List<bool> sextoyPickupsEligibleForDrop = new List<bool>();

    private int lastClosestPickupPoint = -1;

    private int lastClosestSexToyPoint = -1;

    private float clothingMenuX = -10f;

    private string lastDraggingInventoryItem = string.Empty;

    public float clothingUIscale_act = 0.469f;

    public bool showBackButton;

    private GameObject backButton;

    public bool customizingCharacter;

    public int customizeCharacterPage;

    public static bool needEmbellishmentPackageMenuRebuild = true;

    public string originalCharacterDataString = string.Empty;

    public List<string> characterEditUndoStates = new List<string>();

    public bool waitingOnPostCustomizationSnapshot;

    public bool needTeleportToHallway;

    public float lastUndoState;

    public float lastUndoExecute;

    public int maxUndoStates;

    public int undoingLock;

    public float undoStateCheckDelay;

    public CanvasRenderer[] recursiveAlphaRenderers;

    private bool waitingOnSnapshotForExport;

    public bool needInitialValues = true;

    public bool characterCustomizationChangeMade;

    public static float maxBreastSize;

    public float penisTypeChangedTime;

    public bool texturePatternMenuOpen;

    public const int editorPage_quickStart = 0;

    public const int editorPage_genitals = 1;

    public const int editorPage_bodytype = 2;

    public const int editorPage_physiology = 3;

    public const int editorPage_embellishments = 4;

    public const int editorPage_color = 5;

    public const int editorPage_sexualCharacteristics = 6;

    public const int editorPage_sexualPreferences = 7;

    public const int numCustomizationPages = 8;

    public int previousEditorPage;

    public const int editorPage_tailFur = 21;

    public const int editorPage_embellishmentColors = 31;

    public const int editorPage_import = 41;

    public const int editorPage_export = 42;

    public const int editorPage_decals = 51;

    public string lastLoadedHeadPiece = string.Empty;

    public GameObject headBlendSliderTemplate;

    public string exportFilename = "New Character";

    public bool exportFileAlreadyExists;

    public bool needImportPageRebuild = true;

    public int curImportFileToLoad;

    public int selectedImportFile = -1;

    public int hoverImportFile = -1;

    public List<GameObject> importFiles = new List<GameObject>();

    public GameObject importFileTemplate;

    public GameObject importTooltip;

    public GameObject importWarning;

    public GameObject importCmdOkay;

    public GameObject forumButtonTooltip;

    public bool firstCustomizationSpeciesSelection;

    public bool anyInputSinceLastUndoStateCheck;

    private GameObject sexualPreferenceSliderTemplate;

    private bool sexualPreferencesPageBuilt;

    private bool sexualPreferencesPageWasOpen;

    private float sexualPreferenceSliderY;

    private Dictionary<string, UnityEngine.UI.Slider> sexualPreferenceSliders = new Dictionary<string, UnityEngine.UI.Slider>();

    private float sexualPreferenceScroll;

    private Transform sexualPreferencesContainer;

    private GameObject sexualCharacteristicSliderTemplate;

    private bool sexualCharacteristicsPageBuilt;

    private bool sexualCharacteristicsPageWasOpen;

    private float sexualCharacteristicSliderY;

    private Dictionary<string, UnityEngine.UI.Slider> sexualCharacteristicSliders = new Dictionary<string, UnityEngine.UI.Slider>();

    private float sexualCharacteristicScroll;

    private Transform sexualCharacteristicsContainer;

    public GameObject decalBrush;

    public Vector3 decalHitPoint;

    public Vector3 decalHitNormal;

    public Vector3 decalHitNormal_act;

    public bool decalMenuWasOpen;

    public List<string> decalList = new List<string>();

    public int selectedDecal;

    public int curDecalDisplayed = -1;

    public float decalPPMrebuildDelay;

    public float decalPickDelay;

    public float decalBrushScale = 2f;

    public float decalBrushRotation;

    public float dbrVel;

    public float dbsVel;

    public bool decalBrushFlip;

    public Texture2D decalFXtex;

    public List<GameObject> decalOptionButtons = new List<GameObject>();

    public int curDecalPage = -1;

    public int decalsPerPage;

    public bool stillSafeToUseDecalRaytracingData;

    private Vector2[][] decalDrawingUVs = new Vector2[20][];

    private Vector3[][] decalDrawingVerts = new Vector3[20][];

    private int[][] decalDrawingTris = new int[20][];

    private Mesh[] decalDrawingBakedMesh = new Mesh[20];

    private Vector2[][][] decalDrawingPixelsInTriangle = new Vector2[20][][];

    private bool[][][] decalDrawingP3DInvalid = new bool[20][][];

    private Vector3[][][] decalDrawingP3D = new Vector3[20][][];

    public bool justToggledQSBT;

    public int selectedQScolor = -1;

    public GameObject quickStartClipboard;

    public Vector3 originalQSClipboardPosition;

    public Vector3 originalQSClipboardRotation;

    public float QSClipboardTransition;

    public List<string> quickstartBodyTypeNames;

    public List<Text> quickstartBodyTypeTexts;

    public bool needQuickStartSpeciesRebuild = true;

    public List<string> speciesDefinitionPhrases = new List<string>();

    public CharacterData speciesDefinitionData;

    public int lastQSSpeciesSelected = -1;

    public static List<Color> speciesDefinitionColors = new List<Color>();

    public static List<string> speciesDefinitionColorNames = new List<string>();

    public static List<Color> speciesDefinitionColorReplacements = new List<Color>();

    public static List<int> speciesDefinitionColorRefs = new List<int>();

    public static List<float> speciesDefinitionColorRefOffsets_hue = new List<float>();

    public static List<float> speciesDefinitionColorRefOffsets_sat = new List<float>();

    public static List<float> speciesDefinitionColorRefOffsets_val = new List<float>();

    public bool startingGenderIdentityDDpicked;

    public bool tailFurEditorWasOpen;

    public bool needEmbellishmentColorRedraw = true;

    public bool needEmbellishmentColorRebuildDots = true;

    private bool firstEmbellishmentColorMenuBuild = true;

    private List<List<GameObject>> embellishmentGradientDots = new List<List<GameObject>>();

    private GameObject embellishmentGradientDotTemplate;

    public int selectedEmbellishmentGradientDotC = -1;

    public int selectedEmbellishmentGradientDot = -1;

    private GameObject embellishmentGradientColorPicker;

    public bool embellishmentGradientColorPickerWasOpen;

    public int needEmbellishmentColorRedrawSpecific = -1;

    private GameObject embellishmentLayerContainer;

    private GameObject embellishmentMenu;

    private GameObject embellishmentContainer;

    private List<GameObject> embellishmentLayers = new List<GameObject>();

    private GameObject embellishmentLayerTemplate;

    public int editingEmbellishmentLayer = -1;

    public float embellishmentEditorScroll;

    public int characterRebuildDelay;

    public GameObject embellishmentBrush;

    public string previousSelectedEmbellishment = string.Empty;

    public string selectedEmbellishment = string.Empty;

    public float precisePickUpdateDelay;

    public float precisePickPickDelay;

    public bool somethingPicked;

    public Vector3 precisePickPoint = Vector3.zero;

    public bool placingEmbellishment;

    private RaycastHit precisePickHitInfo;

    public Vector3 precisePickNormal = Vector3.up;

    public Vector3 lastPrecisePickMousePosition = default(Vector3);

    public float recentPrecisePickMouseMovement;

    public static Material precisePickMaterial;

    public bool editingExistingEmbellishment;

    public static SkinnedMeshRenderer[] embellishmentBrushMeshes;

    public static int curEmbellishmentBrushMesh = 0;

    public int embellishmentSliderMeshRebuildDelay;

    public int embellishmentBrushSetting_color = -1;

    public float embellishmentBrushSetting_size = 1f;

    public float embellishmentBrushSetting_bend = 0.5f;

    public float embellishmentBrushSetting_turn = 0.5f;

    public float embellishmentBrushSetting_twist = 0.5f;

    public bool embellishmentBrushSetting_mirror;

    public string embellishmentBrushSetting_embellishment = "FUR_0";

    public bool embellishmentBrushSetting_center;

    public int lastHairstyleVariantMax;

    public List<int> lastAddonHairstyleVariantMax = new List<int>();

    public GameObject hairAddonTemplate;

    public List<GameObject> hairAddonPanels = new List<GameObject>();

    public List<string> hairstyles = new List<string>();

    public List<int> hairstyleVariants = new List<int>();

    public bool needEmbellishmentMenuRebuild = true;

    public List<GameObject> embellishmentOptions = new List<GameObject>();

    public List<string> embellishmentNames = new List<string>();

    public List<int> embellishmentVariants = new List<int>();

    public List<int> embellishmentVariantSelected = new List<int>();

    public GameObject embellishmentCardTemplate;

    public bool embellishmentMenuWasOpen;

    public bool embellishmentMenuOpen;

    public static string[] allEmbellishments;

    private EmbellishmentPackage newEmbellishmentPackage;

    public int characterRedrawDelay;

    public bool searchCriteriaUpdated;

    public string searchPhrase = string.Empty;

    public bool needTexturePatternMenuRebuild = true;

    public List<GameObject> texturePatternOptions = new List<GameObject>();

    public List<GameObject> textureMaskOptions = new List<GameObject>();

    public List<string> patternNames = new List<string>();

    public List<int> patternVariants = new List<int>();

    public List<int> patternVariantSelected = new List<int>();

    public GameObject patternCardTemplate;

    public bool texturePatternMenuWasOpen;

    private GameObject textureLayerContainer;

    private GameObject texturePatternMaskMenu;

    private GameObject texturePatternContainer;

    private List<GameObject> textureLayers = new List<GameObject>();

    private GameObject textureLayerTemplate;

    public static Color fadedCol;

    public int editingTextureLayer = -1;

    public int editingTextureLayerMask = -1;

    public float textureEditorScroll;

    public Color originalEditColor;

    private List<GameObject> contextHotspots = new List<GameObject>();

    private GameObject contextHotspotCursor;

    private GameObject contextHotspotCursorLine;

    private int contextHotspotPoolSize = 10;

    private int nextContextHotspot;

    private int hoverContextHotspot = -1;

    private int lastHoverContextHotspot = -1;

    public float contextScale = 0.01f;

    public float contextDistFromScreenCenter = 99999f;

    private Vector3 v33;

    public bool contextWasOpen;

    private bool hideContextBecauseOfUI;

    private float recentPopup;

    public bool needPauseRebuild = true;

    public static Vector3 scrollV3 = default(Vector3);

    private bool inittingControls;

    public bool listeningForKeyPress;

    public string listeningForKeyID;

    public bool needControlsPageRebuild = true;

    public List<GameObject> controlPanels = new List<GameObject>();

    public GameObject controlPanelTemplate;

    public List<string> controlNames = new List<string>();

    public List<string> controlCodes = new List<string>();

    private float controlMenuScrollY;

    private bool graphicsPageInitting;

    private bool anyGraphicsSettingsChanged;

    private bool needGraphicsPageRebuild = true;

    private bool optionsPageInitting;

    private bool needOptionsPageRebuild = true;

    public float displayedLoadAmount;

    public float recentThinking;

    public Color loadingOrange;

    public Color loadingBlue;

    public float firstThinkWait = 1f;

    public bool firstThinking;

    public float newCharacterCustomizeDelay;

    public int newCharacterStep;

    public float priorVolume;

    private bool titleOpen = true;

    private bool selectingMode;

    private bool selectingSave;

    private bool showingTerms;

    private float titleTimer;

    private float a;

    private float termsX;

    private float termTransition;

    private CanvasRenderer[] titleRenderers;

    private float saveSelectionTransition;

    private float modeSelectionTransition;

    private List<GameObject> saveFileOptions = new List<GameObject>();

    private GameObject saveFileTemplate;

    private List<SaveFile> filteredSaveFiles;

    private bool choosingSaveName;

    private bool confirmingDelete;

    private bool firstTitleFrame = true;

    private bool simulatedESC;

    public string deletingSaveID;

    public int deleteConfirmationNumber;

    public bool justOpenedDeleteConfirmation;

    public static bool hasFocus = true;

    public List<NFDelegate> nextFrameTasks = new List<NFDelegate>();

    public List<NFDelegate> stutteredFrameTasks = new List<NFDelegate>();

    private bool waitingForLoadPlayerCharacter;

    private int nextCharUID = 1;

    private float[] chemical_display = new float[6];

    public bool currencyHUDopen;

    public float timeSinceWastedSpecimen = 99f;

    public float timeSpecimenWarningHasBeenOpen;

    private float fekel_display;

    private float specimen_display;

    public bool showCurrency;

    private float currencyCatchingUp;

    public GameObject renderCam;

    public GameObject renderStudio;

    public bool renderingHeadshot;

    public RackCharacter headshotSubject;

    public int headshotSubjectUID = -1;

    public NFDelegate callbackAfterHeadshot;

    private float headshotCamDist = 1f;

    public Texture2D mostRecentSnapshot;

    public float vol = 1f;

    public float volWorld;

    public float volUI = 1f;

    public float volBGM;

    public float tarReverb;

    public float reverb;

    public bool newGameFadeIn;

    public string popupPhrase = string.Empty;

    public bool popupPhraseIsAlreadyTranslated;

    public bool needNPCzoneForce;

    public Color fakeAmbientTargetColor = Color.black;

    public float fakeAmbientTargetIntensity;

    public Light[] fakeAmbientLights;

    private string zoneBeforeHologram = string.Empty;

    public Transform fakeAmbient;

    public float fogDensity = 0.0001f;

    public float tarFogDensity = 0.0001f;

    public bool wasAnyLabDoorOpen;

    public bool inTestRoom;

    public bool weAlreadyKnowPC;

    public RackCharacter knownPC;

    public int pcc = -1;

    public Vector3 forcedCameraPos;

    public Vector3 forcedCameraTarget;

    public float minCamDist;

    private float firstPersonDistBuffer = 1f;

    public float maxCamDist;

    public Transform camTargetBone;

    public float camFollowAccel = 0.1f;

    public float firstPersonAccel;

    public float firstPersonFocusDistance = 10f;

    public Vector3 titleCamPos;

    public float titleCamSwayX;

    public float titleCamSwayY;

    public Transform customFocusBone;

    public float customizationCamRot;

    public float recentCustomCamRot;

    public float customCamRotVel;

    public float customizationCamElevation;

    public float customCamElevationVel;

    public float customCamFreeSpin;

    public bool justChangedCustomizationPageAndNeedRecenter;

    public int cameraBoundsMask = -99;

    public float rtBlur;

    public float interactionCamX;

    public float interactionCamY;

    public bool freeCam;

    public Vector3 freeCamPos = default(Vector3);

    private bool justSwitchedIntoCamMode = true;

    private bool zoomAllowed = true;

    public float firstpersonTransition;

    public int forcedCamera;

    private void Start()
    {
        Game.PathDirectorySeparatorChar = Path.DirectorySeparatorChar;
        Game.characterAssetDirectory = Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterParts" + Game.PathDirectorySeparatorChar + string.Empty;
        Game.persistentDataPath = Application.persistentDataPath;
        Game.gameInstance = this;
        this.initSettings();
        this.initCharacterSystem();
        RackCharacter.initWetnessMaps();
        this.initInventory();
        this.initLayouts();
        this.initRenderingAndLighting();
        this.initCamera();
        this.initUI();
        Tutorials.init();
        this.initRackNet();
        this.initWorld();
        this.initPhysics();
        this.initAudio();
        this.initResearch();
        this.updateCamGraphicsSettings();
        this.initObjectives();
    }

    public void openRackNet()
    {
        UISFX.clickSFX(string.Empty);
        RacknetMultiplayer.inRackNet = true;
    }

    public void initRackNet()
    {
        RacknetMultiplayer.init();
    }

    public void initObjectives()
    {
        Objectives.reset();
        Objectives.startTracking();
    }

    public void playSoundFromThread(string sound, float vol = 1f, float pitch = 1f)
    {
        this.threadSoundsQueued.Add(sound);
        this.threadSoundsQueued_vol.Add(vol);
        this.threadSoundsQueued_pitch.Add(pitch);
    }

    public void playSound(string sound, float vol = 1f, float pitch = 1f)
    {
        if (!((UnityEngine.Object)this.uiAudio == (UnityEngine.Object)null))
        {
            int num = Game.uiSoundNames.IndexOf(sound);
            if (num == -1)
            {
                Game.uiSounds.Add(Resources.Load(sound) as AudioClip);
                Game.uiSoundNames.Add(sound);
                num = Game.uiSounds.Count - 1;
            }
            this.uiAudio.PlayOneShot(Game.uiSounds[num], vol);
        }
    }

    public void initAudio()
    {
        this.defaultAudioSource = GameObject.Find("DefaultAudioEmitter");
        this.audioListener = GameObject.Find("AudioListener");
        this.mixer = GameObject.Find("MusicPlayer").GetComponent<AudioSource>().outputAudioMixerGroup.audioMixer;
        this.uiAudio = GameObject.Find("UIAudioPlayer").GetComponent<AudioSource>();
        this.volWorld = 0f;
        this.volBGM = 0.5f;
        this.volUI = 1f;
        BGM.init(GameObject.Find("MusicPlayer").transform);
        if (!UserSettings.data.acceptedTerms)
        {
            BGM.play("title", false);
        }
        else
        {
            BGM.playNext();
        }
    }

    public void initSettings()
    {
        Localization.init();
        UserSettings.init();
    }

    public void initCharacterManager()
    {
        CharacterManager.init();
    }

    public void initInventory()
    {
        Inventory.init();
    }

    public void initLayouts()
    {
        LayoutManager.init();
    }

    public void initWorld()
    {
        this.World = GameObject.Find("World");
        MeshRenderer[] componentsInChildren = this.World.GetComponentsInChildren<MeshRenderer>();
        for (int i = 0; i < componentsInChildren.Length; i++)
        {
            componentsInChildren[i].reflectionProbeUsage = ReflectionProbeUsage.Simple;
        }
        this.labDoors = this.World.GetComponentsInChildren<LabDoor>();
        this.helperDrone = ((UnityEngine.Component)this.World.transform.Find("HelperDrone")).GetComponent<Drone>();
    }

    public void initPhysics()
    {
        this.updateWorldCollisions();
    }

    public void updateWorldCollisions()
    {
        this.worldColliders = this.World.GetComponentsInChildren<Collider>();
        this.disableWorldAndCharacterPartCollisions();
    }

    public void disableWorldAndCharacterPartCollisions()
    {
    }

    public void initRenderingAndLighting()
    {
        this.shader = GameObject.Find("CharacterMaterial").GetComponent<MeshRenderer>().material.shader;
        this.ghostShader = Shader.Find("Particles/Additive");
        RackCharacter.originalCharacterShader = GameObject.Find("CharacterMaterial").GetComponent<MeshRenderer>().material.shader;
        this.defaultMaterial = GameObject.Find("CharacterMaterial").GetComponent<MeshRenderer>().material;
        this.ghostMaterial = GameObject.Find("Ghost").GetComponent<MeshRenderer>().material;
        UnityEngine.Object.Destroy(GameObject.Find("Ghost"));
        MeshRenderer[] array = UnityEngine.Object.FindObjectsOfType<MeshRenderer>();
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i].gameObject.isStatic)
            {
                array[i].gameObject.layer = 8;
            }
        }
    }

    public void initCamera()
    {
        this.mainCamContainer = GameObject.Find("MainCamContainer").gameObject;
        this.mainCam = GameObject.Find("MainCamContainer").transform.Find("MainCam").gameObject;
        this.uiCam = GameObject.Find("UICam");
        this.renderCam = GameObject.Find("RenderCam");
        this.renderStudio = GameObject.Find("RenderStudio");
        this.renderCam.SetActive(false);
        this.DOFfocus = GameObject.Find("DOFfocus");
        this.camFollowDist = 6f;
        this.camFollowElevation = 1f;
        this.camFollowAngle = 1f;
    }

    public void initCharacterSystem()
    {
        Cum.init();
        Game.maxBreastSize = 3f;
        this.masterSkeleton = GameObject.Find("MasterSkeleton");
        this.masterSkeleton.SetActive(false);
        SkinnedMeshRenderer[] componentsInChildren = GameObject.Find("paintables").GetComponentsInChildren<SkinnedMeshRenderer>();
        Game.allEmbellishments = new string[componentsInChildren.Length - 1];
        int num = 0;
        for (int i = 0; i < componentsInChildren.Length; i++)
        {
            if (componentsInChildren[i].name == "RefBody")
            {
                num = 1;
            }
            else
            {
                Game.allEmbellishments[i - num] = componentsInChildren[i].name;
            }
        }
        Interaction.initSystem();
        RackCharacter.initSystem();
        this.initEmbellishmentBrush();
        base.StartCoroutine(PatternIcons.init());
    }

    public void physiologyCheckboxChanged()
    {
        this.characterCustomizePhysiologyChanged();
    }

    public void gotoDownloadLink()
    {
        Application.OpenURL(Game.newsData.downloadLink);
    }

    public IEnumerator fetchNews()
    {
        this.newsWindow = this.UI.transform.Find("news").gameObject;
        this.newsMaximize = this.UI.transform.Find("news").Find("cmdMaximize").gameObject;
        this.newsMinimize = this.UI.transform.Find("news").Find("cmdMinimize").gameObject;
        this.originalNewsLocation = this.newsWindow.transform.localPosition;
        WWW www = new WWW("http://fek.onl/_r2ckversioninfo.xml?refresh=" + Guid.NewGuid());
        yield return (object)www;
        /*Error: Unable to find new state assignment for yield return*/
        if (www.error == string.Empty)
        {
            XmlSerializer xmlSerializer = new XmlSerializer(typeof(NewsAndVersionData));
            TextReader textReader = new StringReader(www.text);
            Game.newsData = (xmlSerializer.Deserialize(textReader) as NewsAndVersionData);
            this.newsWindow.transform.Find("txtHeader").GetComponent<Text>().text = Game.newsData.newsTitle;
            this.newsWindow.transform.Find("Scroll View").Find("Viewport").Find("txtContent").GetComponent<Text>().text = Game.newsData.newsContent;
            if (Game.newsData.newsTitle == string.Empty && Game.newsData.latestVersion <= Game.gameVersion)
            {
                this.newsWindow.transform.Find("txtHeader").GetComponent<Text>().text = "No news!";
                this.newsWindow.transform.Find("Scroll View").Find("Viewport").Find("txtContent").GetComponent<Text>().text = "Enjoy the game. :3";
                this.toggleNews();
            }
            if (Game.newsData.latestVersion <= Game.gameVersion)
            {
                this.newsWindow.transform.Find("NewVersionIndicator").gameObject.SetActive(false);
            }
        }
        else
        {
            Game.trace("Failed to load news.");
            this.newsWindow.transform.Find("txtHeader").GetComponent<Text>().text = "No news!";
            this.newsWindow.transform.Find("Scroll View").Find("Viewport").Find("txtContent").GetComponent<Text>().text = "Enjoy the game. :3";
            this.toggleNews();
        }
        yield break;
    }

    public void toggleNews()
    {
        this.newsOpen = !this.newsOpen;
        this.newsMinimize.SetActive(this.newsOpen);
        this.newsMaximize.SetActive(!this.newsOpen);
        this.v3 = this.originalNewsLocation;
        if (!this.newsOpen)
        {
            this.v3.x -= 189f;
        }
        this.newsWindow.transform.localPosition = this.v3;
    }

    public void genderIDchangedFromAdvanced()
    {
        this.characterCustomizeSomethingChanged();
    }

    public void previewOrgasm()
    {
        this.PC().refractory = 0f;
        this.PC().arousal = 1f;
        this.PC().orgasming = 0f;
        this.PC().pleasure = 10f;
        ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("previewArousal")).GetComponent<Slider>().val = 1f;
    }

    public void initUI()
    {
        GameObject.Find("UI").SetActive(true);
        this.UI = GameObject.Find("UI");
        this.DialogueWindow = this.UI.transform.Find("Dialogue").gameObject;
        this.thinkingIndicator = GameObject.Find("ThinkingIndicator");
        this.dialogueCam = GameObject.Find("DialogueCam").GetComponent<Camera>();
        this.EditorUI = GameObject.Find("EditorUI");
        this.EditorUI.SetActive(false);
        base.StartCoroutine(this.fetchNews());
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.nameChosen;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.confirmSaveDeletion;
        ((UnityEngine.Component)this.UI.transform.Find("ChemicalWindow").Find("chemical0").Find("hex_CA")).GetComponent<chemicalHexUI>().offset = 0f;
        ((UnityEngine.Component)this.UI.transform.Find("ChemicalWindow").Find("chemical1").Find("hex_FE")).GetComponent<chemicalHexUI>().offset = 0.5f;
        ((UnityEngine.Component)this.UI.transform.Find("ChemicalWindow").Find("chemical2").Find("hex_LA")).GetComponent<chemicalHexUI>().offset = 1.5f;
        ((UnityEngine.Component)this.UI.transform.Find("ChemicalWindow").Find("chemical3").Find("hex_SC")).GetComponent<chemicalHexUI>().offset = 2f;
        ((UnityEngine.Component)this.UI.transform.Find("ChemicalWindow").Find("chemical4").Find("hex_EQ")).GetComponent<chemicalHexUI>().offset = 2.5f;
        ((UnityEngine.Component)this.UI.transform.Find("ChemicalWindow").Find("chemical5").Find("hex_AV")).GetComponent<chemicalHexUI>().offset = 3f;
        ((UnityEngine.Component)this.UI.transform.Find("Popup").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.closePopup;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdPreferences")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdGraphics")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdOptions")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdControls")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdSupport")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdQuit")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdShowers")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdTranslate")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdPatchNotes")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdBugs")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("cmdCredits")).GetComponent<MenuOption>().callback = this.pauseMenuItemClicked;
        Game.fadedCol = Color.white;
        Game.fadedCol.a = 0.2f;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdSave")).GetComponent<MenuOption>().fullHover = true;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdCancel")).GetComponent<MenuOption>().fullHover = true;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdSave")).GetComponent<MenuOption>().callback = this.saveCustomization;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdCancel")).GetComponent<MenuOption>().callback = this.cancelCustomization;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdImport")).GetComponent<MenuOption>().fullHover = true;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdExport")).GetComponent<MenuOption>().fullHover = true;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdImport")).GetComponent<MenuOption>().callback = this.importCharacter;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdExport")).GetComponent<MenuOption>().callback = this.exportCharacter;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("cmdEditColors")).GetComponent<MenuOption>().callback = this.gotoEmbellishmentColorEditor;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("cmdMakePackage")).GetComponent<MenuOption>().callback = this.makeEmbellishmentPackage;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("cmdInsertPackage")).GetComponent<MenuOption>().callback = this.insertEmbellishmentPackage;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("cmdCopyToBrush")).GetComponent<MenuOption>().callback = this.copyEmbellishmentToBrush;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("cmdDeleteSelected")).GetComponent<MenuOption>().callback = this.deleteSelectedEmbellishments;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePenisTypeChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePenisTypeChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePenisTypeChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePenisTypeChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BreastSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BreastPerkSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisGrowerShowerSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("NippleSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ScrotumSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid")).GetComponent<UIGrid>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid")).GetComponent<UIGrid>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid")).GetComponent<UIGrid>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ClitSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("SizeGrid")).GetComponent<UIGrid>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FeminitySlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FaceFeminitySlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FeminitySlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("MuscleSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FatSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("BellySlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("HipSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("ButtSlider")).GetComponent<Slider>().onChange = this.characterCustomizeSomethingChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")).GetComponent<HexOptionSystem>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailLengthSlider")).GetComponent<Slider>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailStiffnessSlider")).GetComponent<Slider>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailShapeGrid")).GetComponent<UIGrid>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailCurlGrid")).GetComponent<UIGrid>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailSizeSlider")).GetComponent<Slider>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingSizeSlider")).GetComponent<Slider>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailLiftSlider")).GetComponent<Slider>().onChange = this.characterCustomizePhysiologyChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("cmdEditTailFur")).GetComponent<MenuOption>().callback = this.gotoTailFurEditor;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("DensitySlider")).GetComponent<Slider>().onChange = this.characterCustomizeTailFurSliderChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("LengthSlider")).GetComponent<Slider>().onChange = this.characterCustomizeTailFurSliderChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("TipSizeSlider")).GetComponent<Slider>().onChange = this.characterCustomizeTailFurSliderChanged;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("ExportWindow").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.confirmExport;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.confirmImport;
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("ColorAndMarkings").Find("cmdAddDecal")).GetComponent<MenuOption>().callback = this.openDecalMenu;
        this.texturePatternMaskMenu = this.UI.transform.Find("TexturePatternSelectionMenu").gameObject;
        this.colorPickerOpen = false;
        this.colorPicker = this.UI.transform.Find("ColorPicker").gameObject;
        this.colorPicker.GetComponent<ColorPicker>().onChanged = this.colorPicked;
        this.colorPicker.SetActive(false);
        this.embellishmentGradientColorPicker = this.UI.transform.Find("EmbellishmentColorPicker").gameObject;
        this.embellishmentGradientColorPicker.SetActive(false);
        while (this.toolHotkeys.Count < 10)
        {
            this.toolHotkeys.Add(string.Empty);
            this.toolMaterial.Add(string.Empty);
            this.toolbarPops.Add(0f);
            this.toolSexToys.Add(null);
        }
        ((UnityEngine.Component)this.UI.transform.Find("TerminateConfirm").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.confirmTermination;
        ((UnityEngine.Component)this.UI.transform.Find("TerminateConfirm").Find("cmdCancel")).GetComponent<MenuOption>().callback = this.simulateESC;
        for (int i = 0; i < 6; i++)
        {
            this.sexPoseHover.Add(false);
        }
        this.LabEditingInterfaceCursor = this.UI.transform.Find("LabEditingInterface").Find("cursor");
        this.initContextMenu();
        ((UnityEngine.Component)this.UI.transform.Find("SatisfactionResults").Find("cmdOkay")).GetComponent<MenuOption>().callback = this.closeSatisfaction;
        this.patronTextColor = new Color(1f, 0.7607843f, 0.403921574f);
        this.SpecimenCapacityWarning = this.UI.transform.Find("SpecimenCapacityWarning");
        for (int j = 0; j < 6; j++)
        {
            this.chemicalWindowChems[j] = this.UI.transform.Find("ChemicalWindow").Find("chemical" + j);
            this.chemicalWindowChemTexts[j] = ((UnityEngine.Component)this.chemicalWindowChems[j].Find("txt")).GetComponent<Text>();
        }
        this.ToolMenu = this.UI.transform.Find("ToolMenu");
        this.ToolMenuCurTool = this.ToolMenu.Find("curTool");
        this.ToolMenuCurToolChemicalDisplay = this.ToolMenuCurTool.Find("chemical");
        this.ToolMenuCurToolChemicalDisplayDoseText = ((UnityEngine.Component)this.ToolMenuCurToolChemicalDisplay.Find("txtDose")).GetComponent<Text>();
        this.ToolMenuCurToolChemicalDisplayDoseTextFraction = ((UnityEngine.Component)this.ToolMenuCurToolChemicalDisplay.Find("txtDoseFraction")).GetComponent<Text>();
        for (int k = 0; k < 6; k++)
        {
            this.ToolMenuModeMenuMode[k] = this.ToolMenu.Find("ModeMenu").Find("Mode" + k);
            this.ToolMenuModeMenuModeTxt[k] = ((UnityEngine.Component)this.ToolMenuModeMenuMode[k].Find("Text")).GetComponent<Text>();
        }
        for (int l = 0; l < 10; l++)
        {
            this.ToolMenuHotkeys[l] = this.ToolMenu.Find("hotkey (" + l + ")");
        }
        this.initTutorials();
    }

    public bool simulateESC(MenuOption mo)
    {
        this.simulatedESC = true;
        return true;
    }

    public void overTerminate()
    {
        this.hoveringOverTerminateButton = true;
    }

    public void outTerminate()
    {
        this.hoveringOverTerminateButton = false;
    }

    public void closeColorPicker()
    {
        this.colorPickerOpen = false;
    }

    public bool closePopup(MenuOption mo)
    {
        this.popupOpen = false;
        return true;
    }

    public bool openForum(MenuOption menuOption)
    {
        Application.OpenURL("http://furry.science/");
        return true;
    }

    public void openPatchNotes()
    {
        Application.OpenURL("http://furry.science/patchnotes");
    }

    public bool pauseMenuItemClicked(MenuOption menuOption)
    {
        Game.pausePage = string.Empty;
        string name = menuOption.name;
        if (name != null)
        {
            Dictionary<string, int> dictionary = new Dictionary<string, int>(11);
            dictionary.Add("cmdPreferences", 0);
            dictionary.Add("cmdOptions", 1);
            dictionary.Add("cmdControls", 2);
            dictionary.Add("cmdGraphics", 3);
            dictionary.Add("cmdSupport", 4);
            dictionary.Add("cmdPatchNotes", 5);
            dictionary.Add("cmdBugs", 6);
            dictionary.Add("cmdTranslate", 7);
            dictionary.Add("cmdQuit", 8);
            dictionary.Add("cmdCredits", 9);
            dictionary.Add("cmdShowers", 10);
            int num = default(int);
            if (dictionary.TryGetValue(name, out num))
            {
                switch (num)
                {
                    case 0:
                        Game.pausePage = "preferences";
                        this.openPreferencesInterface();
                        return true;
                    case 1:
                        Game.pausePage = "options";
                        return true;
                    case 2:
                        Game.pausePage = "controls";
                        return true;
                    case 3:
                        Game.pausePage = "graphics";
                        return true;
                    case 4:
                        this.gotoPatreon();
                        return true;
                    case 5:
                        this.openPatchNotes();
                        return true;
                    case 6:
                        Application.OpenURL("http://furry.science/reportabug");
                        return true;
                    case 7:
                        this.openTranslationDoc();
                        return true;
                    case 8:
                        this.quit();
                        return true;
                    case 9:
                        this.openCredits();
                        return true;
                    case 10:
                        if (this.PC() != null)
                        {
                            this.PC().teleport(-23f, 11f, -89f, -999f, false);
                            this.pauseOpen = false;
                        }
                        return true;
                }
            }
        }
        return true;
    }

    public void gotoPatreon()
    {
        Application.OpenURL("http://www.patreon.com/fek");
    }

    public void openCredits()
    {
        this.pauseOpen = false;
        this.creditsOpen = true;
    }

    private void Update()
    {
        if (Time.smoothDeltaTime > 0f)
        {
            Game.framerate = 1f / Time.smoothDeltaTime;
        }
        this.processGame();
        Game.thereHasBeenAtLeastOneFixedUpdate = false;
    }

    private void processGame()
    {
        if (!this.manualFPSset)
        {
            Application.targetFrameRate = 80;
        }
        this.processCharacters();
        this.processTime();
        this.processNextFrameTasks();
        this.anythingLoading = false;
        this.loadedAmount = 0f;
        this.loadingAmount = 0f;
        RealtimeMirrors.process();
        BondageApparatus.process();
        this.processInteraction();
        Inventory.process();
        this.processResearch();
        this.processContextMenu();
        this.processInput();
        RacknetMultiplayer.process();
        this.processUI();
        this.processInlineDialogue();
        this.processThoughtGauge();
        this.processDialogue();
        if (this.EditorUI.activeSelf)
        {
            this.processEditorUI();
        }
        this.processLabEditing();
        this.processZoneCulling();
        this.processAudio();
        this.processConsole();
        this.simulatedESC = false;
    }

    public void connectToRackNet()
    {
        RacknetMultiplayer.openLoginWindow();
    }

    public void clearCache()
    {
        RacknetMultiplayer.clearCache();
    }

    public void disconnectfromRackNet()
    {
        RacknetMultiplayer.disconnectFromLobby(false);
    }

    public void MPpublicPageLeft()
    {
        RacknetMultiplayer.curPublicPage--;
        RacknetMultiplayer.publicCharacterListStatus = 0;
    }

    public void MPpublicPageRight()
    {
        RacknetMultiplayer.curPublicPage++;
        RacknetMultiplayer.publicCharacterListStatus = 0;
    }

    public void MPsaveToFavorites()
    {
        RacknetMultiplayer.savePreviewCharacterToFavorites();
    }

    public void MPfilterPublicCharactersClicked(Transform button)
    {
        switch (button.name)
        {
            case "cmdNewest":
                RacknetMultiplayer.filterMode = 0;
                break;
            case "cmdBest":
                RacknetMultiplayer.filterMode = 1;
                break;
            case "cmdName":
                RacknetMultiplayer.filterMode = 2;
                break;
            case "cmdSpecies":
                RacknetMultiplayer.filterMode = 3;
                break;
        }
        RacknetMultiplayer.updateFilter();
    }

    public void MPtakeMyCharacterOffline(Transform button)
    {
        RacknetMultiplayer.takeMyCharacterOffline(button);
    }

    public void MPupvote(Transform button)
    {
        RacknetMultiplayer.upvote(button);
    }

    public void MPupvoteCurrentTestTubeCharacter()
    {
        RacknetMultiplayer.sendUpvote(this.randomCharactersForSelection[this.characterSelector_currentSelected].racknetID);
        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
            .Find("cmdUpvote")
            .gameObject.SetActive(false);
        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
            .Find("cmdDownvote")
            .gameObject.SetActive(false);
    }

    public void MPdownvoteCurrentTestTubeCharacter()
    {
        RacknetMultiplayer.sendDownvote(this.randomCharactersForSelection[this.characterSelector_currentSelected].racknetID);
        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
            .Find("cmdUpvote")
            .gameObject.SetActive(false);
        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
            .Find("cmdDownvote")
            .gameObject.SetActive(false);
    }

    public void MPdownvote(Transform button)
    {
        RacknetMultiplayer.downvote(button);
    }

    public void MPloadPublicCharacterPreview(Transform button)
    {
        RacknetMultiplayer.loadPublicCharacterPreview(button);
    }

    public void MPuploadSelfToRacknet()
    {
        RacknetMultiplayer.uploadSelfToRacknet();
    }

    public void MPerrorOkayClicked()
    {
        RacknetMultiplayer.errorMessage = string.Empty;
    }

    public void loginClicked(bool registering = false)
    {
        RacknetMultiplayer.loginClicked(registering);
    }

    public void registerClicked()
    {
        this.loginClicked(true);
    }

    public void processThoughtGauge()
    {
        if (Input.GetKeyDown(UserSettings.data.KEY_TOGGLE_THOUGHT_GAUGE))
        {
            UISFX.clickSFX(string.Empty);
            this.toggleThoughtGauge = !this.toggleThoughtGauge;
        }
        this.showThoughtGauge = false;
        if (this.PC() != null && this.PC().interactionSubject != null && this.toggleThoughtGauge && !this.showingChemicalSelectionMenu)
        {
            this.showThoughtGauge = true;
        }
        this.UI.transform.Find("ThoughtGauge").gameObject.SetActive(this.showThoughtGauge);
        if (this.showThoughtGauge)
        {
            if ((UnityEngine.Object)this.commandPanelTemplate == (UnityEngine.Object)null)
            {
                this.commandPanelTemplate = this.UI.transform.Find("ThoughtGauge").Find("commands").Find("Command")
                    .gameObject;
                this.commandPanelTemplate.SetActive(false);
            }
            int num = 0;
            foreach (string item in this.PC().interactionSubject.commandStatus.Keys.ToList())
            {
                int commandStatus = this.PC().interactionSubject.getCommandStatus(item);
                if (commandStatus != 0 && (!(item == "dont_be_rude") || commandStatus != 1))
                {
                    if (num >= this.commandPanels.Count)
                    {
                        GameObject gameObject = UnityEngine.Object.Instantiate(this.commandPanelTemplate);
                        gameObject.SetActive(true);
                        gameObject.transform.SetParent(this.commandPanelTemplate.transform.parent);
                        gameObject.transform.localScale = Vector3.one;
                        gameObject.transform.localRotation = Quaternion.identity;
                        this.v3.x = 0f;
                        if (this.commandPanels.Count % 2 == 0)
                        {
                            this.v3.x += 136f;
                        }
                        this.v3.y = (float)this.commandPanels.Count * -11f;
                        this.v3.z = 0f;
                        gameObject.transform.localPosition = this.v3;
                        this.commandPanels.Add(gameObject);
                    }
                    switch (commandStatus)
                    {
                        case 0:
                            this.col.r = 0.5f;
                            this.col.g = 0.5f;
                            this.col.b = 0.5f;
                            this.col.a = 1f;
                            break;
                        case 1:
                            this.col.r = 1f;
                            this.col.g = 1f;
                            this.col.b = 1f;
                            this.col.a = 1f;
                            break;
                        case 2:
                            this.col = this.loadingBlue;
                            break;
                        case -1:
                            this.col = this.loadingOrange;
                            break;
                    }
                    ((UnityEngine.Component)this.commandPanels[num].transform.Find("indicator")).GetComponent<Image>().color = this.col;
                    ((UnityEngine.Component)this.commandPanels[num].transform.Find("txt")).GetComponent<Text>().color = (Color.white + this.col) / 2f;
                    ((UnityEngine.Component)this.commandPanels[num].transform.Find("txt")).GetComponent<Text>().text = Localization.getPhrase(item, string.Empty);
                    num++;
                }
            }
            this.v3.x = -0.5f;
            this.v3.y = -68f + 38f * this.PC().interactionSubject.friendlinessToPlayer / 2f;
            this.v3.z = 0f;
            this.UI.transform.Find("ThoughtGauge").Find("msk").localPosition = this.v3;
            this.v3.x = 0f;
            this.v3.y = 38f * (2f - this.PC().interactionSubject.friendlinessToPlayer) / 2f;
            this.v3.z = 0f;
            this.UI.transform.Find("ThoughtGauge").Find("msk").Find("fill")
                .localPosition = this.v3;
            ((UnityEngine.Component)this.UI.transform.Find("ThoughtGauge").Find("txtName")).GetComponent<Text>().text = this.PC().interactionSubject.data.name;
            this.v3.x = this.PC().interactionSubject.dominance * 71f;
            this.v3.y = -55f;
            this.v3.z = 0f;
            this.UI.transform.Find("ThoughtGauge").Find("nubDominance").localPosition = this.v3;
            this.v3.x = this.PC().interactionSubject.aggression * 57f;
            this.v3.y = -67.5f;
            this.v3.z = 0f;
            this.UI.transform.Find("ThoughtGauge").Find("nubMood").localPosition = this.v3;
            if (this.PC().interactionSubject.friendlinessToPlayer > this.lastFriendliness)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ThoughtGauge").Find("CA_friendlinessUp")).GetComponent<AnimatedDirectionArrows>().onTime = 3f;
            }
            this.lastFriendliness = this.PC().interactionSubject.friendlinessToPlayer;
            if (this.PC().interactionSubject.dominance > this.lastDominance)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ThoughtGauge").Find("CA_dominanceUp")).GetComponent<AnimatedDirectionArrows>().onTime = 3f;
            }
            if (this.PC().interactionSubject.dominance < this.lastDominance)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ThoughtGauge").Find("CA_dominanceDown")).GetComponent<AnimatedDirectionArrows>().onTime = 3f;
            }
            this.lastDominance = this.PC().interactionSubject.dominance;
            if (this.PC().interactionSubject.aggression > this.lastAggression)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ThoughtGauge").Find("CA_aggressionUp")).GetComponent<AnimatedDirectionArrows>().onTime = 3f;
            }
            if (this.PC().interactionSubject.aggression < this.lastAggression)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ThoughtGauge").Find("CA_aggressionDown")).GetComponent<AnimatedDirectionArrows>().onTime = 3f;
            }
            this.lastAggression = this.PC().interactionSubject.aggression;
        }
        else
        {
            this.lastDominance = 0f;
            this.lastAggression = 0f;
            this.lastFriendliness = 0f;
        }
    }

    public void processTime()
    {
        this.timeScale_act += (this.timeScale - this.timeScale_act) * 0.1f;
        Time.timeScale = this.timeScale_act;
        this.timeScale = 1f;
        if (UserSettings.data.autoPhysics)
        {
            this.FDT = Time.deltaTime;
            UserSettings.data.physicsQuality = (0f - (this.FDT - 0.07f)) / 0.06f;
        }
        else
        {
            this.FDT = 0.07f - UserSettings.data.physicsQuality * 0.06f;
        }
        Time.fixedDeltaTime = this.FDT;
    }

    public float radDist(float r1, float r2)
    {
        this.rDist = Mathf.Abs(r2 - r1) / this.radianCircumference;
        while (this.rDist > 1f)
        {
            this.rDist -= 1f;
        }
        if (this.rDist > 0.5f)
        {
            this.rDist = 1f - this.rDist;
        }
        return this.rDist;
    }

    public void automaticallyPickDialogue()
    {
        this.subject = this.PC().interactionSubject;
        if (this.subject.helloPhase < 3)
        {
            this.sayEmote("inline_converse.greet");
            this.subject.helloPhase = 3;
            this.autoDialogueCooldown = 7f;
        }
        else
        {
            if (this.subject.numberOfStimulatingInteractions < 1)
            {
                if (this.subject.autoDialogueFamiliarity > 10f)
                {
                    if (this.autoDialogueOptions[3] == null)
                    {
                        this.autoDialogueOptions[3] = new string[9]
                        {
                                                    "inline_ask.ask_about_secrets",
                                                    "inline_encourage.encourage_fetishes",
                                                    "inline_arouse.comment_on_interaction",
                                                    "inline_arouse.comment_on_experience",
                                                    "inline_encourage.compliment_body",
                                                    "inline_encourage.compliment_genitals",
                                                    "inline_ask.ask_what_they_like",
                                                    "inline_arouse.comment_on_attraction",
                                                    "inline_ask.ask_what_they_dislike"
                        };
                    }
                    this.subject.autoDialogueFamiliarity += 0.3f;
                    this.sayEmote(Game.randPick(this.autoDialogueOptions[3]));
                }
                else if (this.subject.autoDialogueFamiliarity > 5f)
                {
                    if (this.autoDialogueOptions[2] == null)
                    {
                        this.autoDialogueOptions[2] = new string[8]
                        {
                                                    "inline_encourage.encourage_fetishes",
                                                    "inline_arouse.comment_on_interaction",
                                                    "inline_arouse.comment_on_experience",
                                                    "inline_encourage.compliment_body",
                                                    "inline_encourage.compliment_genitals",
                                                    "inline_ask.ask_what_they_like",
                                                    "inline_arouse.comment_on_attraction",
                                                    "inline_ask.ask_what_they_dislike"
                        };
                    }
                    this.subject.autoDialogueFamiliarity += 0.3f;
                    this.sayEmote(Game.randPick(this.autoDialogueOptions[2]));
                }
                else if (this.subject.autoDialogueFamiliarity > 1f)
                {
                    if (this.autoDialogueOptions[1] == null)
                    {
                        this.autoDialogueOptions[1] = new string[7]
                        {
                                                    "inline_arouse.comment_on_interaction",
                                                    "inline_arouse.comment_on_experience",
                                                    "inline_encourage.compliment_body",
                                                    "inline_encourage.compliment_genitals",
                                                    "inline_ask.ask_what_they_like",
                                                    "inline_arouse.comment_on_attraction",
                                                    "inline_ask.ask_what_they_dislike"
                        };
                    }
                    this.subject.autoDialogueFamiliarity += 0.3f;
                    this.sayEmote(Game.randPick(this.autoDialogueOptions[1]));
                }
                else
                {
                    if (this.autoDialogueOptions[0] == null)
                    {
                        this.autoDialogueOptions[0] = new string[3]
                        {
                                                    "inline_encourage.compliment_body",
                                                    "inline_encourage.compliment_genitals",
                                                    "inline_ask.ask_what_they_like"
                        };
                    }
                    this.subject.autoDialogueFamiliarity += 0.3f;
                    this.sayEmote(Game.randPick(this.autoDialogueOptions[0]));
                }
            }
            else
            {
                this.sayEmote(Game.randPick(this.inlineDialogueSubmenuSubOptions[0]));
            }
            this.autoDialogueCooldown = 12f + UnityEngine.Random.value * 13f;
        }
    }

    public void processInlineDialogue()
    {
        if (this.timeSinceInlineDialogueWasSaid < 99f)
        {
            this.timeSinceInlineDialogueWasSaid += Time.deltaTime;
        }
        for (int num = this.queuedQuips.Count - 1; num >= 0; num--)
        {
            this.queuedQuips[num].delay -= Time.deltaTime;
            if (this.queuedQuips[num].delay <= 0f)
            {
                InlineDialogue.tellQuipToSubject(this.queuedQuips[num].quip, this.queuedQuips[num].subject, this.queuedQuips[num].speaker, this.queuedQuips[num].staleness);
                this.queuedQuips.RemoveAt(num);
            }
        }
        this.pickingInlineDialogueCategory = false;
        this.inlineDialogueOpen = false;
        if (this.PC() != null)
        {
            if (!this.inlineDialogueInitted)
            {
                this.inlineDialogueSubmenuOptions.Add("arouse");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(1f, 0.2509804f, 0.545098066f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[3]
                {
                                            "inline_arouse.comment_on_interaction",
                                            "inline_arouse.comment_on_experience",
                                            "inline_arouse.comment_on_attraction"
                });
                this.inlineDialogueSubmenuOptions.Add("encourage");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(0.2509804f, 1f, 0.533333361f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[6]
                {
                                            "inline_encourage.compliment_body",
                                            "inline_encourage.compliment_genitals",
                                            "inline_encourage.encourage_fetishes",
                                            "inline_encourage.empower",
                                            "inline_encourage.relax",
                                            "inline_encourage.encourage_obedience"
                });
                this.inlineDialogueSubmenuOptions.Add("ask");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(0.2509804f, 0.6901961f, 1f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[3]
                {
                                            "inline_ask.ask_what_they_like",
                                            "inline_ask.ask_about_secrets",
                                            "inline_ask.ask_what_they_dislike"
                });
                this.inlineDialogueSubmenuOptions.Add("converse");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(1f, 1f, 1f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[4]
                {
                                            "inline_converse.greet",
                                            "inline_converse.be_right_back",
                                            "inline_converse.goodbye_friendly",
                                            "inline_converse.goodbye_unfriendly"
                });
                this.inlineDialogueSubmenuOptions.Add("reprimand");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(1f, 0.3882353f, 0.2509804f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[5]
                {
                                            "inline_reprimand.speaking",
                                            "inline_reprimand.failure_to_use_title",
                                            "inline_reprimand.cumming",
                                            "inline_reprimand.disobedience",
                                            "inline_reprimand.rudeness"
                });
                this.inlineDialogueSubmenuOptions.Add("demean");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(1f, 0.7019608f, 0.2509804f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[4]
                {
                                            "inline_demean.insult_body",
                                            "inline_demean.insult_genitals",
                                            "inline_demean.insult_fetishes",
                                            "inline_demean.demean"
                });
                this.inlineDialogueSubmenuOptions.Add("order");
                this.inlineDialogueSubmenuOptionColors.Add(new Color(0.623529434f, 0.384313732f, 0.917647064f));
                this.inlineDialogueSubmenuSubOptions.Add(new string[8]
                {
                                            "inline_order.less_talking",
                                            "inline_order.use_your_mouth",
                                            "inline_order.stop_squirming",
                                            "inline_order.beg",
                                            "inline_order.demean_self",
                                            "inline_order.order_to_cum",
                                            "inline_order.order_to_not_cum",
                                            "inline_order.use_dom_name"
                });
                for (int i = 0; i < this.inlineDialogueSubmenuOptions.Count; i++)
                {
                    this.inlineDialogueCategoryIcons.Add(this.UI.transform.Find("InlineDialogue").Find("option_" + this.inlineDialogueSubmenuOptions[i]));
                    this.inlineDialogueCategoryTexts.Add(this.inlineDialogueCategoryIcons[i].Find("txt").gameObject);
                    ((UnityEngine.Component)this.inlineDialogueCategoryIcons[i]).GetComponent<Image>().color = this.inlineDialogueSubmenuOptionColors[i];
                    if (this.inlineDialogueSubmenuSubOptions[i].Length > this.numInlineDialogueSubmenuSubOptions)
                    {
                        this.numInlineDialogueSubmenuSubOptions = this.inlineDialogueSubmenuSubOptions[i].Length;
                    }
                }
                this.inlineDialogueSubOptionConfidences = new float[this.numInlineDialogueSubmenuSubOptions];
                this.UI.transform.Find("InlineDialogue").Find("subOption").gameObject.SetActive(true);
                for (int j = 0; j < this.numInlineDialogueSubmenuSubOptions; j++)
                {
                    GameObject gameObject = UnityEngine.Object.Instantiate(this.UI.transform.Find("InlineDialogue").Find("subOption").gameObject);
                    gameObject.transform.SetParent(this.UI.transform.Find("InlineDialogue").Find("subOptions"));
                    gameObject.transform.localPosition = Vector3.zero;
                    gameObject.transform.localEulerAngles = Vector3.zero;
                    gameObject.transform.localScale = Vector3.zero;
                    this.inlineDialogueSubOptions.Add(gameObject);
                }
                this.UI.transform.Find("InlineDialogue").Find("subOption").gameObject.SetActive(false);
                this.inlineDialogueInitted = true;
            }
            if (this.PC().interactionSubject != null && Input.GetKey(UserSettings.data.KEY_INLINE_DIALOGUE) && this.timeSpentInteracting > 1f && this.timeSinceInlineDialogueWasSaid > 1.5f)
            {
                this.timeScale = 0.3f;
                this.inlineDialogueOpen = true;
            }
            if (UserSettings.data.autoComment)
            {
                if (this.PC().interactionSubject != null)
                {
                    this.autoDialogueCooldown -= Time.deltaTime;
                    if (this.autoDialogueCooldown <= 0f)
                    {
                        this.automaticallyPickDialogue();
                    }
                }
                else
                {
                    this.autoDialogueCooldown = 5f;
                }
            }
        }
        if (this.inlineDialogueOpen)
        {
            if (!this.wasInlineDialogueOpen)
            {
                this.playSound("context_open", 1f, 1f);
                this.activeInlineDialogueSubmenu = 0;
                this.last_hoverInlineDialogueSubOption = -1;
                this.inlineDialogueSubmenu = string.Empty;
            }
            if (this.timeInInlineDialogueMenu < 0.05f)
            {
                Cursor.lockState = CursorLockMode.Locked;
            }
            else
            {
                Cursor.lockState = CursorLockMode.None;
            }
            this.inlineDialogueTransition += (1f - this.inlineDialogueTransition) * Game.cap(Time.deltaTime * 26f, 0f, 1f);
            this.timeInInlineDialogueMenu += Time.deltaTime;
            if (this.timeInInlineDialogueMenu > 99f)
            {
                this.timeInInlineDialogueMenu = 99f;
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0_ALT))
            {
                this.PC().characterVoice = "academic";
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1_ALT))
            {
                this.PC().characterVoice = "pleasant";
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2_ALT))
            {
                UISFX.clickSFX(string.Empty);
            }
            ((UnityEngine.Component)this.UI.transform.Find("InlineDialogue").Find("voices").Find("v_shy")).GetComponent<Image>().color = Color.white * ((!(this.PC().characterVoice == "academic")) ? 0.3f : 1f);
            ((UnityEngine.Component)this.UI.transform.Find("InlineDialogue").Find("voices").Find("v_happy")).GetComponent<Image>().color = Color.white * ((!(this.PC().characterVoice == "pleasant")) ? 0.3f : 1f);
            ((UnityEngine.Component)this.UI.transform.Find("InlineDialogue").Find("voices").Find("v_angry")).GetComponent<Image>().color = Color.white * ((!(this.PC().characterVoice == "gruff")) ? 0.3f : 1f);
            this.UI.transform.Find("InlineDialogue").Find("voices").Find("v_shy")
                .transform.localScale = Vector3.one * ((!(this.PC().characterVoice == "academic")) ? 0.27f : 0.37f);
            this.UI.transform.Find("InlineDialogue").Find("voices").Find("v_happy")
                .transform.localScale = Vector3.one * ((!(this.PC().characterVoice == "pleasant")) ? 0.27f : 0.37f);
            this.UI.transform.Find("InlineDialogue").Find("voices").Find("v_angry")
                .transform.localScale = Vector3.one * ((!(this.PC().characterVoice == "gruff")) ? 0.27f : 0.37f);
        }
        else
        {
            if (this.wasInlineDialogueOpen)
            {
                this.playSound("context_close", 1f, 1f);
            }
            if (this.inlineDialogueTransition > 0f)
            {
                this.inlineDialogueTransition -= Time.deltaTime * 15f;
                if (this.inlineDialogueTransition <= 0f)
                {
                    this.inlineDialogueTransition = 0f;
                    if (this.inlineDialogueToSay != string.Empty && this.inlineDialogueStillInSelectionRadius)
                    {
                        this.sayEmote(this.inlineDialogueToSay);
                        this.inlineDialogueToSay = string.Empty;
                        return;
                    }
                }
            }
            this.timeInInlineDialogueMenu = 0f;
        }
        this.UI.transform.Find("InlineDialogue").gameObject.SetActive(this.inlineDialogueTransition > 0f);
        if (this.inlineDialogueTransition > 0f)
        {
            this.inlineDialogueOptionDescription = string.Empty;
            if (this.inlineDialogueSubmenu == string.Empty)
            {
                this.inlineDialogueRadius = 60f;
            }
            else
            {
                this.inlineDialogueRadius = 135f;
            }
            this.v32 = Vector3.one * this.inlineDialogueTransition * 0.17f;
            if (this.inlineDialogueSubmenu == string.Empty)
            {
                this.mAng = Mathf.Atan2(this.uiMouseY, this.uiMouseX);
            }
            else
            {
                this.mAng = Mathf.Atan2(this.uiMouseY - this.inlineDialogueSubMenuMouseStart.y, this.uiMouseX - this.inlineDialogueSubMenuMouseStart.x);
            }
            float num2 = 1f;
            if (this.timeInInlineDialogueMenu > 0.2f && this.inlineDialogueSubmenu == string.Empty && this.uiMouse.magnitude >= this.inlineDialogueRadius * 0.65f)
            {
                this.pickingInlineDialogueCategory = true;
            }
            this.col = Color.black;
            bool flag = false;
            for (int k = 0; k < this.inlineDialogueSubmenuOptions.Count; k++)
            {
                this.ang = (float)(1 - k) / (float)this.inlineDialogueSubmenuOptions.Count * this.radianCircumference;
                if (this.pickingInlineDialogueCategory && this.radDist(this.mAng, this.ang) < num2)
                {
                    num2 = this.radDist(this.mAng, this.ang);
                    this.inlineDialogueSubmenu = this.inlineDialogueSubmenuOptions[k];
                    UISFX.clickSFX(string.Empty);
                    this.inlineDialogueSubMenuMouseStart = this.uiMouse;
                }
                if (this.inlineDialogueSubmenu == string.Empty || this.pickingInlineDialogueCategory)
                {
                    this.v33 = this.v32 * Mathf.Pow(Game.cap(1f - this.radDist(this.mAng, this.ang), 1f - Game.cap(this.uiMouse.magnitude / this.inlineDialogueRadius - 0.2f, 0f, 0.2f), 1f), 4f);
                    Transform transform = this.inlineDialogueCategoryIcons[k];
                    transform.localScale += (this.v33 - this.inlineDialogueCategoryIcons[k].localScale) * Game.cap(Time.deltaTime * 75f, 0f, 1f);
                }
                else if (this.inlineDialogueSubmenu == this.inlineDialogueSubmenuOptions[k])
                {
                    this.v33 = this.v32 * 2f;
                    if (this.last_hoverInlineDialogueSubOption != -1)
                    {
                        this.v33 *= 0.4f;
                    }
                    Transform transform2 = this.inlineDialogueCategoryIcons[k];
                    transform2.localScale += (this.v33 - this.inlineDialogueCategoryIcons[k].localScale) * Game.cap(Time.deltaTime * 75f, 0f, 1f);
                    if (this.inlineDialogueStillInSelectionRadius)
                    {
                        this.col = (Color.black + this.inlineDialogueSubmenuOptionColors[k]) / 2f;
                    }
                    flag = true;
                    this.activeInlineDialogueSubmenu = k;
                }
                else
                {
                    this.v33 = Vector3.zero;
                    Transform transform3 = this.inlineDialogueCategoryIcons[k];
                    transform3.localScale += (this.v33 - this.inlineDialogueCategoryIcons[k].localScale) * Game.cap(Time.deltaTime * 150f, 0f, 1f);
                }
                this.inlineDialogueCategoryTexts[k].SetActive(!flag);
                this.v3.x = this.inlineDialogueRadius * Mathf.Cos(this.ang);
                this.v3.y = this.inlineDialogueRadius * Mathf.Sin(this.ang);
                this.v3.z = 0f;
                this.v3 -= this.uiMouse * this.v33.x;
                if (flag)
                {
                    this.v3 = this.inlineDialogueSubMenuMouseStart;
                }
                Transform transform4 = this.inlineDialogueCategoryIcons[k];
                transform4.localPosition += (this.v3 * this.inlineDialogueTransition - this.inlineDialogueCategoryIcons[k].localPosition) * Game.cap(Time.deltaTime * 26f, 0f, 1f);
            }
            this.col.a = 0.8f * this.inlineDialogueTransition;
            Image component = ((UnityEngine.Component)this.UI.transform.Find("InlineDialogue").Find("blacker")).GetComponent<Image>();
            component.color += (this.col - ((UnityEngine.Component)this.UI.transform.Find("InlineDialogue").Find("blacker")).GetComponent<Image>().color) * Game.cap(Time.deltaTime * 15f, 0f, 1f);
            num2 = 1f;
            if (this.inlineDialogueSubmenu != string.Empty)
            {
                this.hoverInlineDialogueSubOption = -1;
                if (Input.GetKey(UserSettings.data.KEY_INLINE_DIALOGUE))
                {
                    this.inlineDialogueStillInSelectionRadius = ((this.uiMouse - this.inlineDialogueSubMenuMouseStart).magnitude < this.inlineDialogueRadius * 1.65f);
                }
            }
            if (this.last_hoverInlineDialogueSubOption == -1 && Input.GetKey(UserSettings.data.KEY_INLINE_DIALOGUE))
            {
                this.inlineDialogueToSay = string.Empty;
            }
            if (this.inlineDialogueSubmenu != string.Empty)
            {
                for (int l = 0; l < this.inlineDialogueSubmenuSubOptions[this.activeInlineDialogueSubmenu].Length; l++)
                {
                    this.inlineDialogueSubOptionConfidences[l] = 1f;
                }
            }
            for (int m = 0; m < this.numInlineDialogueSubmenuSubOptions; m++)
            {
                bool flag2 = false;
                if (this.inlineDialogueSubmenu != string.Empty)
                {
                    flag2 = (m < this.inlineDialogueSubmenuSubOptions[this.activeInlineDialogueSubmenu].Length);
                }
                this.inlineDialogueSubOptions[m].SetActive(flag2);
                if (flag2)
                {
                    this.ang = (float)m / (float)this.inlineDialogueSubmenuSubOptions[this.activeInlineDialogueSubmenu].Length * this.radianCircumference;
                    if ((this.uiMouse - this.inlineDialogueSubMenuMouseStart).magnitude >= this.inlineDialogueRadius * 0.5f && this.radDist(this.mAng, this.ang) < num2)
                    {
                        num2 = this.radDist(this.mAng, this.ang);
                        this.hoverInlineDialogueSubOption = m;
                    }
                    if (m == this.last_hoverInlineDialogueSubOption && this.inlineDialogueStillInSelectionRadius)
                    {
                        Transform transform5 = this.inlineDialogueSubOptions[m].transform;
                        transform5.localScale += (Vector3.one * 0.55f - this.inlineDialogueSubOptions[m].transform.localScale) * Game.cap(Time.deltaTime * 95f, 0f, 1f);
                        this.inlineDialogueToSay = this.inlineDialogueSubmenuSubOptions[this.activeInlineDialogueSubmenu][m];
                    }
                    else
                    {
                        Transform transform6 = this.inlineDialogueSubOptions[m].transform;
                        transform6.localScale += (Vector3.one * 0.35f - this.inlineDialogueSubOptions[m].transform.localScale) * Game.cap(Time.deltaTime * 95f, 0f, 1f);
                    }
                    ((UnityEngine.Component)this.inlineDialogueSubOptions[m].transform.Find("txt")).GetComponent<Text>().text = Localization.getPhrase(this.inlineDialogueSubmenuSubOptions[this.activeInlineDialogueSubmenu][m], string.Empty);
                    this.v3.x = this.inlineDialogueRadius * Mathf.Cos(this.ang);
                    this.v3.y = this.inlineDialogueRadius * Mathf.Sin(this.ang);
                    this.v3.z = 0f;
                    this.v3 += this.inlineDialogueSubMenuMouseStart;
                    Transform transform7 = this.inlineDialogueSubOptions[m].transform;
                    transform7.localPosition += (this.v3 - this.inlineDialogueSubOptions[m].transform.localPosition) * Game.cap(Time.deltaTime * 26f, 0f, 1f);
                    switch (Mathf.FloorToInt(this.inlineDialogueSubOptionConfidences[m] + 0.2f))
                    {
                        case 0:
                            this.inlineDialogueSubOptions[m].GetComponent<Image>().enabled = false;
                            this.inlineDialogueSubOptions[m].transform.Find("border").gameObject.SetActive(false);
                            break;
                        case 1:
                            this.inlineDialogueSubOptions[m].GetComponent<Image>().enabled = true;
                            this.inlineDialogueSubOptions[m].transform.Find("border").gameObject.SetActive(false);
                            break;
                        default:
                            this.inlineDialogueSubOptions[m].GetComponent<Image>().enabled = true;
                            this.inlineDialogueSubOptions[m].transform.Find("border").gameObject.SetActive(true);
                            break;
                    }
                }
                else
                {
                    this.inlineDialogueSubOptions[m].transform.localScale = Vector3.zero;
                    this.inlineDialogueSubOptions[m].transform.localPosition = Vector3.zero;
                }
            }
            if (!this.inlineDialogueStillInSelectionRadius)
            {
                this.hoverInlineDialogueSubOption = -2;
            }
            if (this.hoverInlineDialogueSubOption != this.last_hoverInlineDialogueSubOption || this.inlineDialogueStillInSelectionRadius != this.last_inlineDialogueStillInSelectionRadius)
            {
                if (this.inlineDialogueStillInSelectionRadius)
                {
                    if (this.hoverInlineDialogueSubOption == -1)
                    {
                        this.playSound("ui_click", 1f, 1f);
                    }
                    else
                    {
                        this.playSound("ui_click_high", 1f, 1f);
                    }
                }
                else
                {
                    this.playSound("context_close", 1f, 1f);
                }
                this.last_hoverInlineDialogueSubOption = this.hoverInlineDialogueSubOption;
            }
            if (!this.inlineDialogueStillInSelectionRadius || this.hoverInlineDialogueSubOption == -1)
            {
                this.inlineDialogueOptionDescription = string.Empty;
            }
            else
            {
                this.inlineDialogueOptionDescription = Localization.getPhrase("IDExplanation_" + this.inlineDialogueSubmenuSubOptions[this.activeInlineDialogueSubmenu][this.hoverInlineDialogueSubOption], string.Empty);
            }
            ((UnityEngine.Component)this.UI.transform.Find("InlineDialogue").Find("tooltip").Find("txt")).GetComponent<ScienceTextAnimator>().setText(this.inlineDialogueOptionDescription, 0f, 85f, true);
            this.UI.transform.Find("InlineDialogue").Find("tooltip").gameObject.SetActive(this.inlineDialogueOptionDescription != string.Empty);
        }
        this.wasInlineDialogueOpen = this.inlineDialogueOpen;
        this.last_inlineDialogueStillInSelectionRadius = this.inlineDialogueStillInSelectionRadius;
    }

    public void sayEmote(string subphrase)
    {
        string text = InlineDialogue.selectQuipFromSubOption(subphrase, this.PC().interactionSubject, this.PC());
        this.PC().emoteTime = 0f;
        this.PC().emoteString = string.Empty;
        this.PC().emoteThought = string.Empty;
        this.PC().think(text, 1f, true, true);
        queuedQuip queuedQuip = new queuedQuip();
        queuedQuip.delay = 1.5f + UnityEngine.Random.value * 1f;
        this.PC().interactionSubject.emoteTime = 0f;
        this.PC().interactionSubject.recentIDprompt = queuedQuip.delay + 1f;
        queuedQuip.quip = text;
        queuedQuip.subject = this.PC().interactionSubject;
        queuedQuip.speaker = this.PC();
        queuedQuip.staleness = this.PC().getQuipStaleness(subphrase);
        this.queuedQuips.Add(queuedQuip);
        this.PC().staleQuip(subphrase, 20f);
        subphrase = string.Empty;
        this.inlineDialogueSubmenu = string.Empty;
        this.activeInlineDialogueSubmenu = 0;
        this.inlineDialogueStillInSelectionRadius = false;
        this.timeSinceInlineDialogueWasSaid = 0f;
    }

    public void processConsole()
    {
        if (CharacterManager.waitingForDefinitionUpdaterUtilityCharacterToInit)
        {
            CharacterManager.processDefinitionUpdater();
            if (!CharacterManager.waitingForDefinitionUpdaterUtilityCharacterToInit)
            {
                Game.updatingEmbellishmentSpeciesID++;
                if (Game.updatingEmbellishmentSpeciesID < CharacterManager.species.Count)
                {
                    CharacterManager.updateDefinitionEmbellishments(CharacterManager.species[Game.updatingEmbellishmentSpeciesID]);
                }
                else
                {
                    Game.trace("All species updated.");
                }
            }
        }
    }

    public void processInteractions()
    {
        this.distToClosestTestSubject = 1000f;
        for (int i = 0; i < this.currentTestSubjects.Count; i++)
        {
            if (this.currentTestSubjects[i].distFromPC < this.distToClosestTestSubject)
            {
                this.distToClosestTestSubject = this.currentTestSubjects[i].distFromPC;
            }
        }
        if (this.delayedInteraction_delay > 0f)
        {
            this.delayedInteraction_delay -= Time.deltaTime;
            if (this.delayedInteraction_delay <= 0f)
            {
                this.delayedInteraction_delay = 0f;
                this.beginInteraction(this.delayedInteraction_subject, this.delayedInteraction_node, this.delayedInteraction_tool, this.delayedInteraction_mode, 0f);
            }
        }
        for (int num = this.interactions.Count - 1; num >= 0; num--)
        {
            this.interactions[num].process();
            if (!this.interactions[num].alive)
            {
                this.interactions[num].kill();
                this.interactions.RemoveAt(num);
            }
        }
    }

    public void processClimaxMenu()
    {
        if (this.hideClimaxMenuForTutorialReasons && !UserSettings.needTutorial("NPT_BRING_THE_SUBJECT_TO_ORGASM"))
        {
            this.hideClimaxMenuForTutorialReasons = false;
        }
        if (this.inATestinRoom && !this.pauseOpen && !this.confirmingTerminate && !this.inventoryOpen && !this.shopOpen && !TestingRoom.editingMode && !this.hideClimaxMenuForTutorialReasons)
        {
            goto IL_007d;
        }
        if (this.PC().interactingWithSelf)
        {
            goto IL_007d;
        }
        this.playerClimaxTransition -= Game.cap(Time.deltaTime * 1.45f, 0f, 1f);
        if (this.playerClimaxTransition < 0f)
        {
            this.playerClimaxTransition = 0f;
        }
        goto IL_013a;
    IL_013a:
        this.v3 = Vector3.zero;
        this.v3.x -= 325f * Mathf.Pow(1f - this.playerClimaxTransition, 3f);
        this.UI.transform.Find("ClimaxMenu").Find("bar").localPosition = this.v3;
        this.climaxColor = Color.white;
        this.playerClimaxPulse += 3f + 20f * Mathf.Pow(((UnityEngine.Component)this.UI.transform.Find("ClimaxMenu").Find("bar")).GetComponentInChildren<ProgressBarFill>().val, 4f);
        this.climaxColor.a = 1f - Mathf.Abs(Mathf.Cos(this.playerClimaxPulse * 0.01f)) * 0.75f * ((UnityEngine.Component)this.UI.transform.Find("ClimaxMenu").Find("bar")).GetComponentInChildren<ProgressBarFill>().val;
        ((UnityEngine.Component)((UnityEngine.Component)this.UI.transform.Find("ClimaxMenu").Find("bar")).GetComponentInChildren<ProgressBarFill>()).GetComponent<Image>().color = this.climaxColor;
        Transform spark = ((UnityEngine.Component)this.UI.transform.Find("ClimaxMenu").Find("bar")).GetComponentInChildren<ProgressBarFill>().spark;
        spark.localScale *= 1f - this.climaxColor.a * 0.5f;
        if (this.PC() == null)
        {
            this.ableToPleasureSelf = false;
        }
        else
        {
            this.UI.transform.Find("ClimaxMenu").Find("bar").Find("hdControlMode")
                .gameObject.SetActive(this.currentInteraction != null);
            this.UI.transform.Find("ClimaxMenu").Find("bar").Find("txtControlMode")
                .gameObject.SetActive(this.currentInteraction != null);
            ((UnityEngine.Component)this.UI.transform.Find("ClimaxMenu").Find("bar").Find("txtControlMode")).GetComponent<Text>().text = Localization.getPhrase("CONTROL_MODE_" + this.PC().controlMode, string.Empty);
            this.ableToPleasureSelf = (this.PC().interactionSubject != null || this.customizingCharacter);
            if (this.currentInteraction != null || this.embellishmentMenuOpen)
            {
                this.ableToPleasureSelf = false;
            }
        }
        if (this.ableToPleasureSelf && Cursor.lockState == CursorLockMode.None)
        {
            this.UI.transform.Find("ClimaxMenu").Find("bar").Find("cmdPleasureSelf")
                .gameObject.SetActive(this.inATestinRoom);
            Transform transform = this.UI.transform.Find("ClimaxMenu").Find("bar").Find("cmdPleasureSelf");
            transform.localScale += (Vector3.one - this.UI.transform.Find("ClimaxMenu").Find("bar").Find("cmdPleasureSelf")
                .localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
            this.UI.transform.Find("CustomizationCamControls").Find("cmdPleasureSelf").gameObject.SetActive(!this.embellishmentMenuOpen);
        }
        else
        {
            this.UI.transform.Find("ClimaxMenu").Find("bar").Find("cmdPleasureSelf")
                .gameObject.SetActive(false);
            this.UI.transform.Find("ClimaxMenu").Find("bar").Find("cmdPleasureSelf")
                .localScale = Vector3.zero;
            this.UI.transform.Find("CustomizationCamControls").Find("cmdPleasureSelf").gameObject.SetActive(false);
        }
        return;
    IL_007d:
        this.playerClimaxTransition += Game.cap(Time.deltaTime * 1.45f, 0f, 1f);
        if (this.playerClimaxTransition > 1f)
        {
            this.playerClimaxTransition = 1f;
        }
                                ((UnityEngine.Component)this.UI.transform.Find("ClimaxMenu").Find("bar")).GetComponentInChildren<ProgressBarFill>().val = this.PC().proximityToOrgasm;
        goto IL_013a;
    }

    public void showWarning(string warning, float time = 2.5f)
    {
        ((UnityEngine.Component)this.UI.transform.Find("txtWarningMessage")).GetComponentInChildren<Text>().text = warning;
        this.UI.transform.Find("txtWarningMessage").localScale = Vector3.zero;
        this.warningVelocity = 0f;
        this.warningSize = 0f;
        this.warningDisplayTime = time;
    }

    public void setToolMode(int mode)
    {
        if (this.currentInteraction != null && !Interaction.modeEligibleWithInteraction(this.currentInteraction, mode, out this.toolModeRequiredPose, true))
        {
            this.showWarning(Localization.getPhrase(Interaction.ineligibleReason, string.Empty), 2.5f);
            this.playSound("ui_error", 1f, 1f);
        }
        else
        {
            int num = this.curToolMode;
            this.curToolMode = mode;
            if (this.curToolMode > this.numToolModesAvailable - 1)
            {
                this.curToolMode = 0;
            }
            if (this.curToolMode != num)
            {
                UISFX.clickSFX(string.Empty);
                if (this.currentInteraction != null)
                {
                    if (this.toolModeRequiredPose != string.Empty)
                    {
                        if (this.toolModeRequiredPose == "default")
                        {
                            this.PC().setSexPose(0);
                        }
                        else
                        {
                            for (int i = 0; i < this.PC().interactionApparatus.poseNames.Count; i++)
                            {
                                if (this.PC().interactionApparatus.poseNames[i] == this.toolModeRequiredPose)
                                {
                                    this.PC().setSexPose(i + 1);
                                }
                            }
                        }
                    }
                    else
                    {
                        this.PC().setSexPose(this.PC().curSexPose);
                    }
                    string targetNode = this.currentInteraction.targetNode;
                    this.PC().removeFromInteraction(this.currentInteraction);
                    this.currentInteraction.alive = false;
                    this.currentInteraction.hasPerformer = false;
                    this.currentInteraction.isCurrentInteraction = false;
                    this.currentInteraction.performingCharacter.freeUpSlot(this.currentInteraction.performingNode, this.currentInteraction.uid);
                    this.currentInteraction.targetCharacter.freeUpSlot(this.currentInteraction.targetNode, this.currentInteraction.uid);
                    this.currentInteraction.performingCharacter.interactionEnded(this.currentInteraction.type + "_performing");
                    this.currentInteraction.targetCharacter.interactionEnded(this.currentInteraction.type + "_receiving");
                    this.beginInteraction(this.PC().interactionSubject, targetNode, this.curTool, this.curToolMode, 0.01f);
                    this.numToolModesAvailable = Interaction.getNumberOfModes(this.curTool, this.currentInteraction.targetNode);
                }
            }
            this.needInteractionHotspotRebuild = true;
        }
    }

    public void processToolMenu()
    {
        if (this.hideToolMenuForTutorialReasons && !UserSettings.needTutorial("NPT_FIND_OUT_WHAT_THE_SUBJECT_LIKES"))
        {
            this.hideToolMenuForTutorialReasons = false;
        }
        this.inATestinRoom = (this.currentZone == "Room0" || this.currentZone == "Room1" || this.currentZone == "Room2");
        this.ToolMenu.gameObject.SetActive(!this.pauseOpen);
        if (this.currentInteraction == null)
        {
            this.timeSinceToolModeMenuOpen = 0f;
        }
        else
        {
            this.timeSinceToolModeMenuOpen += Time.deltaTime;
        }
        for (int i = 0; i < 6; i++)
        {
            this.v3.z = 0f;
            this.v3.y = (float)((5 - i) * 25) - (107f + (float)(25 * (6 - this.numToolModesAvailable)));
            if (i >= this.numToolModesAvailable || this.currentInteraction == null || this.PC().interactingWithSelf || this.inlineDialogueOpen)
            {
                this.v3.y -= 80f;
                this.ToolMenuModeMenuModeTxt[i].text = string.Empty;
            }
            else
            {
                this.ToolMenuModeMenuModeTxt[i].text = Localization.getPhrase("INTERACTION_" + Interaction.getModeName(this.curTool, this.currentInteraction.targetNode, i), string.Empty);
                if ((Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0_ALT)) && i == 0)
                {
                    this.setToolMode(i);
                }
                if ((Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1_ALT)) && i == 1)
                {
                    this.setToolMode(i);
                }
                if ((Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2_ALT)) && i == 2)
                {
                    this.setToolMode(i);
                }
                if ((Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3_ALT)) && i == 3)
                {
                    this.setToolMode(i);
                }
                if ((Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4_ALT)) && i == 4)
                {
                    this.setToolMode(i);
                }
                if ((Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5_ALT)) && i == 5)
                {
                    this.setToolMode(i);
                }
                if (this.curToolMode == i)
                {
                    this.v3.x = -116f;
                    this.ToolMenuModeMenuModeTxt[i].color = Color.white;
                }
                else if (Interaction.modeEligibleWithInteraction(this.currentInteraction, i, out this.toolModeRequiredPose, false))
                {
                    this.v3.x = -90f;
                    this.ToolMenuModeMenuModeTxt[i].color = Color.white * 0.9f;
                }
                else
                {
                    this.v3.x = -55f;
                    this.ToolMenuModeMenuModeTxt[i].color = Color.white * 0.4f;
                }
            }
            if (!this.inATestinRoom || this.pauseOpen || this.confirmingTerminate || this.inventoryOpen || this.currentInteraction == null || this.shopOpen || this.toasts.Count != 0)
            {
                this.v3.x = 150f;
            }
            Vector3 localPosition = this.ToolMenuModeMenuMode[i].localPosition;
            float x = localPosition.x;
            Transform obj = this.ToolMenuModeMenuMode[i];
            obj.localPosition += (this.v3 - this.ToolMenuModeMenuMode[i].localPosition) * Game.cap(Time.deltaTime * ((!this.inlineDialogueOpen) ? 9f : 90f), 0f, 1f);
            if (this.timeSinceToolModeMenuOpen > 1f)
            {
                if (x > -85f)
                {
                    Vector3 localPosition2 = this.ToolMenuModeMenuMode[i].localPosition;
                    if (localPosition2.x <= -85f)
                    {
                        this.playSound("ui_contextopen", 1f, 1f);
                    }
                }
                else
                {
                    Vector3 localPosition3 = this.ToolMenuModeMenuMode[i].localPosition;
                    if (localPosition3.x > -85f)
                    {
                        this.playSound("ui_contextclose", 1f, 1f);
                    }
                }
            }
        }
        if (this.inATestinRoom && !this.pauseOpen && !this.confirmingTerminate && !this.inventoryOpen && !this.shopOpen && (this.currentInteraction == null || this.curTool == "ChemicalGun") && !TestingRoom.editingMode && !this.inlineDialogueOpen && !this.hideToolMenuForTutorialReasons && !(this.lastTutorialDroneImage != string.Empty))
        {
            this.toolbarTransition += Game.cap(Time.deltaTime * 1.45f, 0f, 1f);
            if (this.toolbarTransition > 1f)
            {
                this.toolbarTransition = 1f;
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0_ALT))
            {
                this.toolbarPops[0] = 1f;
                this.setCurTool(0, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0)) ? UserSettings.data.KEY_SELECTITEM0_ALT : UserSettings.data.KEY_SELECTITEM0);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1_ALT))
            {
                this.toolbarPops[1] = 1f;
                this.setCurTool(1, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1)) ? UserSettings.data.KEY_SELECTITEM1_ALT : UserSettings.data.KEY_SELECTITEM1);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2_ALT))
            {
                this.toolbarPops[2] = 1f;
                this.setCurTool(2, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2)) ? UserSettings.data.KEY_SELECTITEM2_ALT : UserSettings.data.KEY_SELECTITEM2);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3_ALT))
            {
                this.toolbarPops[3] = 1f;
                this.setCurTool(3, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3)) ? UserSettings.data.KEY_SELECTITEM3_ALT : UserSettings.data.KEY_SELECTITEM3);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4_ALT))
            {
                this.toolbarPops[4] = 1f;
                this.setCurTool(4, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4)) ? UserSettings.data.KEY_SELECTITEM4_ALT : UserSettings.data.KEY_SELECTITEM4);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5_ALT))
            {
                this.toolbarPops[5] = 1f;
                this.setCurTool(5, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5)) ? UserSettings.data.KEY_SELECTITEM5_ALT : UserSettings.data.KEY_SELECTITEM5);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM6) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM6_ALT))
            {
                this.toolbarPops[6] = 1f;
                this.setCurTool(6, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM6)) ? UserSettings.data.KEY_SELECTITEM6_ALT : UserSettings.data.KEY_SELECTITEM6);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM7) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM7_ALT))
            {
                this.toolbarPops[7] = 1f;
                this.setCurTool(7, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM7)) ? UserSettings.data.KEY_SELECTITEM7_ALT : UserSettings.data.KEY_SELECTITEM7);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM8) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM8_ALT))
            {
                this.toolbarPops[8] = 1f;
                this.setCurTool(8, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM8)) ? UserSettings.data.KEY_SELECTITEM8_ALT : UserSettings.data.KEY_SELECTITEM8);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM9) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM9_ALT))
            {
                this.toolbarPops[9] = 1f;
                this.setCurTool(9, false, true, (!Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM9)) ? UserSettings.data.KEY_SELECTITEM9_ALT : UserSettings.data.KEY_SELECTITEM9);
            }
        }
        else
        {
            this.toolbarTransition -= Game.cap(Time.deltaTime * ((!this.inlineDialogueOpen) ? 1.45f : 14.5f), 0f, 1f);
            if (this.toolbarTransition < 0f)
            {
                this.toolbarTransition = 0f;
            }
        }
        float num = 0f;
        for (int j = 0; j < 10; j++)
        {
            num = Game.cap((this.toolbarTransition / 3f - (float)j * 0.007f) * 8f, 0f, 1f);
            num = 1f - Mathf.Pow(1f - num, 3f);
            this.v3 = this.ToolMenuHotkeys[j].localPosition;
            this.v3.y = 43f - (1f - num) * 143f;
            if (this.toolbarPops[j] > 0f)
            {
                this.v3.y += (1f - Mathf.Pow(Mathf.Abs(this.toolbarPops[j] - 0.5f) * 2f, 3f)) * 7f;
                List<float> list;
                int index;
                (list = this.toolbarPops)[index = j] = list[index] - Time.deltaTime * 8f;
            }
            this.ToolMenuHotkeys[j].localPosition = this.v3;
        }
        this.v3.x = 60f - 110f * (1f - Mathf.Pow(1f - this.toolbarTransition, 3f));
        this.v3.y = 47.7f;
        this.v3.z = 0f;
        this.ToolMenuCurTool.localPosition = this.v3;
        this.processChemicalSelection();
        this.ToolMenuCurToolChemicalDisplay.gameObject.SetActive(this.curTool == "ChemicalGun");
        if (this.curTool == "ChemicalGun")
        {
            if (this.selectedChemicalCompoundID != this.lastSelectedChemicalCompoundID)
            {
                ((UnityEngine.Component)this.ToolMenuCurToolChemicalDisplay).GetComponent<RawImage>().texture = (Resources.Load("chemicalbranding" + Game.PathDirectorySeparatorChar + Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].name.Split('.')[Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].name.Split('.').Length - 1]) as Texture2D);
                if (Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].name.Contains('!'))
                {
                    ((UnityEngine.Component)this.ToolMenuCurToolChemicalDisplay.Find("txtName")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("Chemical.ChemicalNeutralizer PREFIX", string.Empty) + Localization.getPhrase(Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].name.Replace("!", string.Empty), string.Empty), 0f, 3f, false);
                }
                else
                {
                    ((UnityEngine.Component)this.ToolMenuCurToolChemicalDisplay.Find("txtName")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase(Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].name, string.Empty), 0f, 3f, false);
                }
                this.lastSelectedChemicalCompoundID = this.selectedChemicalCompoundID;
            }
            if (Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].amountOwned != this.lastChemicalCompoundAmountOwned)
            {
                this.ToolMenuCurToolChemicalDisplayDoseText.text = Mathf.Floor(Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].amountOwned).ToString();
                string text = Mathf.Floor(100f * (Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].amountOwned - Mathf.Floor(Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].amountOwned))).ToString();
                if (text.Length < 2)
                {
                    text = "0" + text;
                }
                this.ToolMenuCurToolChemicalDisplayDoseTextFraction.text = text;
                this.lastChemicalCompoundAmountOwned = Inventory.data.chemicalcompounds[this.selectedChemicalCompoundID].amountOwned;
            }
        }
    }

    public void initChemicalSelectionUI()
    {
        this.chemicalSelectionUI = this.UI.transform.Find("ChemicalSelectionMenu").gameObject;
        this.chemicalSelectionTileTemplate = this.chemicalSelectionUI.transform.Find("Tile").gameObject;
        this.chemicalSelectionTileContainer = this.chemicalSelectionUI.transform.Find("tileContainer");
        this.chemicalSelectionRightMenu = this.chemicalSelectionUI.transform.Find("rightMenu");
        this.chemicalSelection_txtChemicalName = ((UnityEngine.Component)this.chemicalSelectionRightMenu.Find("txtChemicalName")).GetComponent<ScienceTextAnimator>();
        this.chemicalSelection_txtChemicalDescription = ((UnityEngine.Component)this.chemicalSelectionRightMenu.Find("txtChemicalDescription")).GetComponent<ScienceTextAnimator>();
        this.chemicalSelectionTileTemplate.SetActive(false);
    }

    public void processChemicalSelection()
    {
        if (!this.chemicalSelectionMenuInitted)
        {
            this.initChemicalSelectionUI();
            this.chemicalSelectionMenuInitted = true;
        }
        if (this.showingChemicalSelectionMenu)
        {
            this.showingChemicalSelectionMenu = Input.GetKey(this.ChemicalSelectionMenuKey);
        }
        if (this.showingChemicalSelectionMenu)
        {
            this.timeShowingChemicalSelection += Time.deltaTime;
        }
        else
        {
            this.timeShowingChemicalSelection = 0f;
        }
        if (this.showingChemicalSelectionMenu && this.timeShowingChemicalSelection > 0.25f)
        {
            if (!this.lastShowingChemicalSelectionMenu)
            {
                this.chemicalSelectionUI.SetActive(true);
                for (int i = 0; i < this.chemicalSelectionTiles.Count; i++)
                {
                    UnityEngine.Object.Destroy(this.chemicalSelectionTiles[i]);
                }
                this.chemicalSelectionTiles = new List<GameObject>();
                if (Inventory.data.chemicalcompounds.Count == 0)
                {
                    this.chemicalSelectionUI.transform.Find("txtNoChemicalsAvailable").gameObject.SetActive(true);
                }
                else
                {
                    this.chemicalSelectionUI.transform.Find("txtNoChemicalsAvailable").gameObject.SetActive(false);
                    this.chemicalSelectionTileTemplate.SetActive(true);
                    int num = -2;
                    int num2 = 0;
                    for (int j = 0; j < Inventory.data.chemicalcompounds.Count; j++)
                    {
                        GameObject gameObject = UnityEngine.Object.Instantiate(this.chemicalSelectionTileTemplate);
                        this.v3 = Vector3.zero;
                        gameObject.transform.SetParent(this.chemicalSelectionTileContainer);
                        this.v3.x = (float)(146 * num);
                        this.v3.y = (float)(-68 * num2);
                        if ((num + 10) % 2 == 1)
                        {
                            this.v3.y -= 34f;
                        }
                        this.v3.z = 0f;
                        gameObject.transform.localPosition = this.v3;
                        num++;
                        if (num == 3)
                        {
                            num = -2;
                            num2++;
                        }
                        gameObject.transform.localScale = Vector3.one;
                        if (Inventory.data.chemicalcompounds[j].name.Contains("!"))
                        {
                            ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase("Chemical.ChemicalNeutralizer PREFIX", string.Empty) + Localization.getPhrase(Inventory.data.chemicalcompounds[j].name.Replace("!", string.Empty), string.Empty);
                        }
                        else
                        {
                            ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(Inventory.data.chemicalcompounds[j].name, string.Empty);
                        }
                        gameObject.GetComponent<RawImage>().texture = (Resources.Load("chemicalbranding" + Game.PathDirectorySeparatorChar + string.Empty + Inventory.data.chemicalcompounds[j].name.Split('.')[Inventory.data.chemicalcompounds[j].name.Split('.').Length - 1]) as Texture2D);
                        gameObject.name = Inventory.data.chemicalcompounds[j].name;
                        this.chemicalSelectionTiles.Add(gameObject);
                    }
                    this.chemicalSelectionTileTemplate.SetActive(false);
                }
                this.lastShowingChemicalSelectionMenu = true;
            }
            float num3 = 85f;
            int num4 = -1;
            for (int k = 0; k < this.chemicalSelectionTiles.Count; k++)
            {
                Vector3 localPosition = this.chemicalSelectionTiles[k].transform.localPosition;
                Vector3 localScale = this.chemicalSelectionTileContainer.localScale;
                this.v32 = localPosition * localScale.x + this.chemicalSelectionTileContainer.localPosition;
                this.v3.x = this.uiMouseX - this.v32.x;
                this.v3.y = (this.uiMouseY - this.v32.y) * 172f / 74f;
                this.v3.z = 0f;
                float magnitude = this.v3.magnitude;
                if (magnitude < num3)
                {
                    num3 = magnitude;
                    num4 = k;
                }
            }
            if (num4 != this.lastHoverChemical)
            {
                if (num4 != -1)
                {
                    UISFX.playHover();
                    UserSettings.data.selectedChemicalCompound = this.chemicalSelectionTiles[num4].name;
                    this.selectedChemicalCompoundID = num4;
                    if (this.chemicalSelectionTiles[num4].name.Contains('!'))
                    {
                        this.chemicalSelection_txtChemicalDescription.setText(Localization.getPhrase(this.chemicalSelectionTiles[num4].name.Replace("!", string.Empty) + " INVERTEDDESCRIPTION", string.Empty), 0.5f, 10f, false);
                        this.chemicalSelection_txtChemicalName.setText(Localization.getPhrase("Chemical.ChemicalNeutralizer PREFIX", string.Empty) + Localization.getPhrase(this.chemicalSelectionTiles[num4].name.Replace("!", string.Empty), string.Empty), 0f, 3f, false);
                    }
                    else
                    {
                        this.chemicalSelection_txtChemicalDescription.setText(Localization.getPhrase(this.chemicalSelectionTiles[num4].name + " DESCRIPTION", string.Empty), 0.5f, 10f, false);
                        this.chemicalSelection_txtChemicalName.setText(Localization.getPhrase(this.chemicalSelectionTiles[num4].name, string.Empty), 0f, 3f, false);
                    }
                }
                this.lastHoverChemical = num4;
            }
            for (int l = 0; l < this.chemicalSelectionTiles.Count; l++)
            {
                if (num4 == -1 || num4 == l)
                {
                    Transform transform = this.chemicalSelectionTiles[l].transform;
                    transform.localScale += (Vector3.one - this.chemicalSelectionTiles[l].transform.localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                }
                else
                {
                    Transform transform2 = this.chemicalSelectionTiles[l].transform;
                    transform2.localScale += (Vector3.one * 0.8f - this.chemicalSelectionTiles[l].transform.localScale) * Game.cap(Time.deltaTime * 8f, 0f, 1f);
                }
            }
        }
        else if (this.lastShowingChemicalSelectionMenu)
        {
            for (int m = 0; m < this.chemicalSelectionTiles.Count; m++)
            {
                UnityEngine.Object.Destroy(this.chemicalSelectionTiles[m]);
            }
            this.chemicalSelectionTiles = new List<GameObject>();
            this.chemicalSelectionUI.SetActive(false);
            this.lastShowingChemicalSelectionMenu = false;
        }
    }

    public void updateToolHotkeys()
    {
        if (this.toolHotkeys.Count != 0 && this.PC() != null)
        {
            this.anatomyTools = 0;
            this.toolHotkeys[this.anatomyTools] = "hand";
            this.anatomyTools++;
            this.toolHotkeys[this.anatomyTools] = "mouth";
            this.anatomyTools++;
            this.toolHotkeys[this.anatomyTools] = "butt";
            this.anatomyTools++;
            if (this.PC().data.genitalType == 0 || this.PC().data.genitalType == 3)
            {
                this.toolHotkeys[this.anatomyTools] = "penis";
                this.anatomyTools++;
            }
            if (this.PC().data.genitalType == 1 || this.PC().data.genitalType == 3)
            {
                this.toolHotkeys[this.anatomyTools] = "vagina";
                this.anatomyTools++;
            }
            if (this.PC().data.prehensileTail)
            {
                this.toolHotkeys[this.anatomyTools] = "tail";
                this.anatomyTools++;
            }
            for (int i = 0; i < 10; i++)
            {
                this.toolMaterial[i] = string.Empty;
                this.toolSexToys[i] = null;
            }
            int num = 11;
            for (int j = this.anatomyTools; j < 10; j++)
            {
                while (num < 21)
                {
                    if (!(this.PC().sexToySlots[num] != string.Empty))
                    {
                        num++;
                        continue;
                    }
                    this.toolHotkeys[j] = this.PC().sexToySlots[num];
                    this.toolMaterial[j] = this.PC().sexToySlotProperties[num].material;
                    this.toolSexToys[j] = this.PC().findSexToyByUID(this.PC().sexToySlotProperties[num].uid);
                    num++;
                    break;
                }
                if (num == 21)
                {
                    this.toolHotkeys[j] = string.Empty;
                }
            }
        }
    }

    public void enteredTestRoom(int r)
    {
        this.World.transform.Find("ReflectionProbes").Find("Rooms").Find("RoomProbe" + r)
            .gameObject.SetActive(false);
        this.World.transform.Find("ReflectionProbes").Find("Rooms").Find("RoomProbe" + r)
            .gameObject.SetActive(true);
        this.currentTestRoom = r;
        this.updateToolHotkeys();
        this.updateToolbar();
        if (Inventory.data.domName == Localization.getPhrase("DefaultDomTitle_female", string.Empty) && this.PC().data.identifiesMale)
        {
            Inventory.data.domName = Localization.getPhrase("DefaultDomTitle_male", string.Empty);
        }
        if (Inventory.data.domName == Localization.getPhrase("DefaultDomTitle_male", string.Empty) && !this.PC().data.identifiesMale)
        {
            Inventory.data.domName = Localization.getPhrase("DefaultDomTitle_female", string.Empty);
        }
        this.setCurTool(0, true, false, KeyCode.Escape);
    }

    public void updateToolbar()
    {
        if (this.toolHotkeys.Count != 0 && this.PC() != null)
        {
            for (int i = 0; i < this.toolbarItems.Count; i++)
            {
                UnityEngine.Object.Destroy(this.toolbarItems[i]);
            }
            this.toolbarItems = new List<GameObject>();
            bool activeSelf = this.ToolMenu.gameObject.activeSelf;
            this.ToolMenu.gameObject.SetActive(!this.pauseOpen);
            TestingRoom.labItemContainer.gameObject.SetActive(true);
            for (int j = 0; j < this.toolHotkeys.Count; j++)
            {
                bool flag = false;
                if (this.toolHotkeys[j] != string.Empty)
                {
                    int num = 0;
                    while (num < Inventory.itemData.items.Count)
                    {
                        if (!(Inventory.itemData.items[num].assetName == this.toolHotkeys[j]))
                        {
                            num++;
                            continue;
                        }
                        flag = true;
                        break;
                    }
                }
                if (flag)
                {
                    GameObject.Find("LabItems").transform.Find(this.toolHotkeys[j]).gameObject.SetActive(true);
                    GameObject gameObject = UnityEngine.Object.Instantiate(GameObject.Find("LabItems").transform.Find(this.toolHotkeys[j]).gameObject);
                    Game.recursiveSetLayer(gameObject, 20);
                    if (this.toolMaterial[j] != string.Empty)
                    {
                        ToyMaterials.applyMaterialToObject(gameObject, this.toolMaterial[j]);
                    }
                    GameObject.Find("LabItems").transform.Find(this.toolHotkeys[j]).gameObject.SetActive(false);
                    this.v3 = gameObject.transform.localEulerAngles;
                    this.v32 = gameObject.transform.localPosition;
                    gameObject.transform.parent = this.ToolMenuHotkeys[j].Find("objectContainer");
                    gameObject.transform.localPosition = this.v32 * 100f;
                    gameObject.transform.localEulerAngles = this.v3;
                    gameObject.transform.localScale = Vector3.one * 100f;
                    gameObject.AddComponent<ToolbarItem>().pulseBlipDistance = 0.5f;
                    gameObject.GetComponent<ToolbarItem>().originalAngles = this.v3;
                    gameObject.GetComponent<ToolbarItem>().offset = (float)(this.toolHotkeys.Count - j) * gameObject.GetComponent<ToolbarItem>().pulseBlipDistance * 0.6f;
                    gameObject.GetComponent<ToolbarItem>().originalScale = 100f;
                    gameObject.GetComponent<ToolbarItem>().pulseLength = 2.5f;
                    gameObject.GetComponent<ToolbarItem>().screenPositionY = 0.9f;
                    gameObject.GetComponent<ToolbarItem>().screenPositionX = 0.55f + 0.45f * ((float)j * 0.08f);
                    gameObject.GetComponent<ToolbarItem>().useOriginals = (j >= this.anatomyTools);
                    MeshRenderer[] componentsInChildren = gameObject.GetComponentsInChildren<MeshRenderer>();
                    for (int k = 0; k < componentsInChildren.Length; k++)
                    {
                        componentsInChildren[k].probeAnchor = this.World.transform.Find("ReflectionProbes").Find("ResearchTower").Find("ReflectionProbe (40)");
                    }
                    this.toolbarItems.Add(gameObject);
                    this.ToolMenuHotkeys[j].Find("tooltip").gameObject.SetActive(true);
                    ((UnityEngine.Component)this.ToolMenuHotkeys[j].Find("tooltip").Find("txt")).GetComponent<AutoText>().phrase = Inventory.getItemDefinition(this.toolHotkeys[j]).description;
                }
                else
                {
                    this.ToolMenuHotkeys[j].Find("tooltip").gameObject.SetActive(false);
                    this.toolbarItems.Add(null);
                }
            }
            TestingRoom.labItemContainer.gameObject.SetActive(false);
            this.ToolMenu.gameObject.SetActive(activeSelf);
        }
    }

    public void toolButtonClicked(int t)
    {
        this.setCurTool(t, false, false, KeyCode.Escape);
    }

    public void setCurTool(int t, bool force = false, bool becauseOfKeypress = false, KeyCode pressedkey = KeyCode.Escape)
    {
        if (becauseOfKeypress && this.toolHotkeys[t] == "ChemicalGun")
        {
            this.showingChemicalSelectionMenu = true;
            this.ChemicalSelectionMenuKey = pressedkey;
        }
        UISFX.clickSFX(string.Empty);
        if (t == this.curToolID && !force)
        {
            return;
        }
        this.curToolID = t;
        this.curTool = this.toolHotkeys[t];
        if ((UnityEngine.Object)this.curToolDisplay != (UnityEngine.Object)null)
        {
            UnityEngine.Object.Destroy(this.curToolDisplay);
        }
        if (t < this.toolbarItems.Count)
        {
            if ((UnityEngine.Object)this.toolbarItems[t] != (UnityEngine.Object)null)
            {
                this.curToolDisplay = UnityEngine.Object.Instantiate(this.toolbarItems[t]);
                this.v3 = this.toolbarItems[t].transform.localEulerAngles;
                this.v32 = this.toolbarItems[t].transform.localPosition;
                this.curToolDisplay.transform.parent = this.ToolMenuCurTool.Find("container");
                this.curToolDisplay.transform.localPosition = this.v32;
                this.curToolDisplay.transform.localEulerAngles = this.v3;
                this.curToolDisplay.transform.localScale = Vector3.one * 130f;
                this.curToolDisplay.GetComponent<ToolbarItem>().pulseBlipDistance = 0.9f;
                this.curToolDisplay.GetComponent<ToolbarItem>().offset = 0f;
                this.curToolDisplay.GetComponent<ToolbarItem>().originalScale = 150f;
                this.curToolDisplay.GetComponent<ToolbarItem>().screenPositionX = 2f;
                this.curToolDisplay.GetComponent<ToolbarItem>().screenPositionY = 0.9f;
                this.curToolDisplay.GetComponent<ToolbarItem>().manuallySetAngles = true;
                this.curToolDisplay.GetComponent<ToolbarItem>().originalAngles = this.toolbarItems[t].GetComponent<ToolbarItem>().originalAngles;
                this.curToolDisplay.GetComponent<ToolbarItem>().useOriginals = this.toolbarItems[t].GetComponent<ToolbarItem>().useOriginals;
            }
            for (int i = 0; i < this.PC().equippedSexToys.Count; i++)
            {
                this.PC().equippedSexToys[i].beingHeld = false;
            }
            this.PC().selectedSexToy = null;
            this.PC().clearFingerTargets();
            if (t >= this.anatomyTools && this.toolSexToys[t] != null)
            {
                this.toolSexToys[t].beingHeld = true;
                this.PC().selectedSexToy = this.toolSexToys[t];
            }
            this.setToolMode(0);
            this.needInteractionHotspotRebuild = true;
        }
    }

    public Vector3 worldToScreen(Vector3 world, bool zeroZ = false, float limitDistanceFromCenter = 3000f)
    {
        Vector3 result = this.mainCam.GetComponent<Camera>().WorldToScreenPoint(world);
        result.x /= (float)Screen.width;
        result.y /= (float)Screen.height;
        result.x *= this.screenWidth;
        result.y *= this.screenHeight;
        result.x -= this.screenWidth / 2f;
        result.y -= this.screenHeight / 2f;
        if (zeroZ)
        {
            result.z = 0f;
        }
        if (result.magnitude > limitDistanceFromCenter)
        {
            result *= limitDistanceFromCenter / result.magnitude;
        }
        return result;
    }

    public void processInteraction()
    {
        if (this.hideInteractionHotspotsForTutorialReasons && !UserSettings.needTutorial("NPT_FIND_OUT_WHAT_THE_SUBJECT_LIKES"))
        {
            this.hideInteractionHotspotsForTutorialReasons = false;
        }
        SizeDifferencePositionAdjuster.sizeDifference = 1f;
        if (this.mouseMoved || this.currentInteraction != null)
        {
            this.hoveringHotspot = string.Empty;
        }
        string text;
        if (this.PC() != null)
        {
            if (this.PC().interactionSubject == null)
            {
                this.timeSpentInteracting = 0f;
            }
            else
            {
                this.timeSpentInteracting += Time.deltaTime;
                SizeDifferencePositionAdjuster.sizeDifference = this.PC().height_act / this.PC().interactionSubject.height_act;
            }
            if (this.PC().interactionSubject != null && !this.inventoryOpen && !this.wasInlineDialogueOpen)
            {
                if (this.timeSinceHover > 0f && this.hoveringHotspot == string.Empty)
                {
                    this.timeSinceHover -= Time.deltaTime * 4.5f;
                    if (this.timeSinceHover <= 0f)
                    {
                        for (int i = 0; i < this.PC().interactionSubject.interactionHotspots.Count; i++)
                        {
                            ((UnityEngine.Component)this.PC().interactionSubject.interactionHotspots[i]).GetComponentInChildren<Light>().enabled = false;
                        }
                        this.timeSinceHover = 0f;
                    }
                }
                else if (this.hoveringHotspot != string.Empty)
                {
                    this.timeSinceHover += Time.deltaTime * 1.8f;
                    if (this.timeSinceHover > 0.5f)
                    {
                        this.timeSinceHover = 0.5f;
                    }
                }
                if (this.needInteractionHotspotRebuild)
                {
                    for (int num = this.interactionSpotHotspots.Count - 1; num >= 0; num--)
                    {
                        UnityEngine.Object.Destroy(this.interactionSpotHotspots[num]);
                    }
                    this.interactionSpotHotspots = new List<GameObject>();
                    if ((UnityEngine.Object)this.editableItemHotspotTemplate == (UnityEngine.Object)null)
                    {
                        this.editableItemHotspotTemplate = this.UI.transform.Find("LabEditingInterface").Find("editableObjects").Find("Hotspot")
                            .gameObject;
                    }
                    this.editableItemHotspotTemplate.SetActive(true);
                    for (int j = 0; j < this.PC().interactionSubject.interactionHotspotTriggers.Count; j++)
                    {
                        GameObject gameObject = UnityEngine.Object.Instantiate(this.editableItemHotspotTemplate);
                        gameObject.transform.SetParent(this.UI.transform.Find("InteractionOverlay").Find("HotspotContainer"));
                        gameObject.transform.localScale = Vector3.one;
                        gameObject.SetActive(true);
                        this.interactionSpotHotspots.Add(gameObject);
                    }
                    this.editableItemHotspotTemplate.SetActive(false);
                    this.needInteractionHotspotRebuild = false;
                }
                if (this.currentInteraction == null && !this.hideInteractionHotspotsForTutorialReasons)
                {
                    this.v3.x = (this.mX - 0.5f) * this.screenWidth;
                    this.v3.y = (this.mY - 0.5f) * (0f - this.screenHeight);
                    this.v3.z = 0f;
                    this.LabEditingInterfaceCursor.localPosition = this.v3;
                    float num2 = 0.6f;
                    this.lastHoveringOverInteractionHotspot = this.hoveringOverInteractionHotspot;
                    this.hoveringOverInteractionHotspot = -1;
                    for (int k = 0; k < this.interactionSpotHotspots.Count; k++)
                    {
                        this.v3 = this.mainCam.transform.InverseTransformPoint(this.PC().interactionSubject.interactionHotspots[k].position);
                        if (this.v3.z > 0f && this.PC().interactionSubject.interactionHotspots[k].gameObject.activeSelf && Interaction.modeEligible(this.PC().interactionSubject, this.PC(), this.PC().interactionSubject.interactionHotspots[k].name.Split('_')[1], Game.getSpecificPerformingNodeFromSelectedTool(this.curTool), this.curToolMode, out this.junk, false, false, -1))
                        {
                            this.interactionSpotHotspots[k].SetActive(true);
                            this.interactionSpotHotspots[k].transform.localPosition = this.worldToScreen(this.PC().interactionSubject.interactionHotspots[k].position, true, 3000f);
                            float magnitude = (this.interactionSpotHotspots[k].transform.position - this.LabEditingInterfaceCursor.position).magnitude;
                            if (magnitude < num2)
                            {
                                num2 = magnitude;
                                this.hoveringOverInteractionHotspot = k;
                            }
                            if (k == this.lastHoveringOverInteractionHotspot)
                            {
                                this.interactionSpotHotspots[k].transform.localScale = Vector3.one * 2f * (1f + 0.1f * Mathf.Cos(Time.time * 3f)) / (this.v3.magnitude * 1f + 3f);
                                this.hoveringHotspot = this.PC().interactionSubject.interactionHotspots[k].name.Split('_')[1];
                            }
                            else
                            {
                                this.interactionSpotHotspots[k].transform.localScale = Vector3.one * (1f + 0.1f * Mathf.Cos(Time.time * 3f)) / (this.v3.magnitude * 1f + 3f);
                            }
                        }
                        else
                        {
                            this.interactionSpotHotspots[k].SetActive(false);
                        }
                    }
                }
                else
                {
                    for (int l = 0; l < this.interactionSpotHotspots.Count; l++)
                    {
                        this.interactionSpotHotspots[l].SetActive(false);
                    }
                }
            }
            else
            {
                if (!this.needInteractionHotspotRebuild)
                {
                    for (int num3 = this.interactionSpotHotspots.Count - 1; num3 >= 0; num3--)
                    {
                        UnityEngine.Object.Destroy(this.interactionSpotHotspots[num3]);
                    }
                    this.needInteractionHotspotRebuild = true;
                }
                this.hoveringHotspot = string.Empty;
                if (!this.wasInlineDialogueOpen)
                {
                    this.numToolModesAvailable = 0;
                }
                this.timeSinceHover -= Time.deltaTime;
                if (this.timeSinceHover < 0f)
                {
                    this.timeSinceHover = 0f;
                }
            }
            this.mainCam.transform.Find("Projector").gameObject.SetActive(this.timeSinceHover > 0f);
            if (this.timeSinceHover > 0f)
            {
                ((UnityEngine.Component)this.mainCam.transform.Find("Projector")).GetComponent<Projector>().farClipPlane = this.timeSinceHover * 50f;
            }
            if (this.hoveringHotspot != string.Empty)
            {
                if (this.hoveringHotspot != this.lastHoveringHotspot)
                {
                    if (this.currentInteraction == null)
                    {
                        this.numToolModesAvailable = Interaction.getNumberOfModes(this.curTool, this.hoveringHotspot);
                    }
                    else
                    {
                        this.numToolModesAvailable = Interaction.getNumberOfModes(this.curTool, this.currentInteraction.targetNode);
                    }
                    for (int m = 0; m < this.PC().interactionSubject.interactionHotspots.Count; m++)
                    {
                        ((UnityEngine.Component)this.PC().interactionSubject.interactionHotspots[m]).GetComponentInChildren<Light>().enabled = (this.PC().interactionSubject.interactionHotspots[m].name.IndexOf(this.hoveringHotspot) != -1);
                    }
                    this.timeSinceHover = Time.deltaTime;
                    UISFX.playHover();
                    this.mainCam.transform.Find("Projector").localPosition = Vector3.zero;
                    this.mainCam.transform.Find("Projector").LookAt(this.PC().interactionSubject.interactionHotspots[this.lastHoveringOverInteractionHotspot].position);
                    text = "HOTSPOT_" + this.hoveringHotspot.ToUpper();
                    if (this.hoveringHotspot.IndexOf("breast") != -1 && this.PC().interactionSubject.data.breastSize < RackCharacter.breastThreshhold)
                    {
                        text += "MALE";
                        ((UnityEngine.Component)this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("icon")).GetComponent<RawImage>().texture = (Resources.Load("interactionicons" + Game.PathDirectorySeparatorChar + string.Empty + this.hoveringHotspot + "male") as Texture2D);
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("icon")).GetComponent<RawImage>().texture = (Resources.Load("interactionicons" + Game.PathDirectorySeparatorChar + string.Empty + this.hoveringHotspot) as Texture2D);
                    }
                    this.v3 = Vector3.zero;
                    this.v3.x = this.uiMouseX;
                    this.v3.y = this.uiMouseY;
                    if (this.mX >= 0.5f && this.hoveringHotspot != "breastl")
                    {
                        goto IL_0a43;
                    }
                    if (this.hoveringHotspot == "breastr")
                    {
                        goto IL_0a43;
                    }
                    this.v3.x += 110f;
                    goto IL_0a76;
                }
                Vector3 endpoint = this.worldToScreen(this.hotspotTransform.position, false, 3000f);
                BagUI.updateScienceLine(this.hotspotLines[0], this.hotspotLines[1], endpoint, this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").localPosition);
                this.mainCam.transform.Find("Projector").localPosition = Vector3.zero;
                this.mainCam.transform.Find("Projector").LookAt(this.hotspotTransform.position);
                goto IL_0e55;
            }
            for (int n = 0; n < this.hotspotLines.Count; n++)
            {
                UnityEngine.Object.Destroy(this.hotspotLines[n]);
            }
            this.hotspotLines = new List<GameObject>();
            this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").gameObject.SetActive(false);
            goto IL_0ff8;
        }
        return;
    IL_0ff8:
        if (Input.GetMouseButton(1))
        {
            ref Vector2 val = ref this.interactionAngle;
            float x = val.x;
            Vector3 mousePosition = Input.mousePosition;
            val.x = x + (mousePosition.x - this.lastMousePosition.x) * 0.001f;
            ref Vector2 val2 = ref this.interactionAngle;
            float y = val2.y;
            Vector3 mousePosition2 = Input.mousePosition;
            val2.y = y + (mousePosition2.y - this.lastMousePosition.y) * 0.003f;
        }
        this.interactionAngle.x = Game.cap(this.interactionAngle.x, -0.5f, 0.5f);
        this.interactionAngle.y = Game.cap(this.interactionAngle.y, -0.75f, 0.25f);
        this.lastHoveringHotspot = this.hoveringHotspot;
        if (this.currentInteraction == null && this.hoveringHotspot == string.Empty)
        {
            this.numToolModesAvailable = 0;
        }
        this.processInteractionReticle();
        return;
    IL_0a43:
        this.v3.x -= 110f;
        goto IL_0a76;
    IL_0a76:
        if (this.mY < 0.5f)
        {
            this.v3.y -= 45f;
            this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("textBGtop")
                .gameObject.SetActive(false);
            this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("textBGbottom")
                .gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("txtTop")).GetComponent<Text>().text = string.Empty;
            ((UnityEngine.Component)this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("txtBottom")).GetComponent<Text>().text = Localization.getPhrase(text, string.Empty);
        }
        else
        {
            this.v3.y += 45f;
            this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("textBGtop")
                .gameObject.SetActive(true);
            this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("textBGbottom")
                .gameObject.SetActive(false);
            ((UnityEngine.Component)this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("txtTop")).GetComponent<Text>().text = Localization.getPhrase(text, string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").Find("txtBottom")).GetComponent<Text>().text = string.Empty;
        }
        this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").localPosition = this.v3;
        this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").localScale = Vector3.one * 0.1f;
        Vector3 endpoint2 = this.worldToScreen(this.PC().interactionSubject.interactionHotspots[this.lastHoveringOverInteractionHotspot].position, false, 3000f);
        this.hotspotTransform = this.PC().interactionSubject.interactionHotspots[this.lastHoveringOverInteractionHotspot];
        for (int num4 = 0; num4 < this.hotspotLines.Count; num4++)
        {
            UnityEngine.Object.Destroy(this.hotspotLines[num4]);
        }
        this.hotspotLines = new List<GameObject>();
        BagUI.drawScienceLine(this.hotspotLines, this.UI.transform.Find("InteractionOverlay").Find("LineContainer"), endpoint2, this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").localPosition);
        goto IL_0e55;
    IL_0e55:
        this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").gameObject.SetActive(true);
        this.v3 = this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").localScale;
        if (this.v3.x < this.hotspotIconSize)
        {
            this.v3.x += Time.deltaTime * 12f;
            if (this.v3.x > this.hotspotIconSize)
            {
                this.v3.x = this.hotspotIconSize;
            }
        }
        else if (this.v3.y < this.hotspotIconSize)
        {
            this.v3.y += Time.deltaTime * 8f;
            if (this.v3.y > this.hotspotIconSize)
            {
                this.v3.y = this.hotspotIconSize;
            }
        }
        this.UI.transform.Find("InteractionOverlay").Find("hoverBubble").localScale = this.v3;
        goto IL_0ff8;
    }

    public void processInteractionReticle()
    {
        this.showHandsFreeTerminateBar = false;
        if ((UnityEngine.Object)this.interactionReticle == (UnityEngine.Object)null)
        {
            this.interactionReticle = this.UI.transform.Find("InteractionReticle").gameObject;
            this.handsFreeTerminateBar = this.UI.transform.Find("InteractionOverlay").Find("handsfreeterminate").gameObject;
        }
        if ((UnityEngine.Object)this.mouseParticles == (UnityEngine.Object)null)
        {
            this.mouseParticles = ((UnityEngine.Component)this.UI.transform.Find("CursorParticles").Find("ps")).GetComponent<ParticleSystem>();
            this.mousePParticles = ((UnityEngine.Component)this.UI.transform.Find("CursorParticles").Find("ps").Find("perfect")).GetComponent<ParticleSystem>();
            this.mouseParticlesMain = this.mouseParticles.main;
            this.mousePParticlesMain = this.mousePParticles.main;
            this.greyCol = new Color(1f, 1f, 1f, 0.1f);
            this.greenCol = new Color(0.08235294f, 0.6f, 1f, 0.6f);
            this.redCol = new Color(1f, 0.258823544f, 0f, 1f);
        }
        this.v3.x = this.uiMouseX;
        this.v3.y = this.uiMouseY;
        this.v3.z = 0f;
        this.mouseParticles.transform.parent.gameObject.SetActive(this.currentInteraction != null && UserSettings.data.mouseParticles);
        this.interactionReticle.SetActive(this.currentInteraction != null);
        float num = UserSettings.data.interactionSensitivity;
        if (UserSettings.data.dynamicSensitivity && this.PC().controlMode == 0)
        {
            this.mouseSpeed += (this.mouseChange.magnitude - this.mouseSpeed) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
            num += (this.mouseSpeed - 7f) * 0.16f;
        }
        if (this.PC().controlMode == 1)
        {
            num += 1.5f;
        }
        if (this.PC().controlMode == 3 && this.PC().currentInteractions.Count > 0 && !this.UIinUse && !this.inventoryOpen)
        {
            num += 15f;
            this.showHandsFreeTerminateBar = true;
        }
        this.effectiveInteractionSensitivity += (num - this.effectiveInteractionSensitivity) * Game.cap(Time.deltaTime * 4f, 0f, 1f);
        this.effectiveInteractionSensitivity = Game.cap(this.effectiveInteractionSensitivity, 0.35f, 3.75f);
        if (this.currentInteraction != null)
        {
            if (this.PC().controlMode == 2 || this.PC().controlMode == 3)
            {
                this.mouseParticlesMain.startSize = 0.07f;
                if (this.PC().controlMode == 3)
                {
                    this.v3 = this.interactionReticle.transform.localPosition;
                }
            }
            else
            {
                this.mouseParticlesMain.startSize = Game.cap(this.mouseChange.magnitude * 0.02f, 0f, 0.1f);
            }
            this.mouseParticles.transform.localPosition = this.v3;
            if (this.PC().percievedStimulation > this.PC().targetStimulation)
            {
                this.mouseParticlesMain.startColor = this.greenCol + (this.redCol - this.greenCol) * Game.cap((this.PC().percievedStimulation - this.PC().targetStimulation) * 3.5f, 0f, 1f);
            }
            else
            {
                this.mouseParticlesMain.startColor = this.greenCol + (this.greyCol - this.greenCol) * Game.cap((this.PC().targetStimulation - this.PC().percievedStimulation) * 4.5f, 0f, 1f);
            }
            this.v3.x = (this.PC().interactionStartCenter.x - 0.5f) * 1024f;
            this.v3.y = (this.PC().interactionStartCenter.y - 0.5f) * -1024f * ((float)Screen.height / (float)Screen.width);
            this.v3.z = 0f;
            this.interactionReticle.transform.localPosition = this.v3;
            for (int i = 0; i < 6; i++)
            {
                this.v3.x = Mathf.Cos(((float)i * 60f + 90f) * 3.1415f / 180f);
                this.v3.y = Mathf.Sin(((float)i * 60f + 90f) * 3.1415f / 180f);
                this.v3.z = 0f;
                this.interactionReticle.transform.Find("corner" + i).localPosition = this.v3 * 512f / this.reticleCornerDist * 0.3f;
                ((UnityEngine.Component)this.interactionReticle.transform.Find("corner" + i)).GetComponent<CanvasRenderer>().SetColor(this.fakeAmbientTargetColor);
            }
            this.reticleCornerDist += (this.effectiveInteractionSensitivity - this.reticleCornerDist) * Game.cap(Time.deltaTime * 9f, 0f, 1f);
            ((UnityEngine.Component)this.interactionReticle.transform.Find("ResistanceOverlay")).GetComponent<ResistanceMeter>().setColor(this.fakeAmbientTargetColor);
            ((UnityEngine.Component)this.interactionReticle.transform.Find("ResistanceOverlay")).GetComponent<ResistanceMeter>().push = Game.cap((0f - this.currentInteraction.pushingThroughResistance) * (1f - this.penetrationPopTime) * 1.1f - 0.1f, 0f, 1f);
            if (this.penetrationPopTime > 0f)
            {
                this.penetrationPopTime -= Time.deltaTime;
                if (this.penetrationPopTime < 0f)
                {
                    this.penetrationPopTime = 0f;
                }
            }
        }
        else
        {
            this.PC().controlMode = UserSettings.data.defaultControlMode;
            this.reticleCornerDist = 20f;
        }
        this.handsFreeTerminateBar.SetActive(this.showHandsFreeTerminateBar && Input.GetMouseButton(0));
    }

    public void popPenetration()
    {
        if (!this.bteInitted)
        {
            this.bte0main = ((UnityEngine.Component)this.interactionReticle.transform.Find("breakthroughEffect0")).GetComponent<ParticleSystem>().main;
            this.bte1main = ((UnityEngine.Component)this.interactionReticle.transform.Find("breakthroughEffect1")).GetComponent<ParticleSystem>().main;
            this.bteInitted = true;
        }
        this.penetrationPopTime = 1f;
        this.bte0main.startColor = this.fakeAmbientTargetColor;
        this.bte1main.startColor = this.fakeAmbientTargetColor;
        ((UnityEngine.Component)this.interactionReticle.transform.Find("breakthroughEffect0")).GetComponent<ParticleSystem>().Play();
        ((UnityEngine.Component)this.interactionReticle.transform.Find("breakthroughEffect1")).GetComponent<ParticleSystem>().Play();
    }

    public void pleasureSelf()
    {
        if (this.ableToPleasureSelf)
        {
            UISFX.clickSFX(string.Empty);
            this.PC().removeAnyClothesCoveringCrotch();
            this.setCurTool(0, true, false, KeyCode.Escape);
            if (this.PC().showPenis)
            {
                this.beginInteraction(this.PC(), "penis", "hand", 1, 0f);
            }
            else
            {
                this.beginInteraction(this.PC(), "clit", "hand", 0, 0f);
            }
        }
        else
        {
            this.playSound("ui_error", 1f, 1f);
        }
    }

    public static string getSpecificPerformingNodeFromSelectedTool(string selectedTool)
    {
        if (selectedTool == string.Empty)
        {
            return string.Empty;
        }
        if (selectedTool != null)
        {
            if (!(selectedTool == "hand"))
            {
                if (!(selectedTool == "penis"))
                {
                    if (!(selectedTool == "butt"))
                    {
                        if (!(selectedTool == "vagina"))
                        {
                            if (!(selectedTool == "mouth"))
                            {
                                if (!(selectedTool == "tail"))
                                {
                                    goto IL_0081;
                                }
                                return "tail";
                            }
                            return "mouth";
                        }
                        return "vagina";
                    }
                    return "butt";
                }
                return "penis";
            }
            if (!Input.GetKey(KeyCode.LeftAlt) && !Input.GetKey(KeyCode.RightAlt))
            {
                return "handR";
            }
            return "handL";
        }
        goto IL_0081;
    IL_0081:
        return Game.gameInstance.PC().selectedSexToy.itemID;
    }

    public void beginInteraction(RackCharacter subject, string node, string tool, int toolMode, float delay = 0f)
    {
        if (delay <= 0f)
        {
            this.currentInteraction = Interaction.addInteraction(subject, node, Interaction.getModeName(tool, node, toolMode));
            if (this.currentInteraction != null)
            {
                this.currentInteraction.claim(this.PC(), Game.getSpecificPerformingNodeFromSelectedTool(tool));
                if (!Interaction.modeEligibleWithInteraction(this.currentInteraction, toolMode, out this.toolModeRequiredPose, false))
                {
                    this.showWarning(Localization.getPhrase(Interaction.ineligibleReason, string.Empty), 2.5f);
                    this.playSound("ui_error", 1f, 1f);
                    this.currentInteraction.alive = false;
                }
                else
                {
                    if (this.toolModeRequiredPose != string.Empty)
                    {
                        if (this.toolModeRequiredPose == "default")
                        {
                            this.PC().setSexPose(0);
                        }
                        else
                        {
                            for (int i = 0; i < this.PC().interactionApparatus.poseNames.Count; i++)
                            {
                                if (this.PC().interactionApparatus.poseNames[i] == this.toolModeRequiredPose)
                                {
                                    this.PC().setSexPose(i + 1);
                                }
                            }
                        }
                    }
                    else
                    {
                        this.PC().setSexPose(this.PC().curSexPose);
                    }
                    UISFX.clickSFX(string.Empty);
                }
                this.numToolModesAvailable = Interaction.getNumberOfModes(this.curTool, this.currentInteraction.targetNode);
                this.currentInteraction.isCurrentInteraction = true;
                this.currentInteraction.requiresMouseDown = true;
                this.currentInteraction.process();
                this.PC().pleasureEyeCheckToggleCooldown = 0.25f;
            }
        }
        else
        {
            this.delayedInteraction_delay = delay;
            this.delayedInteraction_mode = toolMode;
            this.delayedInteraction_node = node;
            this.delayedInteraction_subject = subject;
            this.delayedInteraction_tool = tool;
        }
    }

    private void processDialogue()
    {
        if (!((UnityEngine.Object)this.dialogueCam == (UnityEngine.Object)null))
        {
            this.dialogueCam.gameObject.SetActive(this.curDialogue != string.Empty || Tutorials.droneFollow);
            this.DialogueWindow.SetActive(this.curDialogue != string.Empty);
            if (this.curDialogue != string.Empty)
            {
                this.dialogueCamPos = this.PC().bones.Head.position - Game.dialoguePartner.bones.Head.position;
                this.dialogueCamPos /= this.dialogueCamPos.magnitude;
                this.dialogueCamPos *= 2.5f * Game.dialoguePartner.height_act;
                this.dialogueCamPos += Game.dialoguePartner.bones.Head.position;
                if (!this.dialogueWasOpen)
                {
                    this.dialogueCam.transform.position = this.dialogueCamPos;
                }
                else
                {
                    Transform transform = this.dialogueCam.transform;
                    transform.position += (this.dialogueCamPos - this.dialogueCam.transform.position) * Game.cap(Time.deltaTime * 1.5f, 0f, 1f);
                }
                this.dialogueCam.transform.LookAt(Game.dialoguePartner.bones.Head, Game.dialoguePartner.bones.Head.right * -1f);
                this.dialogueSpeakerScale += (1f - this.dialogueSpeakerScale) * Game.cap(Time.deltaTime * 15f, 0f, 1f);
                this.DialogueWindow.transform.Find("Speaker").transform.localScale = Vector3.one * this.dialogueSpeakerScale * (1f - Game.cap((this.PC().GO.transform.position - Game.dialoguePartner.GO.transform.position).magnitude - 7f, 0f, 20f) / 30f);
                Transform parent = this.mainCam.transform.parent;
                parent.position -= this.dialogueCameraDisplacement;
                Vector3 vector = this.mainCam.transform.parent.InverseTransformPoint(Game.dialoguePartner.GO.transform.position);
                Transform parent2 = this.mainCam.transform.parent;
                parent2.position += this.dialogueCameraDisplacement;
                vector.x = Game.cap(vector.x * 0.1f, -1f, 1f);
                vector.z = Game.cap(vector.z * 0.1f, -1f, 1f);
                if (this.dialogueOnRight)
                {
                    if (vector.x < -0.2f)
                    {
                        this.dialogueOnRight = false;
                    }
                }
                else if (vector.x > 0.2f)
                {
                    this.dialogueOnRight = true;
                }
                if (this.dialogueOnRight)
                {
                    this.v3.x = 350f;
                }
                else
                {
                    this.v3.x = -350f;
                }
                this.v3.y = vector.z * 150f;
                this.v3.z = 0f;
                ((UnityEngine.Component)this.DialogueWindow.transform.Find("Speaker").Find("txtName")).GetComponent<Text>().text = Game.dialoguePartner.data.name;
                ((UnityEngine.Component)this.DialogueWindow.transform.Find("Speaker").Find("txtTitle")).GetComponent<Text>().text = Localization.getPhrase(Game.dialoguePartner.data.title, string.Empty);
                Transform transform2 = this.DialogueWindow.transform.Find("Speaker").transform;
                transform2.localPosition += (this.v3 - this.DialogueWindow.transform.Find("Speaker").transform.localPosition) * Game.cap(Time.deltaTime * 20f, 0f, 1f);
                string phrase = Localization.getPhrase(this.dialogueTree.nodes[this.curDialogueNode].phrase, string.Empty);
                if (this.curDialogueText != phrase)
                {
                    this.curDialogueText = phrase;
                    this.convertedDialogueText = Game.dialogueFormat(this.curDialogueText);
                    this.dialogueAnimationProgress = 0f;
                    Game.curDialogueBreakStep = 0;
                }
                ((UnityEngine.Component)this.DialogueWindow.transform.Find("Words").Find("txt")).GetComponent<Text>().text = Game.animateDialogue(this.convertedDialogueText, this.dialogueAnimationProgress, null);
                if (!Game.waitingForDialogueContinue)
                {
                    int num = Mathf.FloorToInt(this.dialogueAnimationProgress);
                    float num2 = 1f;
                    if (Input.GetKey(KeyCode.Alpha1) || Input.GetKey(KeyCode.Alpha2) || Input.GetKey(KeyCode.Alpha3) || Input.GetKey(KeyCode.Alpha4) || Input.GetKey(KeyCode.Alpha5) || Input.GetKey(KeyCode.Alpha6))
                    {
                        num2 = 5f;
                    }
                    this.dialogueAnimationProgress += Time.deltaTime * UserSettings.data.dialogueSpeed * num2;
                    if (!Game.waitingForDialogueContinue && !Game.doneAnimatingDialogue && num != Mathf.FloorToInt(this.dialogueAnimationProgress))
                    {
                        this.playSound("ui_dragtick", 1f, 1f);
                        Game.dialoguePartner.talkingAnimationTime = 0.5f;
                    }
                }
                if (this.dialogueOnRight)
                {
                    ref Vector3 val = ref this.v3;
                    Vector3 localPosition = this.DialogueWindow.transform.Find("Speaker").transform.localPosition;
                    float x = localPosition.x;
                    Vector3 localScale = this.DialogueWindow.transform.Find("Speaker").transform.localScale;
                    val.x = x - 250f * (1f + localScale.x) / 2f;
                }
                else
                {
                    ref Vector3 val2 = ref this.v3;
                    Vector3 localPosition2 = this.DialogueWindow.transform.Find("Speaker").transform.localPosition;
                    float x2 = localPosition2.x;
                    Vector3 localScale2 = this.DialogueWindow.transform.Find("Speaker").transform.localScale;
                    val2.x = x2 + 250f * (1f + localScale2.x) / 2f;
                }
                ref Vector3 val3 = ref this.v3;
                Vector3 localPosition3 = this.DialogueWindow.transform.Find("Speaker").transform.localPosition;
                val3.y = localPosition3.y - 150f;
                this.v3.z = 0f;
                this.DialogueWindow.transform.Find("Words").transform.localPosition = this.v3;
                for (int i = 0; i < 6; i++)
                {
                    this.DialogueWindow.transform.Find("Words").Find("Response" + i).gameObject.SetActive((Game.doneAnimatingDialogue && i < this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses.Count) || (i == 0 && Game.waitingForDialogueContinue && this.curDialogueNode != 0));
                    if (i < this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses.Count && Game.doneAnimatingDialogue)
                    {
                        goto IL_0865;
                    }
                    if (i == 0 && Game.waitingForDialogueContinue && this.curDialogueNode != 0)
                    {
                        goto IL_0865;
                    }
                    continue;
                IL_0865:
                    if (this.curDialogueNode == 0)
                    {
                        this.selectDialogueOption(i);
                        break;
                    }
                    if (i == 0 && Game.waitingForDialogueContinue && this.curDialogueNode != 0)
                    {
                        ((UnityEngine.Component)this.DialogueWindow.transform.Find("Words").Find("Response" + i).Find("Text")).GetComponent<Text>().text = Game.dialogueFormat(Localization.getPhrase("DIALOGUE_CONTINUE", string.Empty));
                        if (Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE1) || Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE1_ALT))
                        {
                            Game.curDialogueBreakStep++;
                            Game.waitingForDialogueContinue = false;
                        }
                    }
                    else
                    {
                        if (Localization.getPhrase(this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses[i].phrase, "english") == "[[]]")
                        {
                            ((UnityEngine.Component)this.DialogueWindow.transform.Find("Words").Find("Response" + i).Find("Text")).GetComponent<Text>().text = Game.dialogueFormat(Localization.getPhrase("DIALOGUE_CONTINUE", string.Empty));
                        }
                        else
                        {
                            ((UnityEngine.Component)this.DialogueWindow.transform.Find("Words").Find("Response" + i).Find("Text")).GetComponent<Text>().text = Game.dialogueFormat(Localization.getPhrase(this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses[i].phrase, string.Empty));
                        }
                        switch (i)
                        {
                            case 0:
                                if (!Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE1) && !Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE1_ALT))
                                {
                                    break;
                                }
                                this.selectDialogueOption(0);
                                break;
                            case 1:
                                if (!Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE2) && !Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE2_ALT))
                                {
                                    break;
                                }
                                this.selectDialogueOption(1);
                                break;
                            case 2:
                                if (!Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE3) && !Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE3_ALT))
                                {
                                    break;
                                }
                                this.selectDialogueOption(2);
                                break;
                            case 3:
                                if (!Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE4) && !Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE4_ALT))
                                {
                                    break;
                                }
                                this.selectDialogueOption(3);
                                break;
                            case 4:
                                if (!Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE5) && !Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE5_ALT))
                                {
                                    break;
                                }
                                this.selectDialogueOption(4);
                                break;
                            case 5:
                                if (!Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE6) && !Input.GetKeyDown(UserSettings.data.KEY_DIALOGUE6_ALT))
                                {
                                    break;
                                }
                                this.selectDialogueOption(5);
                                break;
                        }
                    }
                }
                if ((this.PC().GO.transform.position - Game.dialoguePartner.GO.transform.position).magnitude > Game.dialoguePartner.npcData.talkRange * 1.2f)
                {
                    this.closeDialogue();
                }
                this.dialogueWasOpen = true;
            }
            else
            {
                this.dialogueSpeakerScale = 0f;
                this.dialogueWasOpen = false;
            }
        }
    }

    public void startTour()
    {
        if (Inventory.getCharVar("startingStuffGiven") == 0f)
        {
            Inventory.giveItem("SecurityClearanceChip", null, string.Empty, true, false, 0);
            Inventory.giveItem("LabShirt", null, string.Empty, true, false, 0);
            Inventory.giveItem("LabPants", null, string.Empty, true, true, 0);
            Inventory.setCharVar("startingStuffGiven", 1f);
        }
    }

    public void openClientMenu()
    {
        this.openCharacterSelector(false);
    }

    public void openShop(string shopID)
    {
        Shop.populateShopItems(shopID);
        this.shopOpen = true;
    }

    public void overShopItem(GameObject item)
    {
        if (!((UnityEngine.Object)item == (UnityEngine.Object)null))
        {
            this.mostRecentlyHoveredShopItem = item;
            item.transform.Find("highlight").gameObject.SetActive(true);
            if (this.IPS.transform.Find("ItemHolder").childCount > 0)
            {
                UnityEngine.Object.Destroy(this.IPS.transform.Find("ItemHolder").GetChild(0).gameObject);
            }
            TestingRoom.labItemContainer.gameObject.SetActive(true);
            GameObject.Find("LabItems").transform.Find(item.name).gameObject.SetActive(true);
            GameObject gameObject = UnityEngine.Object.Instantiate(GameObject.Find("LabItems").transform.Find(item.name).gameObject);
            Game.recursiveSetLayer(gameObject, 24);
            GameObject.Find("LabItems").transform.Find(item.name).gameObject.SetActive(false);
            TestingRoom.labItemContainer.gameObject.SetActive(false);
            gameObject.transform.SetParent(this.IPS.transform.Find("ItemHolder"));
            gameObject.transform.localPosition = Vector3.zero;
            if (Inventory.getItemDefinition(item.name).category == "SEX_TOYS_AND_TOOLS")
            {
                Transform transform = gameObject.transform;
                transform.localPosition += Vector3.forward * 0.2f;
            }
            gameObject.transform.localEulerAngles = Vector3.zero;
            if (Shop.currentShop == "materialsynthesisstation")
            {
                ToyMaterials.applyMaterialToObject(gameObject, ToyMaterials.materialsUnlocked[this.selectedShopMaterial]);
            }
            this.UI.transform.Find("ShopInterface").Find("ItemPreview").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("ItemPreview").Find("txtName")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase(Inventory.getItemDefinition(item.name).displayName, string.Empty), 0f, 2f, false);
            ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("ItemPreview").Find("txtName")).GetComponent<Text>().color = Game.getUIcolorByName(Inventory.getItemDefinition(item.name).bagData.color);
            ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("ItemPreview").Find("txtDescription")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase(Inventory.getItemDefinition(item.name).description, string.Empty), 10f, 5f, false);
        }
    }

    public static float largestDimension(Vector3 v)
    {
        if (v.y > v.x && v.y > v.z)
        {
            return v.y;
        }
        if (v.x > v.y && v.x > v.z)
        {
            return v.x;
        }
        return v.z;
    }

    public void outShopItem(GameObject item)
    {
        item.transform.Find("highlight").gameObject.SetActive(false);
    }

    public void clickShopItem(GameObject item)
    {
        this.addItemToCart(item.name);
    }

    public void cartRemoveClicked(GameObject item)
    {
        if (((UnityEngine.Component)item.transform.Find("txtName")).GetComponent<Text>().text.Contains("("))
        {
            string text = ((UnityEngine.Component)item.transform.Find("txtName")).GetComponent<Text>().text;
            text = text.Split('(')[1].Split(')')[0];
            this.removeItemFromCart(item.name, text);
        }
        else
        {
            this.removeItemFromCart(item.name, string.Empty);
        }
    }

    public void emptyCart()
    {
        Inventory.emptyBag("COMPONENTS", string.Empty);
        Inventory.emptyBag("COMPONENTS_CONFIRMED", string.Empty);
        for (int i = 0; i < this.cartUIItems.Count; i++)
        {
            UnityEngine.Object.Destroy(this.cartUIItems[i]);
        }
        this.cartUIItems = new List<GameObject>();
        this.cartSpecialProperties = new List<LayoutItemSpecialProperties>();
        this.cartItemHasComponents = new List<bool>();
        this.updateCart();
    }

    public void removeItemFromCart(string item, string withMaterial = "")
    {
        if (withMaterial == string.Empty)
        {
            int num = this.cartContents.IndexOf(item);
            if (num != -1)
            {
                if (this.cartItemHasComponents[num])
                {
                    this.emptyCart();
                }
                else
                {
                    this.cartContents.RemoveAt(num);
                    UnityEngine.Object.Destroy(this.cartUIItems[num]);
                    this.cartUIItems.RemoveAt(num);
                    this.cartSpecialProperties.RemoveAt(num);
                    this.cartItemHasComponents.RemoveAt(num);
                    this.updateCart();
                }
            }
        }
        else
        {
            int num2 = 0;
            while (true)
            {
                if (num2 < this.cartContents.Count)
                {
                    if (this.cartContents[num2] == item && Game.unCamelCase(this.cartSpecialProperties[num2].material) == withMaterial)
                    {
                        break;
                    }
                    num2++;
                    continue;
                }
                return;
            }
            if (this.cartItemHasComponents[num2])
            {
                this.emptyCart();
            }
            else
            {
                this.cartContents.RemoveAt(num2);
                UnityEngine.Object.Destroy(this.cartUIItems[num2]);
                this.cartUIItems.RemoveAt(num2);
                this.cartSpecialProperties.RemoveAt(num2);
                this.cartItemHasComponents.RemoveAt(num2);
                this.updateCart();
            }
        }
    }

    public void updateCart()
    {
        this.cartTotalCost = 0;
        for (int i = 0; i < this.cartUIItems.Count; i++)
        {
            this.v3 = Vector3.zero;
            this.v3.y = -21f;
            this.v3.y -= (float)i * 36f;
            this.cartUIItems[i].transform.localPosition = this.v3;
            this.cartTotalCost += Inventory.getItemDefinition(this.cartUIItems[i].name).cost;
        }
    }

    public void addItemToCart(string item)
    {
        LayoutItemSpecialProperties layoutItemSpecialProperties = new LayoutItemSpecialProperties();
        bool flag = false;
        if (Inventory.getItemDefinition(item).components.Count > 0)
        {
            if (this.confirmedComponentNames.Count == 0)
            {
                for (int i = 0; i < this.componentsNeeded.Length; i++)
                {
                    if (i < Inventory.getItemDefinition(item).components.Count)
                    {
                        this.componentsNeeded[i] = Inventory.getItemDefinition(item).components[i];
                    }
                    else
                    {
                        this.componentsNeeded[i] = string.Empty;
                    }
                    this.componentsPicked[i] = false;
                    this.componentsWerePicked[i] = false;
                }
                this.selectingComponents = true;
                this.componentSelectionTarget = item;
                this.inventoryOpen = true;
                this.interactingWithBags = new List<string>();
                this.interactingWithBags.Add(Inventory.getBagByName("COMPONENTS").uid);
                Game.gameInstance.playSound("ui_contextopen", 1f, 1f);
                return;
            }
            this.selectingComponents = false;
            this.componentSelectionTarget = string.Empty;
            this.inventoryOpen = false;
            flag = true;
            if (Inventory.getItemDefinition(item).components.Count == 1)
            {
                layoutItemSpecialProperties = this.confirmedComponentProperties[0];
            }
            this.confirmedComponentNames = new List<string>();
            this.confirmedComponentProperties = new List<LayoutItemSpecialProperties>();
        }
        this.shopItemTemplate.SetActive(true);
        GameObject gameObject = UnityEngine.Object.Instantiate(this.shopItemTemplate);
        this.shopItemTemplate.SetActive(false);
        gameObject.name = item;
        string str = string.Empty;
        if (Shop.currentShop == "materialsynthesisstation")
        {
            str = " (" + Game.unCamelCase(ToyMaterials.materialsUnlocked[this.selectedShopMaterial]) + ")";
        }
        ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(item).displayName, string.Empty) + str;
        ((UnityEngine.Component)gameObject.transform.Find("txtCategory")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(item).category, string.Empty);
        ((UnityEngine.Component)gameObject.transform.Find("txtPrice")).GetComponent<Text>().text = Inventory.getItemDefinition(item).cost.ToString();
        ((UnityEngine.Component)gameObject.transform.Find("bg")).GetComponent<Image>().raycastTarget = false;
        ((UnityEngine.Component)gameObject.transform.Find("txtPrice")).GetComponent<Text>().color = Color.white;
        ((UnityEngine.Component)gameObject.transform.Find("fekel")).GetComponent<Image>().color = Color.white;
        gameObject.transform.Find("cmdRemove").gameObject.SetActive(true);
        gameObject.transform.Find("asterisk").gameObject.SetActive(flag);
        if (flag)
        {
            this.UI.transform.Find("ShopInterface").Find("CartItems").Find("componentRemovalWarning")
                .gameObject.SetActive(true);
        }
        gameObject.transform.Find("cmdLeft").gameObject.SetActive(false);
        gameObject.transform.Find("cmdRight").gameObject.SetActive(false);
        gameObject.transform.SetParent(this.UI.transform.Find("ShopInterface").Find("CartItems").Find("items")
            .Find("container"));
        gameObject.transform.localScale = Vector3.one * 0.98f;
        this.cartUIItems.Add(gameObject);
        if (Shop.currentShop == "materialsynthesisstation")
        {
            layoutItemSpecialProperties.material = ToyMaterials.materialsUnlocked[this.selectedShopMaterial];
        }
        this.cartSpecialProperties.Add(layoutItemSpecialProperties);
        this.cartContents.Add(item);
        this.cartItemHasComponents.Add(flag);
        this.updateCart();
    }

    public void placeOrder()
    {
        this.updateCart();
        if (Inventory.data.money >= this.cartTotalCost)
        {
            Inventory.addMoney(-this.cartTotalCost);
            for (int i = 0; i < this.cartUIItems.Count; i++)
            {
                ItemOrder itemOrder = new ItemOrder();
                itemOrder.item = this.cartUIItems[i].name;
                if (itemOrder.item == "MaterialSynthesisStation")
                {
                    Objectives.completeObjective("NPT_ORDER_MATERIAL_SYNTHESIS_STATION");
                    UserSettings.completeTutorial("NPT_ORDER_MATERIAL_SYNTHESIS_STATION");
                }
                if (itemOrder.item == "Dildo")
                {
                    Objectives.completeObjective("NPT_CREATE_A_DILDO");
                    UserSettings.completeTutorial("NPT_CREATE_A_DILDO");
                }
                itemOrder.timeRemaining = Inventory.getItemDefinition(this.cartUIItems[i].name).deliveryTime;
                itemOrder.deliveryLocation = Inventory.getItemDefinition(this.cartUIItems[i].name).deliveryLocation;
                itemOrder.properties = this.cartSpecialProperties[i];
                Inventory.data.orders.Add(itemOrder);
            }
            this.playSound("shop_checkout", 1f, 1f);
            if (Shop.currentShop == "requisitions")
            {
                Inventory.setCharVar("justPlacedRequisitionsOrder", 1f);
                ((UnityEngine.Component)this.World.transform.Find("NPC_requisitionsofficer")).GetComponent<NPC>().openDialogue();
            }
            Inventory.deleteEverythingInBag("COMPONENTS_CONFIRMED");
            this.closeShop();
        }
        else
        {
            this.playSound("ui_error", 1f, 1f);
            this.IPStotalErrorVel = 1f;
        }
    }

    public static string unCamelCase(string s)
    {
        List<char> list = s.ToCharArray().ToList();
        for (int num = list.Count - 1; num > 0; num--)
        {
            if (char.IsUpper(list[num]))
            {
                list.Insert(num, ' ');
            }
        }
        list[0] = char.ToUpper(list[0]);
        return new string(list.ToArray());
    }

    public void shopMaterialDown()
    {
        this.selectedShopMaterial--;
        if (this.selectedShopMaterial < 0)
        {
            this.selectedShopMaterial = ToyMaterials.materialsUnlocked.Count - 1;
        }
        ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("MaterialMenu").Find("txtMat")).GetComponent<Text>().text = Game.unCamelCase(ToyMaterials.materialsUnlocked[this.selectedShopMaterial]);
        this.overShopItem(this.mostRecentlyHoveredShopItem);
    }

    public void shopMaterialUp()
    {
        this.selectedShopMaterial++;
        if (this.selectedShopMaterial >= ToyMaterials.materialsUnlocked.Count)
        {
            this.selectedShopMaterial = 0;
        }
        ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("MaterialMenu").Find("txtMat")).GetComponent<Text>().text = Game.unCamelCase(ToyMaterials.materialsUnlocked[this.selectedShopMaterial]);
        this.overShopItem(this.mostRecentlyHoveredShopItem);
    }

    public void openMaterialMenu()
    {
        this.materialGridOpen = true;
    }

    public void selectMaterialGridMaterial(Transform ID)
    {
        Vector3 localPosition = ID.localPosition;
        this.selectedShopMaterial = Mathf.RoundToInt(localPosition.x);
        this.materialGridOpen = false;
        ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("MaterialMenu").Find("txtMat")).GetComponent<Text>().text = Game.unCamelCase(ToyMaterials.materialsUnlocked[this.selectedShopMaterial]);
        this.overShopItem(this.mostRecentlyHoveredShopItem);
    }

    public void confirmComponents()
    {
        this.confirmedComponentNames = new List<string>();
        this.confirmedComponentProperties = new List<LayoutItemSpecialProperties>();
        List<BagContent> contents = Inventory.getBagByName("COMPONENTS").contents;
        for (int i = 0; i < contents.Count; i++)
        {
            this.confirmedComponentNames.Add(contents[i].itemType);
            this.confirmedComponentProperties.Add(contents[i].properties);
        }
        this.addItemToCart(this.componentSelectionTarget);
        Inventory.emptyBag("COMPONENTS", "COMPONENTS_CONFIRMED");
    }

    public void processShop()
    {
        if ((UnityEngine.Object)this.IPScam == (UnityEngine.Object)null)
        {
            this.IPScam = GameObject.Find("IPSCam");
            this.updateCamGraphicsSettings();
        }
        if ((UnityEngine.Object)this.IPS == (UnityEngine.Object)null)
        {
            this.IPS = GameObject.Find("ItemPresentationScene");
        }
        this.UI.transform.Find("ShopInterface").gameObject.SetActive(this.shopOpen && !this.selectingComponents);
        this.IPS.SetActive(this.shopOpen && !this.selectingComponents);
        this.IPScam.SetActive(this.shopOpen && !this.selectingComponents);
        if (this.shopOpen)
        {
            this.IPS.transform.Rotate(0f, Time.deltaTime * 15f, 0f);
            if ((UnityEngine.Object)this.shopItemTemplate == (UnityEngine.Object)null)
            {
                this.notEnoughMoneyColor = new Color(1f, 0.6313726f, 0.345098048f);
                this.shopItemTemplate = this.UI.transform.Find("ShopInterface").Find("ShopItems").Find("items")
                    .Find("ShopItem")
                    .gameObject;
                this.shopItemTemplate.SetActive(false);
            }
            this.showBackButton = true;
            if (this.needShopRebuild)
            {
                this.UI.transform.Find("ShopInterface").Find("CartItems").Find("componentRemovalWarning")
                    .gameObject.SetActive(false);
                this.selectedShopMaterial = Mathf.FloorToInt(UnityEngine.Random.value * 9999999f) % ToyMaterials.materialsUnlocked.Count;
                this.UI.transform.Find("ShopInterface").Find("ItemPreview").gameObject.SetActive(false);
                if (Shop.currentShop == "requisitions")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("txtShopName")).GetComponent<Text>().text = Localization.getPhrase("LAB_EQUIPMENT", string.Empty);
                }
                else
                {
                    ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("txtShopName")).GetComponent<Text>().text = Localization.getPhrase("CRAFTING_STATION", string.Empty);
                }
                this.cartTotalCost = 0;
                this.cartTotalCost_display = 0f;
                this.shopScroll = 0f;
                for (int i = 0; i < this.shopUIItems.Count; i++)
                {
                    UnityEngine.Object.Destroy(this.shopUIItems[i]);
                }
                for (int j = 0; j < this.cartUIItems.Count; j++)
                {
                    UnityEngine.Object.Destroy(this.cartUIItems[j]);
                }
                this.shopUIItems = new List<GameObject>();
                this.shopItemTemplate.SetActive(true);
                for (int k = 0; k < Shop.shopItems.Count; k++)
                {
                    GameObject gameObject = UnityEngine.Object.Instantiate(this.shopItemTemplate);
                    gameObject.name = Shop.shopItems[k];
                    ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(Shop.shopItems[k]).displayName, string.Empty);
                    ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().color = Game.getUIcolorByName(Inventory.getItemDefinition(Shop.shopItems[k]).bagData.color);
                    ((UnityEngine.Component)gameObject.transform.Find("txtCategory")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(Shop.shopItems[k]).category, string.Empty);
                    ((UnityEngine.Component)gameObject.transform.Find("txtPrice")).GetComponent<Text>().text = Inventory.getItemDefinition(Shop.shopItems[k]).cost.ToString();
                    gameObject.transform.Find("cmdRemove").gameObject.SetActive(false);
                    gameObject.transform.Find("asterisk").gameObject.SetActive(false);
                    gameObject.transform.Find("cmdLeft").gameObject.SetActive(Shop.currentShop == "materialsynthesisstation");
                    gameObject.transform.Find("cmdRight").gameObject.SetActive(Shop.currentShop == "materialsynthesisstation");
                    gameObject.transform.SetParent(this.UI.transform.Find("ShopInterface").Find("ShopItems").Find("items")
                        .Find("container"));
                    if (Inventory.getItemDefinition(Shop.shopItems[k]).components.Count > 0)
                    {
                        string text = Localization.getPhrase("COMPONENTS", string.Empty) + ": ";
                        for (int l = 0; l < Inventory.getItemDefinition(Shop.shopItems[k]).components.Count; l++)
                        {
                            if (l > 0)
                            {
                                text += ", ";
                            }
                            text += Localization.getPhrase(Inventory.getItemDefinition(Inventory.getItemDefinition(Shop.shopItems[k]).components[l]).displayName, string.Empty);
                        }
                        ((UnityEngine.Component)gameObject.transform.Find("txtComponents")).GetComponent<Text>().text = text;
                        Transform transform = gameObject.transform.Find("txtPrice");
                        transform.position += Vector3.up * 5.5f;
                        Transform transform2 = gameObject.transform.Find("fekel");
                        transform2.position += Vector3.up * 5.5f;
                    }
                    else
                    {
                        ((UnityEngine.Component)gameObject.transform.Find("txtComponents")).GetComponent<Text>().text = string.Empty;
                    }
                    gameObject.transform.localScale = Vector3.one * 0.98f;
                    this.v3 = Vector3.zero;
                    this.v3.y = -21f;
                    this.v3.y -= (float)this.shopUIItems.Count * 36f;
                    gameObject.transform.localPosition = this.v3;
                    this.shopUIItems.Add(gameObject);
                }
                this.UI.transform.Find("ShopInterface").Find("txtNothingAvailable").gameObject.SetActive(Shop.shopItems.Count == 0);
                this.UI.transform.Find("ShopInterface").Find("MaterialMenu").gameObject.SetActive(Shop.currentShop == "materialsynthesisstation");
                ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("MaterialMenu").Find("txtMat")).GetComponent<Text>().text = Game.unCamelCase(ToyMaterials.materialsUnlocked[this.selectedShopMaterial]);
                this.shopItemTemplate.SetActive(false);
                this.cartUIItems = new List<GameObject>();
                this.cartSpecialProperties = new List<LayoutItemSpecialProperties>();
                this.cartItemHasComponents = new List<bool>();
                this.cartContents = new List<string>();
                this.needShopRebuild = false;
                if (this.IPS.transform.Find("ItemHolder").childCount > 0)
                {
                    UnityEngine.Object.Destroy(this.IPS.transform.Find("ItemHolder").GetChild(0).gameObject);
                }
            }
            for (int m = 0; m < this.shopUIItems.Count; m++)
            {
                if (Inventory.data.money >= Inventory.getItemDefinition(this.shopUIItems[m].name).cost)
                {
                    ((UnityEngine.Component)this.shopUIItems[m].transform.Find("txtPrice")).GetComponent<Text>().color = Color.white;
                    ((UnityEngine.Component)this.shopUIItems[m].transform.Find("fekel")).GetComponent<Image>().color = Color.white;
                }
                else
                {
                    ((UnityEngine.Component)this.shopUIItems[m].transform.Find("txtPrice")).GetComponent<Text>().color = this.notEnoughMoneyColor;
                    ((UnityEngine.Component)this.shopUIItems[m].transform.Find("fekel")).GetComponent<Image>().color = this.notEnoughMoneyColor;
                }
            }
            if (this.mX < 0.5f)
            {
                float num = this.shopScroll;
                Vector2 mouseScrollDelta = Input.mouseScrollDelta;
                this.shopScroll = num - mouseScrollDelta.y * 70f;
                float num2 = Game.cap((float)this.shopUIItems.Count * 36f - 348f, 0f, 999999f);
                if (this.shopScroll < 0f)
                {
                    this.shopScroll = 0f;
                }
                if (this.shopScroll > num2)
                {
                    this.shopScroll = num2;
                }
            }
            else
            {
                float num3 = this.cartScroll;
                Vector2 mouseScrollDelta2 = Input.mouseScrollDelta;
                this.cartScroll = num3 - mouseScrollDelta2.y * 70f;
                float num4 = Game.cap((float)this.cartUIItems.Count * 36f * 0.8f - 260f, 0f, 999999f);
                if (this.cartScroll < 0f)
                {
                    this.cartScroll = 0f;
                }
                if (this.cartScroll > num4)
                {
                    this.cartScroll = num4;
                }
            }
            this.v3 = Vector3.zero;
            this.v3.x = -255f;
            this.v3.y = 205f;
            this.v3.y += this.shopScroll;
            Transform transform3 = this.UI.transform.Find("ShopInterface").Find("ShopItems").Find("items")
                .Find("container");
            transform3.localPosition += (this.v3 - this.UI.transform.Find("ShopInterface").Find("ShopItems").Find("items")
                .Find("container")
                .localPosition) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
            this.v3 = Vector3.zero;
            this.v3.x = -120f;
            this.v3.y = 153f;
            this.v3.y += this.cartScroll;
            this.UI.transform.Find("ShopInterface").Find("cmdCheckout").gameObject.SetActive(this.cartUIItems.Count > 0);
            this.UI.transform.Find("ShopInterface").Find("CartItems").gameObject.SetActive(this.cartUIItems.Count > 0);
            this.UI.transform.Find("ShopInterface").Find("fekel").gameObject.SetActive(this.cartUIItems.Count > 0);
            this.UI.transform.Find("ShopInterface").Find("txtTotal").gameObject.SetActive(this.cartUIItems.Count > 0);
            this.UI.transform.Find("ShopInterface").Find("totalBG").gameObject.SetActive(this.cartUIItems.Count > 0);
            this.IPStotalErrorY += this.IPStotalErrorVel * Time.deltaTime * 300f;
            if (this.IPStotalErrorY <= 0f)
            {
                this.IPStotalErrorY = 0f;
                this.IPStotalErrorVel = Mathf.Abs(this.IPStotalErrorVel * 0.6f);
                if (this.IPStotalErrorVel < 0.2f)
                {
                    this.IPStotalErrorVel = 0f;
                }
            }
            if (this.IPStotalErrorY != 0f || this.IPStotalErrorVel != 0f)
            {
                this.IPStotalErrorVel -= Time.deltaTime * 10f;
            }
            Transform transform4 = this.UI.transform.Find("ShopInterface").Find("CartItems").Find("items")
                .Find("container");
            transform4.localPosition += (this.v3 - this.UI.transform.Find("ShopInterface").Find("CartItems").Find("items")
                .Find("container")
                .localPosition) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
            this.v3.x = 442.1f;
            this.v3.y = -226.9f + this.IPStotalErrorY;
            this.v3.z = 0f;
            this.UI.transform.Find("ShopInterface").Find("txtTotal").localPosition = this.v3;
            this.cartTotalCost_display += ((float)this.cartTotalCost - this.cartTotalCost_display) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
            ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("txtTotal")).GetComponent<Text>().text = Mathf.RoundToInt(this.cartTotalCost_display).ToString();
            if (this.IPS.transform.Find("ItemHolder").childCount > 0)
            {
                this.previewObjectActualMag = Game.largestDimension(Game.getRecursiveBounds(this.IPS.transform.Find("ItemHolder").GetChild(0).gameObject).size);
                this.previewObjectSize += (this.previewObjectActualMag - this.previewObjectSize) * Game.cap(Time.deltaTime * 8f, 0f, 1f);
            }
            this.IPScam.GetComponent<Camera>().fieldOfView = Game.cap(4f + this.previewObjectSize * 5.86f, 4f, 70f);
            this.v3.x = 31.5f - this.previewObjectSize * 0.45f;
            this.v3.y = -149.651f;
            this.v3.z = -1.524f;
            this.IPScam.transform.localEulerAngles = this.v3;
            if (Inventory.data.money >= this.cartTotalCost)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("txtTotal")).GetComponent<Text>().color = Color.white;
                ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("fekel")).GetComponent<Image>().color = Color.white;
            }
            else
            {
                ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("txtTotal")).GetComponent<Text>().color = this.notEnoughMoneyColor;
                ((UnityEngine.Component)this.UI.transform.Find("ShopInterface").Find("fekel")).GetComponent<Image>().color = this.notEnoughMoneyColor;
            }
            this.UI.transform.Find("ShopInterface").Find("MaterialGrid").gameObject.SetActive(this.materialGridOpen);
            if (this.materialGridOpen)
            {
                if ((UnityEngine.Object)this.MaterialGridPanelTemplate == (UnityEngine.Object)null)
                {
                    this.MaterialGridPanelTemplate = this.UI.transform.Find("ShopInterface").Find("MaterialGrid").Find("PanelContainer")
                        .Find("Panel")
                        .gameObject;
                    this.MaterialGridPanelTemplate.SetActive(false);
                }
                if (this.materialGridPanels.Count == 0)
                {
                    this.MaterialGridPanelTemplate.SetActive(true);
                    int num5 = Mathf.CeilToInt(Mathf.Sqrt((float)ToyMaterials.materialsUnlocked.Count));
                    this.materialGridWidth = 72.5f * (float)(num5 - 1);
                    this.materialGridHeight = 86f * (float)(num5 - 1);
                    for (int n = 0; n < ToyMaterials.materialsUnlocked.Count; n++)
                    {
                        GameObject gameObject2 = UnityEngine.Object.Instantiate(this.MaterialGridPanelTemplate);
                        gameObject2.transform.SetParent(this.MaterialGridPanelTemplate.transform.parent);
                        gameObject2.transform.localScale = Vector3.one;
                        gameObject2.transform.localRotation = Quaternion.identity;
                        ((UnityEngine.Component)gameObject2.transform.Find("txt")).GetComponent<Text>().text = Game.unCamelCase(ToyMaterials.materialsUnlocked[n]);
                        this.v3.x = (float)n;
                        this.v3.y = 0f;
                        this.v3.z = 0f;
                        gameObject2.transform.Find("ID").localPosition = this.v3;
                        ((UnityEngine.Component)gameObject2.transform.Find("dildoprop")).GetComponent<AutoSpinner>().speed = 2.5f + UnityEngine.Random.value * 1f;
                        ToyMaterials.applyMaterialToObject(gameObject2.transform.Find("dildoprop").gameObject, ToyMaterials.materialsUnlocked[n]);
                        this.v3.x = 72.5f * (float)(n % num5) - this.materialGridWidth * 0.5f;
                        this.v3.y = -86f * (float)Mathf.FloorToInt((float)(n / num5)) + this.materialGridHeight * 0.5f;
                        if (n % num5 % 2 == 1)
                        {
                            this.v3.y -= 43f;
                        }
                        this.v3.z = 0f;
                        gameObject2.transform.localPosition = this.v3;
                        this.materialGridPanels.Add(gameObject2);
                    }
                    this.materialGridPanX = 0f;
                    this.materialGridPanY = 0f;
                    this.MaterialGridPanelTemplate.SetActive(false);
                }
                this.materialGridPanX = Game.cap((this.mX - 0.5f) * 1.6f, -0.5f, 0.5f) * this.materialGridWidth;
                this.materialGridPanY = Game.cap((this.mY - 0.5f) * 1.6f, -0.5f, 0.5f) * this.materialGridHeight;
                this.v3.x = 0f - this.materialGridPanX;
                this.v3.y = this.materialGridPanY;
                this.v3.z = 0f;
                Transform transform5 = this.UI.transform.Find("ShopInterface").Find("MaterialGrid").Find("PanelContainer");
                transform5.localPosition += (this.v3 - this.UI.transform.Find("ShopInterface").Find("MaterialGrid").Find("PanelContainer")
                    .localPosition) * Game.cap(Time.deltaTime * 14f, 0f, 1f);
            }
            else if (this.materialGridPanels.Count > 0)
            {
                for (int num6 = 0; num6 < this.materialGridPanels.Count; num6++)
                {
                    UnityEngine.Object.Destroy(this.materialGridPanels[num6]);
                }
                this.materialGridPanels = new List<GameObject>();
            }
        }
        else
        {
            this.needShopRebuild = true;
        }
    }

    public static Bounds getRecursiveBounds(GameObject GO)
    {
        Bounds result = new Bounds(GO.transform.position, Vector3.zero);
        MeshRenderer[] componentsInChildren = GO.GetComponentsInChildren<MeshRenderer>();
        for (int i = 0; i < componentsInChildren.Length; i++)
        {
            result.Encapsulate(componentsInChildren[i].bounds);
        }
        return result;
    }

    public void closeShop()
    {
        Inventory.emptyBag("COMPONENTS", string.Empty);
        Inventory.emptyBag("COMPONENTS_CONFIRMED", string.Empty);
        this.cartContents = new List<string>();
        this.shopOpen = false;
        Inventory.saveInventoryData();
        this.mostRecentlyHoveredShopItem = null;
    }

    public void openLabEditor()
    {
        TestingRoom.editingMode = true;
    }

    public void spamESC()
    {
        if (this.performESC(false))
        {
            this.spamESC();
        }
    }

    public void updateRoomReflections()
    {
        for (int i = 0; i < 3; i++)
        {
            this.World.transform.Find("ReflectionProbes").Find("Rooms").Find("RoomProbe" + i)
                .gameObject.SetActive(false);
            this.World.transform.Find("ReflectionProbes").Find("Rooms").Find("RoomProbe" + i)
                .gameObject.SetActive(true);
        }
    }

    public bool performESC(bool allowPause = true)
    {
        bool flag = false;
        if (this.PC() != null)
        {
            flag = (this.PC().interactionSubject != null);
        }
        if (this.contextMessage != string.Empty && this.contextDistFromScreenCenter == 0f)
        {
            this.contextFunction();
        }
        else if (Tutorials.forcedTutorialFromTooltip)
        {
            Tutorials.forcedTutorialFromTooltip = false;
        }
        else if (RacknetMultiplayer.errorMessage != string.Empty)
        {
            RacknetMultiplayer.errorMessage = string.Empty;
        }
        else if (RacknetMultiplayer.loggingIn)
        {
            RacknetMultiplayer.loggingIn = false;
        }
        else if (RacknetMultiplayer.inRackNet)
        {
            RacknetMultiplayer.inRackNet = false;
        }
        else if (this.satisfactionMessageOpen)
        {
            this.satisfactionMessageOpen = false;
        }
        else if (this.selectingComponents)
        {
            this.inventoryOpen = false;
            this.selectingComponents = false;
            Inventory.emptyBag("COMPONENTS", string.Empty);
        }
        else if (this.materialGridOpen)
        {
            this.materialGridOpen = false;
        }
        else if (this.lightingControlPanelOpen)
        {
            this.killGadget("LightingControlPanel");
            this.updateRoomReflections();
        }
        else if (TestingRoom.editingMode)
        {
            if (this.curLabEditItem > 0)
            {
                this.curLabEditItem = 0;
            }
            else
            {
                TestingRoom.editingMode = false;
            }
        }
        else if (this.chemicalSynthesisMenuOpen)
        {
            this.closeChemicalSynthesisStation();
        }
        else if (this.shopOpen)
        {
            this.closeShop();
        }
        else if (this.inResearchMode)
        {
            this.closeResearch();
        }
        else if (this.creditsOpen)
        {
            this.creditsOpen = false;
        }
        else if (this.confirmingTerminate)
        {
            this.confirmingTerminate = false;
        }
        else if (this.characterSelectorOpen)
        {
            this.closeCharacterSelector();
        }
        else if (this.inventoryOpen)
        {
            this.inventoryOpen = false;
            this.playSound("ui_contextclose", 1f, 1f);
        }
        else
        {
            if (this.PC().interactionSubject != null)
            {
                if (this.freeCam && !UserSettings.data.defaultToFreeCam)
                {
                    goto IL_0256;
                }
                if (!this.freeCam && UserSettings.data.defaultToFreeCam)
                {
                    goto IL_0256;
                }
            }
            if (flag)
            {
                this.PC().leaveInteraction();
            }
            else if (this.preferencesMenuOpen)
            {
                this.savePreferences();
                Game.pausePage = string.Empty;
            }
            else if (this.popupOpen)
            {
                this.popupOpen = false;
            }
            else if (this.curDialogue != string.Empty)
            {
                if (!this.lockedPosition && Game.dialoguePartner.npcData.talkRange < 100f)
                {
                    this.closeDialogue();
                }
            }
            else if (this.embellishmentMenuOpen)
            {
                this.closeEmbellishmentMenu();
            }
            else if (this.texturePatternMenuOpen)
            {
                this.texturePatternMenuOpen = false;
            }
            else if (this.colorPickerOpen)
            {
                this.colorPickerOpen = false;
            }
            else if (this.customizeCharacterPage == 51 || this.customizeCharacterPage == 31 || this.customizeCharacterPage == 21 || this.customizeCharacterPage == 42 || this.customizeCharacterPage == 41)
            {
                this.changeCharacterCustomizationPage(0);
            }
            else if (this.customizingCharacter)
            {
                if (!this.firstCustomizationSpeciesSelection)
                {
                    if (Inventory.getCharVar("startingStuffGiven") == 1f)
                    {
                        this.cancelCustomization(null);
                    }
                    else
                    {
                        this.saveCustomization(null);
                    }
                }
            }
            else if (Game.pausePage != string.Empty)
            {
                Game.pausePage = string.Empty;
            }
            else
            {
                if (!allowPause && !this.pauseOpen)
                {
                    return false;
                }
                this.pauseOpen = !this.pauseOpen;
                if (this.pauseOpen)
                {
                    this.playSound("ui_contextopen", 1f, 1f);
                }
                else
                {
                    this.playSound("ui_contextclose", 1f, 1f);
                }
            }
        }
        goto IL_0450;
    IL_0450:
        return true;
    IL_0256:
        this.freeCam = UserSettings.data.defaultToFreeCam;
        goto IL_0450;
    }

    public static Vector3 locationOfNearestLabItem(string itemType, Vector3 viewerPosition)
    {
        float num = 9999f;
        for (int i = 0; i < LayoutManager.allLabItems.Count; i++)
        {
            if (LayoutManager.allLabItems[i].name == itemType)
            {
                float magnitude = (LayoutManager.allLabItems[i].transform.position - viewerPosition).magnitude;
                if (magnitude < num)
                {
                    num = magnitude;
                    Game.locationOfNearestLabItemV3 = LayoutManager.allLabItems[i].transform.position;
                }
            }
        }
        return Game.locationOfNearestLabItemV3;
    }

    public void processLabEditing()
    {
        if (this.PC() != null)
        {
            if (Input.GetKeyDown(UserSettings.data.KEY_EDITMODE))
            {
                Vector3 position = this.PC().GO.transform.position;
                if (position.y < 0f && (UnityEngine.Object)this.PC().furniture == (UnityEngine.Object)null && (this.currentZone == "Room0" || this.currentZone == "Room1" || this.currentZone == "Room2" || this.currentZone == "LabFloor"))
                {
                    if (TestingRoom.editingMode)
                    {
                        TestingRoom.editingMode = false;
                    }
                    else
                    {
                        this.spamESC();
                        if (this.currentTestSubjects.Count == 0)
                        {
                            this.openLabEditor();
                        }
                        else
                        {
                            this.popup("CANNOT_EDIT_LAB_WHILE_TEST_SUBJECTS_ARE_PRESENT", false, false);
                        }
                    }
                }
            }
            if (TestingRoom.editingMode && this.currentTestSubjects.Count > 0)
            {
                TestingRoom.editingMode = false;
                this.popup("CANNOT_EDIT_LAB_WHILE_TEST_SUBJECTS_ARE_PRESENT", false, false);
            }
            if (!TestingRoom.inAnyRooms)
            {
                UnityEngine.Object.Destroy(TestingRoom.editItemBrush);
                TestingRoom.editItemBrush = null;
                TestingRoom.lastEditItem = string.Empty;
            }
            this.UI.transform.Find("txtPlacementNote").gameObject.SetActive(false);
            TestingRoom.inAnyRooms = false;
            this.UI.transform.Find("LabEditingInterface").gameObject.SetActive(TestingRoom.editingMode);
            if (TestingRoom.editingMode != this.lastLabEditing)
            {
                if (TestingRoom.editingMode)
                {
                    this.playSound("hologram_on", 0.8f, 1f);
                }
                else
                {
                    this.playSound("hologram_off", 0.8f, 1f);
                }
                this.lastLabEditing = TestingRoom.editingMode;
            }
            if (TestingRoom.editingMode)
            {
                this.showBackButton = true;
                if ((UnityEngine.Object)this.labEditItemTemplate == (UnityEngine.Object)null)
                {
                    this.labEditItemTemplate = this.UI.transform.Find("LabEditingInterface").Find("AvailableItems").Find("items")
                        .Find("LabItem")
                        .gameObject;
                    this.labEditItemTemplate.SetActive(false);
                }
                if (this.needLabEditRebuild)
                {
                    this.curLabEditItem = 0;
                    List<string> list = new List<string>();
                    this.itemsAvailableForLabEditingPlacement = new List<string>();
                    List<int> list2 = new List<int>();
                    this.itemsAvailableForLabEditingPlacementCounts = new List<int>();
                    for (int i = 0; i < Inventory.data.bags.Count; i++)
                    {
                        bool flag = false;
                        if (Inventory.data.bags[i].name == "CARRYING")
                        {
                            flag = true;
                        }
                        if (Inventory.data.bags[i].name == "LOCKER_SHELF")
                        {
                            flag = true;
                        }
                        if (Inventory.data.bags[i].name == "STORAGE")
                        {
                            flag = true;
                        }
                        if (Inventory.data.bags[i].name == "GARAGE")
                        {
                            flag = true;
                        }
                        if (flag)
                        {
                            for (int j = 0; j < Inventory.data.bags[i].contents.Count; j++)
                            {
                                string itemType = Inventory.data.bags[i].contents[j].itemType;
                                if (Inventory.getItemDefinition(itemType).placementDescription != string.Empty)
                                {
                                    if (list.Contains(itemType))
                                    {
                                        List<int> list3;
                                        int index;
                                        (list3 = list2)[index = list.IndexOf(itemType)] = list3[index] + 1;
                                    }
                                    else
                                    {
                                        list.Add(itemType);
                                        this.itemsAvailableForLabEditingPlacement.Add(itemType);
                                        this.itemsAvailableForLabEditingPlacementCounts.Add(1);
                                        list2.Add(1);
                                    }
                                }
                            }
                        }
                    }
                    this.itemsAvailableForLabEditingPlacement.Sort(delegate (string p1, string p2)
                    {
                        int num9 = Shop.colorNumber(Inventory.getItemDefinition(p1).bagData.color).CompareTo(Shop.colorNumber(Inventory.getItemDefinition(p2).bagData.color));
                        if (num9 == 0)
                        {
                            return p1.CompareTo(p2);
                        }
                        return num9;
                    });
                    for (int k = 0; k < this.itemsAvailableForLabEditingPlacement.Count; k++)
                    {
                        for (int l = 0; l < list.Count; l++)
                        {
                            if (this.itemsAvailableForLabEditingPlacement[k] == list[l])
                            {
                                this.itemsAvailableForLabEditingPlacementCounts[k] = list2[l];
                            }
                        }
                    }
                    this.itemsAvailableForLabEditingPlacement.Insert(0, "Grabber");
                    this.itemsAvailableForLabEditingPlacementCounts.Insert(0, 0);
                    this.labEditScroll = 0f;
                    for (int m = 0; m < this.labEditUIItems.Count; m++)
                    {
                        UnityEngine.Object.Destroy(this.labEditUIItems[m]);
                    }
                    this.labEditUIItems = new List<GameObject>();
                    for (int n = 0; n < this.itemsAvailableForLabEditingPlacement.Count; n++)
                    {
                        GameObject gameObject = UnityEngine.Object.Instantiate(this.labEditItemTemplate);
                        gameObject.name = this.itemsAvailableForLabEditingPlacement[n];
                        if (this.itemsAvailableForLabEditingPlacement[n] == this.labEditGrabbedItem)
                        {
                            this.curLabEditItem = n;
                            this.labEditGrabbedItem = string.Empty;
                        }
                        if (n == 0)
                        {
                            ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase("GRABBER_TOOL", string.Empty);
                            ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().color = Game.getUIcolorByName("grey");
                            ((UnityEngine.Component)gameObject.transform.Find("txtCategory")).GetComponent<Text>().text = Localization.getPhrase("GRABBER_TOOL_DESCRIPTION", string.Empty);
                            ((UnityEngine.Component)gameObject.transform.Find("txtCategory")).GetComponent<Text>().color = Game.getUIcolorByName("grey");
                        }
                        else
                        {
                            ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(this.itemsAvailableForLabEditingPlacement[n]).displayName, string.Empty);
                            ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().color = Game.getUIcolorByName(Inventory.getItemDefinition(this.itemsAvailableForLabEditingPlacement[n]).bagData.color);
                            ((UnityEngine.Component)gameObject.transform.Find("txtCategory")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(this.itemsAvailableForLabEditingPlacement[n]).category, string.Empty);
                            ((UnityEngine.Component)gameObject.transform.Find("txtCategory")).GetComponent<Text>().color = Color.white * 107f / 255f;
                            ((UnityEngine.Component)gameObject.transform.Find("txtQuantity")).GetComponent<Text>().text = this.itemsAvailableForLabEditingPlacementCounts[n].ToString();
                        }
                        gameObject.transform.Find("txtQuantity").gameObject.SetActive(n != 0);
                        gameObject.transform.Find("Grabber").gameObject.SetActive(n == 0);
                        gameObject.transform.SetParent(this.UI.transform.Find("LabEditingInterface").Find("AvailableItems").Find("items")
                            .Find("container"));
                        gameObject.transform.localScale = Vector3.one * 0.98f;
                        this.v3 = Vector3.zero;
                        this.v3.y = -21f;
                        this.v3.y -= (float)this.labEditUIItems.Count * 36f;
                        gameObject.transform.localPosition = this.v3;
                        gameObject.SetActive(true);
                        this.labEditUIItems.Add(gameObject);
                    }
                    if ((UnityEngine.Object)this.editableItemHotspotTemplate == (UnityEngine.Object)null)
                    {
                        this.editableItemHotspotTemplate = this.UI.transform.Find("LabEditingInterface").Find("editableObjects").Find("Hotspot")
                            .gameObject;
                    }
                    this.labEditItemTemplate.SetActive(false);
                    for (int num = this.editableItemHotspots.Count - 1; num >= 0; num--)
                    {
                        UnityEngine.Object.Destroy(this.editableItemHotspots[num]);
                    }
                    this.editableItemHotspots = new List<GameObject>();
                    this.editableItemPositions = new List<Vector3>();
                    this.editableItemLPositions = new List<Vector3>();
                    this.editableItems = new List<string>();
                    this.editableItemHotspotTemplate.SetActive(true);
                    this.editableItemLayoutIndices = new List<int>();
                    this.editableItemItemIndices = new List<int>();
                    for (int num2 = 0; num2 < 4; num2++)
                    {
                        RoomLayout layoutByName = LayoutManager.getLayoutByName(LayoutManager.data.activeLayouts[num2]);
                        for (int num3 = 0; num3 < layoutByName.items.Count; num3++)
                        {
                            this.editableItems.Add(layoutByName.items[num3].assetName);
                            this.editableItemPositions.Add(LayoutManager.rooms[num2].transform.TransformPoint(layoutByName.items[num3].position));
                            this.editableItemLPositions.Add(layoutByName.items[num3].position);
                            GameObject gameObject2 = UnityEngine.Object.Instantiate(this.editableItemHotspotTemplate);
                            gameObject2.transform.SetParent(this.editableItemHotspotTemplate.transform.parent);
                            gameObject2.transform.localScale = this.editableItemHotspotTemplate.transform.localScale;
                            gameObject2.SetActive(true);
                            gameObject2.name = Inventory.getItemDefinition(layoutByName.items[num3].assetName).bagData.color;
                            this.editableItemHotspots.Add(gameObject2);
                            this.editableItemLayoutIndices.Add(num2);
                            this.editableItemItemIndices.Add(num3);
                        }
                    }
                    this.editableItemHotspotTemplate.SetActive(false);
                    this.labEditGrabbedItem = string.Empty;
                    this.needLabEditRebuild = false;
                }
                if (Input.GetKeyDown(UserSettings.data.KEY_ROTATE_UP) || (Input.GetKey(UserSettings.data.KEY_ROTATE_UP) && this.editItemScrollDelay <= 0f))
                {
                    this.curLabEditItem--;
                    UISFX.playHover();
                    this.editItemScrollDelay += 0.06f;
                }
                if (Input.GetKeyDown(UserSettings.data.KEY_ROTATE_DOWN) || (Input.GetKey(UserSettings.data.KEY_ROTATE_DOWN) && this.editItemScrollDelay <= 0f))
                {
                    this.curLabEditItem++;
                    UISFX.playHover();
                    this.editItemScrollDelay += 0.06f;
                }
                if (this.editItemScrollDelay > 0f)
                {
                    this.editItemScrollDelay -= Time.deltaTime;
                }
                if (!Input.GetKey(UserSettings.data.KEY_ROTATE_UP) && !Input.GetKey(UserSettings.data.KEY_ROTATE_DOWN))
                {
                    this.editItemScrollDelay = 0.25f;
                }
                if (this.labEditRotateTickDelay <= 0f)
                {
                    this.labEditRotateTickDelay += 0.06f;
                    this.playSound("ui_dragtick", 1f, 1f);
                }
                if (this.curLabEditItem >= this.labEditUIItems.Count)
                {
                    this.curLabEditItem = this.labEditUIItems.Count - 1;
                }
                if (this.curLabEditItem < 0)
                {
                    this.curLabEditItem = 0;
                }
                for (int num4 = 0; num4 < this.labEditUIItems.Count; num4++)
                {
                    this.labEditUIItems[num4].transform.Find("outline").gameObject.SetActive(num4 == this.curLabEditItem);
                    if (num4 == this.curLabEditItem)
                    {
                        TestingRoom.editItem = this.itemsAvailableForLabEditingPlacement[num4];
                        Vector3 localPosition = this.labEditUIItems[num4].transform.localPosition;
                        float y = localPosition.y;
                        Vector3 localPosition2 = this.labEditUIItems[num4].transform.parent.localPosition;
                        float num5 = y + localPosition2.y;
                        if (num5 < -120f)
                        {
                            this.labEditScroll += Time.deltaTime * (100f + (-120f - num5) * 4f);
                        }
                        if (num5 > 170f)
                        {
                            this.labEditScroll -= Time.deltaTime * (100f + (num5 - 170f) * 4f);
                        }
                    }
                }
                if (TestingRoom.currentRoomLayoutName != ((UnityEngine.Component)this.UI.transform.Find("LabEditingInterface").Find("txtRoomName")).GetComponent<ScienceTextAnimator>().finalText)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("LabEditingInterface").Find("txtRoomName")).GetComponent<ScienceTextAnimator>().setText(TestingRoom.currentRoomLayoutName, 0f, 1f, false);
                }
                if (Input.GetKey(KeyCode.LeftAlt))
                {
                    this.v3.x = (this.mX - 0.5f) * this.screenWidth;
                    this.v3.y = (this.mY - 0.5f) * (0f - this.screenHeight);
                    this.v3.z = 0f;
                }
                else
                {
                    this.v3.x = this.screenWidth * 0.1f;
                    this.v3.y = 0f;
                    this.v3.z = 0f;
                }
                this.LabEditingInterfaceCursor.localPosition = this.v3;
                string text = string.Empty;
                if (this.curLabEditItem == 0)
                {
                    float num6 = 0.6f;
                    this.lasthoveringOverEditableItem = this.hoveringOverEditableItem;
                    this.hoveringOverEditableItem = -1;
                    for (int num7 = 0; num7 < this.editableItemHotspots.Count; num7++)
                    {
                        this.v3 = this.mainCam.transform.InverseTransformPoint(this.editableItemPositions[num7]);
                        if (this.v3.z > 0f)
                        {
                            this.editableItemHotspots[num7].SetActive(true);
                            this.editableItemHotspots[num7].transform.localPosition = this.worldToScreen(this.editableItemPositions[num7], true, 3000f);
                            this.editableItemHotspots[num7].GetComponent<CanvasRenderer>().SetColor(Game.getUIcolorByName(this.editableItemHotspots[num7].name));
                            float magnitude = (this.editableItemHotspots[num7].transform.position - this.LabEditingInterfaceCursor.position).magnitude;
                            if (magnitude < num6)
                            {
                                num6 = magnitude;
                                this.hoveringOverEditableItem = num7;
                            }
                            if (num7 == this.lasthoveringOverEditableItem)
                            {
                                this.editableItemHotspots[num7].transform.localScale = Vector3.one * 2f * (1f + 0.1f * Mathf.Cos(Time.time * 3f)) / (this.v3.magnitude * 0.3f + 1f);
                                object[] obj = new object[5];
                                Vector3 vector = this.editableItemPositions[num7];
                                obj[0] = Mathf.Abs(Mathf.RoundToInt(vector.x * 1000f));
                                obj[1] = ".";
                                Vector3 vector2 = this.editableItemPositions[num7];
                                obj[2] = Mathf.Abs(Mathf.RoundToInt(vector2.y * 1000f));
                                obj[3] = ".";
                                Vector3 vector3 = this.editableItemPositions[num7];
                                obj[4] = Mathf.Abs(Mathf.RoundToInt(vector3.z * 1000f));
                                text = string.Concat(obj);
                            }
                            else
                            {
                                this.editableItemHotspots[num7].transform.localScale = Vector3.one * (1f + 0.1f * Mathf.Cos(Time.time * 3f)) / (this.v3.magnitude * 0.3f + 1f);
                            }
                        }
                        else
                        {
                            this.editableItemHotspots[num7].SetActive(false);
                        }
                    }
                    this.LabEditingInterfaceCursor.gameObject.SetActive(true);
                }
                else
                {
                    for (int num8 = 0; num8 < this.editableItemHotspots.Count; num8++)
                    {
                        this.editableItemHotspots[num8].SetActive(false);
                    }
                    this.LabEditingInterfaceCursor.gameObject.SetActive(false);
                }
                this.UI.transform.Find("LabEditingInterface").Find("cursorLine").gameObject.SetActive(this.hoveringOverEditableItem >= 0 && this.curLabEditItem == 0);
                this.v32 = Vector3.one * 0.787f;
                if (this.hoveringOverEditableItem == -1 || this.curLabEditItem > 0)
                {
                    Transform labEditingInterfaceCursor = this.LabEditingInterfaceCursor;
                    labEditingInterfaceCursor.localScale += (Vector3.one * 0.5f - this.LabEditingInterfaceCursor.localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                    this.v32.y = 0f;
                }
                else
                {
                    Transform labEditingInterfaceCursor2 = this.LabEditingInterfaceCursor;
                    labEditingInterfaceCursor2.localScale += (Vector3.one * 0.7f - this.LabEditingInterfaceCursor.localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                    this.UI.transform.Find("LabEditingInterface").Find("cursorLine").transform.position = (this.LabEditingInterfaceCursor.position + this.editableItemHotspots[this.hoveringOverEditableItem].transform.position) / 2f;
                    this.v3.x = (this.LabEditingInterfaceCursor.position - this.editableItemHotspots[this.hoveringOverEditableItem].transform.position).magnitude * 9.91f * 0.7f;
                    this.v3.y = 0.05f;
                    this.v3.z = 0f;
                    if (this.v3.x < 1f)
                    {
                        this.UI.transform.Find("LabEditingInterface").Find("cursorLine").gameObject.SetActive(false);
                    }
                    this.UI.transform.Find("LabEditingInterface").Find("cursorLine").transform.localScale = this.v3;
                    this.v3 = Vector3.zero;
                    ref Vector3 val = ref this.v3;
                    Vector3 position2 = this.LabEditingInterfaceCursor.position;
                    float y2 = position2.y;
                    Vector3 position3 = this.editableItemHotspots[this.hoveringOverEditableItem].transform.position;
                    float y3 = y2 - position3.y;
                    Vector3 position4 = this.LabEditingInterfaceCursor.position;
                    float x = position4.x;
                    Vector3 position5 = this.editableItemHotspots[this.hoveringOverEditableItem].transform.position;
                    val.z = Mathf.Atan2(y3, x - position5.x) * 180f / 3.1415f;
                    this.UI.transform.Find("LabEditingInterface").Find("cursorLine").transform.localEulerAngles = this.v3;
                    if (Input.GetMouseButtonDown(0) && this.recentItemPlacement > 0.1f)
                    {
                        Game.gameInstance.playSound("labEditRemoveItem", 1f, 1f);
                        LayoutManager.removeItemFromLayout(this.editableItems[this.lasthoveringOverEditableItem], this.editableItemLPositions[this.lasthoveringOverEditableItem], LayoutManager.data.activeLayouts[this.editableItemLayoutIndices[this.lasthoveringOverEditableItem]]);
                        this.needLabEditRebuild = true;
                        this.labEditGrabbedItem = this.editableItems[this.lasthoveringOverEditableItem];
                        this.lasthoveringOverEditableItem = -1;
                        this.hoveringOverEditableItem = -1;
                    }
                }
                Transform transform = this.LabEditingInterfaceCursor.Find("bg");
                transform.localScale += (this.v32 - this.LabEditingInterfaceCursor.Find("bg").localScale) * Game.cap(Time.deltaTime * 20f, 0f, 1f);
                GameObject gameObject3 = this.LabEditingInterfaceCursor.Find("bg").gameObject;
                Vector3 localScale = this.LabEditingInterfaceCursor.Find("bg").localScale;
                gameObject3.SetActive(localScale.y > 0.02f);
                if (text != ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtCoord")).GetComponent<ScienceTextAnimator>().finalText)
                {
                    UISFX.playHover();
                    if (text == string.Empty || this.hoveringOverEditableItem == -1)
                    {
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtItem")).GetComponent<ScienceTextAnimator>().setText(string.Empty, 0f, 2.5f, false);
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtCoord")).GetComponent<ScienceTextAnimator>().setText(string.Empty, 10f, 5f, false);
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtItem")).GetComponent<Text>().color = Color.white;
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor).GetComponent<CanvasRenderer>().SetColor(Color.white);
                    }
                    else
                    {
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtItem")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase(Inventory.getItemDefinition(this.editableItems[this.hoveringOverEditableItem]).displayName, string.Empty), 0f, 2.5f, false);
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtCoord")).GetComponent<ScienceTextAnimator>().setText(text, 10f, 5f, false);
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor.Find("txtItem")).GetComponent<Text>().color = Game.getUIcolorByName(Inventory.getItemDefinition(this.editableItems[this.hoveringOverEditableItem]).bagData.color);
                        ((UnityEngine.Component)this.LabEditingInterfaceCursor).GetComponent<CanvasRenderer>().SetColor(Game.getUIcolorByName(Inventory.getItemDefinition(this.editableItems[this.hoveringOverEditableItem]).bagData.color));
                    }
                }
                this.v3 = Vector3.zero;
                this.v3.x = -255f;
                this.v3.y = 205f;
                this.v3.y += this.labEditScroll;
                Transform transform2 = this.UI.transform.Find("LabEditingInterface").Find("AvailableItems").Find("items")
                    .Find("container");
                transform2.localPosition += (this.v3 - this.UI.transform.Find("LabEditingInterface").Find("AvailableItems").Find("items")
                    .Find("container")
                    .localPosition) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
            }
            else
            {
                this.needLabEditRebuild = true;
                if ((UnityEngine.Object)TestingRoom.editItemBrush != (UnityEngine.Object)null)
                {
                    UnityEngine.Object.Destroy(TestingRoom.editItemBrush);
                    TestingRoom.editItemBrush = null;
                }
            }
            this.recentItemPlacement += Time.deltaTime;
        }
    }

    public void beginTestSubjectSession()
    {
        this.popup("FEATURE_NOT_AVAILABLE", false, false);
    }

    public void openEmployeeManagementWindow()
    {
        this.popup("FEATURE_NOT_AVAILABLE", false, false);
    }

    public void setTourProgress(int prog)
    {
        NPC.tourProgress = prog;
        Inventory.setCharVar("tourPhase", (float)prog);
        if (prog == 7)
        {
            Inventory.setCharVar("tourCompleted", 1f);
        }
    }

    public void setOrientationPrefs(int or)
    {
        switch (or)
        {
            case 0:
                UserSettings.data.genderPreferences[0] = ((!this.PC().data.identifiesMale) ? 0f : 3f);
                UserSettings.data.genderPreferences[1] = ((!this.PC().data.identifiesMale) ? 3f : 0f);
                UserSettings.data.genderPreferences[2] = 0f;
                UserSettings.data.genderPreferences[3] = 0f;
                UserSettings.data.genderPreferences[4] = 0f;
                UserSettings.data.genderPreferences[5] = 0f;
                UserSettings.data.genderPreferences[6] = 0f;
                break;
            case 1:
                UserSettings.data.genderPreferences[0] = 3f;
                UserSettings.data.genderPreferences[1] = 3f;
                UserSettings.data.genderPreferences[2] = 0f;
                UserSettings.data.genderPreferences[3] = 0f;
                UserSettings.data.genderPreferences[4] = 0f;
                UserSettings.data.genderPreferences[5] = 0f;
                UserSettings.data.genderPreferences[6] = 0f;
                break;
            case 2:
                UserSettings.data.genderPreferences[0] = ((!this.PC().data.identifiesMale) ? 3f : 0f);
                UserSettings.data.genderPreferences[1] = ((!this.PC().data.identifiesMale) ? 0f : 3f);
                UserSettings.data.genderPreferences[2] = 0f;
                UserSettings.data.genderPreferences[3] = 0f;
                UserSettings.data.genderPreferences[4] = 0f;
                UserSettings.data.genderPreferences[5] = 0f;
                UserSettings.data.genderPreferences[6] = 0f;
                break;
            case 3:
                UserSettings.data.genderPreferences[0] = 3f;
                UserSettings.data.genderPreferences[1] = 3f;
                UserSettings.data.genderPreferences[2] = 2f;
                UserSettings.data.genderPreferences[3] = 2f;
                UserSettings.data.genderPreferences[4] = 2f;
                UserSettings.data.genderPreferences[5] = 2f;
                UserSettings.data.genderPreferences[6] = 1f;
                break;
        }
        UserSettings.saveSettings();
    }

    public void openPreferencesInterface()
    {
        this.preferencesMenuOpen = true;
    }

    public void savePreferences()
    {
        if (this.preferencesMenuWasOpen)
        {
            for (int i = 0; i < 7; i++)
            {
                UserSettings.data.genderPreferences[i] = ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("GenderSliders")
                    .Find("sld" + i)).GetComponent<UnityEngine.UI.Slider>().value;
            }
            for (int j = 0; j < 4; j++)
            {
                UserSettings.data.bodyTypePreferences[j] = ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("BodySliders")
                    .Find("sld" + j)).GetComponent<UnityEngine.UI.Slider>().value;
            }
            UserSettings.data.stylePreference = ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("sldStyles")).GetComponent<UnityEngine.UI.Slider>().value;
            for (int k = 0; k < this.fetishSliders.Count; k++)
            {
                if (Fetishes.fetishDefaultValues[k] != -1f)
                {
                    for (int l = 0; l < UserSettings.data.fetishPreference.Count; l++)
                    {
                        if (((UnityEngine.Component)this.fetishSliders[k].transform.Find("txt")).GetComponent<Text>().text == Localization.getPhrase("FETISH_" + UserSettings.data.fetishPreference[l].fetish, string.Empty))
                        {
                            UserSettings.data.fetishPreference[l].pref = ((UnityEngine.Component)this.fetishSliders[k].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value;
                        }
                    }
                }
            }
            for (int m = 0; m < this.speciesSliders.Count; m++)
            {
                for (int n = 0; n < UserSettings.data.speciesPreferences.Count; n++)
                {
                    if (((UnityEngine.Component)this.speciesSliders[m].transform.Find("txt")).GetComponent<Text>().text == Localization.getPhrase("SPECIES_" + UserSettings.data.speciesPreferences[n].species, string.Empty))
                    {
                        UserSettings.data.speciesPreferences[n].pref = ((UnityEngine.Component)this.speciesSliders[m].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value;
                    }
                }
            }
        }
        UserSettings.saveSettings();
        for (int num = 0; num < this.randomCharactersForSelection.Count; num++)
        {
            this.removeCharacter(this.randomCharactersForSelection[num]);
        }
        this.randomCharactersForSelection = new List<RackCharacter>();
        this.preferencesMenuOpen = false;
        if (Inventory.getCharVar("settingPreferences") == 1f)
        {
            ((UnityEngine.Component)this.World.transform.Find("NPC_receptionist")).GetComponent<NPC>().openDialogue();
        }
        if (Game.pausePage != string.Empty)
        {
            Game.pausePage = string.Empty;
        }
    }

    private void selectDialogueOption(int o)
    {
        UISFX.clickSFX(string.Empty);
        if (this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses[o].functions != string.Empty)
        {
            string[] array = this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses[o].functions.Split(';');
            for (int i = 0; i < array.Length; i++)
            {
                string[] array2 = array[i].Split(' ');
                switch (array2[0])
                {
                    default:
                        {
                            MethodInfo method = base.GetType().GetMethod(array2[0]);
                            method.Invoke(this, null);
                            break;
                        }
                    case "openShop":
                        this.openShop(array2[1]);
                        break;
                    case "setUserVar":
                        UserSettings.setUserVar(array2[1], float.Parse(array2[2]));
                        break;
                    case "setCharVar":
                        Inventory.setCharVar(array2[1], float.Parse(array2[2]));
                        break;
                    case "setOrientationPrefs":
                        this.setOrientationPrefs(int.Parse(array2[1]));
                        break;
                    case "setTourProgress":
                        this.setTourProgress(int.Parse(array2[1]));
                        break;
                    case "giveItem":
                        if (array2.Length > 2)
                        {
                            Inventory.giveItem(array2[1], null, array2[2], false, true, 0);
                        }
                        else
                        {
                            Inventory.giveItem(array2[1], null, string.Empty, false, true, 0);
                        }
                        break;
                }
            }
        }
        if (this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses[o].target == "EXIT")
        {
            this.closeDialogue();
        }
        else
        {
            for (int j = 0; j < this.dialogueTree.nodes.Count; j++)
            {
                if (this.dialogueTree.nodes[j].id == this.dialogueTree.nodes[this.curDialogueNode].eligibleResponses[o].target)
                {
                    this.curDialogueNode = j;
                    return;
                }
            }
        }
        this.updateDialogueResponseEligibility();
        this.PC().talkingAnimationTime = 2f;
    }

    private void closeDialogue()
    {
        if (Game.dialoguePartner != null)
        {
            Game.dialoguePartner.facialExpression = Game.dialoguePartner.npcData.defaultFacialExpression;
        }
        this.curDialogue = string.Empty;
        this.curDialogueFilename = string.Empty;
        this.curDialogueTree = null;
        Game.waitingForDialogueContinue = false;
        Game.curDialogueBreakStep = 0;
        this.curDialogueNode = 0;
    }

    public static string animateDialogue(string txt, float prog, RackCharacter dialogueCharacter = null)
    {
        if (dialogueCharacter == null)
        {
            dialogueCharacter = Game.dialoguePartner;
        }
        string text = string.Empty;
        int num = 0;
        bool flag = false;
        string text2 = string.Empty;
        List<string> list = new List<string>();
        bool flag2 = false;
        bool flag3 = false;
        int num2 = 0;
        string facialExpression = "default";
        bool flag4 = false;
        bool flag5 = false;
        bool flag6 = false;
        bool flag7 = false;
        for (int i = 0; i < txt.Length; i++)
        {
            if (!flag)
            {
                if (txt.Substring(i, 1) == "{")
                {
                    i++;
                    string text3 = string.Empty;
                    for (; txt.Substring(i, 1) != "}"; i++)
                    {
                        text3 += txt.Substring(i, 1);
                    }
                    if (text3 != null)
                    {
                        Dictionary<string, int> dictionary = new Dictionary<string, int>(10);
                        dictionary.Add("break", 0);
                        dictionary.Add("male", 1);
                        dictionary.Add("/male", 2);
                        dictionary.Add("female", 3);
                        dictionary.Add("/female", 4);
                        dictionary.Add("maleplayer", 5);
                        dictionary.Add("/maleplayer", 6);
                        dictionary.Add("femaleplayer", 7);
                        dictionary.Add("/femaleplayer", 8);
                        dictionary.Add("face", 9);
                        int num3 = default(int);
                        if (dictionary.TryGetValue(text3, out num3))
                        {
                            switch (num3)
                            {
                                case 0:
                                    num2++;
                                    Game.waitingForDialogueContinue = (Game.waitingForDialogueContinue || (num2 > Game.curDialogueBreakStep && !flag3));
                                    break;
                                case 1:
                                    flag4 = true;
                                    break;
                                case 2:
                                    flag4 = false;
                                    break;
                                case 3:
                                    flag6 = true;
                                    break;
                                case 4:
                                    flag6 = false;
                                    break;
                                case 5:
                                    flag5 = true;
                                    break;
                                case 6:
                                    flag5 = false;
                                    break;
                                case 7:
                                    flag7 = true;
                                    break;
                                case 8:
                                    flag7 = false;
                                    break;
                                case 9:
                                    {
                                        i++;
                                        string text4 = string.Empty;
                                        for (; txt.Substring(i, 1) != "}"; i++)
                                        {
                                            text4 += txt.Substring(i, 1);
                                        }
                                        if (!flag3 && num2 == Game.curDialogueBreakStep)
                                        {
                                            facialExpression = text4;
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                }
                else if (txt.Substring(i, 1) == "<")
                {
                    if (!flag3 && num2 == Game.curDialogueBreakStep)
                    {
                        text += txt.Substring(i, 1);
                    }
                    flag = true;
                    text2 = string.Empty;
                    flag2 = true;
                }
                else
                {
                    if (num2 == Game.curDialogueBreakStep)
                    {
                        bool flag8 = true;
                        if ((!flag4 || dialogueCharacter.data.identifiesMale) && (!flag6 || !dialogueCharacter.data.identifiesMale) && (!flag5 || Game.gameInstance.PC().data.identifiesMale) && (!flag7 || !Game.gameInstance.PC().data.identifiesMale))
                        {
                            text += txt.Substring(i, 1);
                            flag8 = false;
                        }
                        if (flag8)
                        {
                            prog += 1f;
                        }
                    }
                    num++;
                }
            }
            else if (txt.Substring(i, 1) == ">")
            {
                flag = false;
                if (!flag3 && num2 == Game.curDialogueBreakStep)
                {
                    text += txt.Substring(i, 1);
                }
                if (flag2)
                {
                    if (!flag3 && num2 == Game.curDialogueBreakStep)
                    {
                        list.Add(text2);
                    }
                }
                else if (text2 == "color")
                {
                    int num4 = list.Count - 1;
                    while (num4 >= 0)
                    {
                        if (list[num4].IndexOf("color") == -1)
                        {
                            num4--;
                            continue;
                        }
                        list.RemoveAt(num4);
                        break;
                    }
                }
                else if (!flag3 && num2 == Game.curDialogueBreakStep)
                {
                    list.RemoveAt(list.IndexOf(text2));
                }
            }
            else
            {
                if (!flag3 && num2 == Game.curDialogueBreakStep)
                {
                    text += txt.Substring(i, 1);
                }
                if (txt.Substring(i, 1) == "/")
                {
                    flag2 = false;
                }
                else
                {
                    text2 += txt.Substring(i, 1);
                }
            }
            if ((float)num >= prog && !flag3 && !flag)
            {
                while (list.Count > 0)
                {
                    string text5 = list[list.Count - 1];
                    if (text5.IndexOf("color") != -1)
                    {
                        text5 = "color";
                    }
                    text = text + "</" + text5 + ">";
                    list.RemoveAt(list.Count - 1);
                }
                text += "<color=#00000000>";
                flag3 = true;
            }
        }
        if (flag3)
        {
            text += "</color>";
        }
        if (dialogueCharacter != null && facialExpression != string.Empty)
        {
            if (facialExpression == "default")
            {
                if ((UnityEngine.Object)dialogueCharacter.npcData != (UnityEngine.Object)null)
                {
                    dialogueCharacter.facialExpression = dialogueCharacter.npcData.defaultFacialExpression;
                }
            }
            else
            {
                dialogueCharacter.facialExpression = facialExpression;
            }
        }
        Game.doneAnimatingDialogue = !flag3;
        return text;
    }

    public static string dialogueFormat(string str)
    {
        string text = str.Replace("[notitle]", string.Empty);
        text = text.Replace("[b]", "<b>");
        text = text.Replace("[/b]", "</b>");
        text = text.Replace("[i]", "<i>");
        text = text.Replace("[/i]", "</i>");
        text = text.Replace("[orange]", "<color=#df7f45ff>");
        text = text.Replace("[/orange]", "</color>");
        text = text.Replace("[blue]", "<color=#4595dfff>");
        text = text.Replace("[/blue]", "</color>");
        text = text.Replace("[red]", "<color=#df4566ff>");
        text = text.Replace("[/red]", "</color>");
        text = text.Replace("[green]", "<color=#66df45ff>");
        text = text.Replace("[/green]", "</color>");
        text = text.Replace("[yellow]", "<color=#dfcb45ff>");
        text = text.Replace("[/yellow]", "</color>");
        text = text.Replace("[purple]", "<color=#a64bf3ff>");
        text = text.Replace("[/purple]", "</color>");
        text = text.Replace("[[", "<i><color=#888888>[");
        text = text.Replace("]]", "]</color></i>");
        text = text.Replace("[break]", "{break}");
        text = text.Replace("[face]", "{face}");
        text = text.Replace("[/face]", "}");
        text = text.Replace("[female]", "{female}");
        text = text.Replace("[male]", "{male}");
        text = text.Replace("[/female]", "{/female}");
        text = text.Replace("[/male]", "{/male}");
        text = text.Replace("[femaleplayer]", "{femaleplayer}");
        text = text.Replace("[maleplayer]", "{maleplayer}");
        text = text.Replace("[/femaleplayer]", "{/femaleplayer}");
        text = text.Replace("[/maleplayer]", "{/maleplayer}");
        text = text.Replace("[money]", Mathf.Floor((float)Inventory.data.money).ToString());
        text = text.Replace("%name%", Inventory.data.characterName);
        text = text.Replace("%politename%", Inventory.data.politeName);
        text = text.Replace("%domname%", Inventory.data.domName);
        text = text.Replace("%logtime%", Localization.getPhrase("Log ", string.Empty) + Mathf.RoundToInt(Time.timeSinceLevelLoad));
        if (Game.dialoguePartner != null)
        {
            text = text.Replace("%npcname%", Game.dialoguePartner.data.name);
        }
        text = text.Replace("%clientmanagername%", NPC.clientManagerName);
        text = text.Replace("%chemistname%", NPC.chemistName);
        return text.Replace("%requisitionsname%", NPC.requisitionsOfficerName);
    }

    private void processEditorUI()
    {
        this.processDialogueEditor();
    }

    public void toggleDialogueEditorCheatsheet()
    {
        this.dialogueCheatsheetOpen = !this.dialogueCheatsheetOpen;
        if ((UnityEngine.Object)this.DialogueEditorCheatSheet == (UnityEngine.Object)null)
        {
            this.DialogueEditorCheatSheet = this.EditorUI.transform.Find("DialogueEditor").Find("cheatsheet").gameObject;
            this.DialogueEditorCheatSheetButton = this.EditorUI.transform.Find("DialogueEditor").Find("cmdCheatsheet").gameObject;
        }
        this.DialogueEditorCheatSheet.SetActive(this.dialogueCheatsheetOpen);
        this.DialogueEditorCheatSheetButton.SetActive(!this.dialogueCheatsheetOpen);
    }

    public void updateDialogueResponseEligibility()
    {
        for (int i = 0; i < this.dialogueTree.nodes.Count; i++)
        {
            this.dialogueTree.nodes[i].eligibleResponses = new List<DialogueResponse>();
            for (int j = 0; j < this.dialogueTree.nodes[i].responses.Count; j++)
            {
                if (this.dialogueTree.nodes[i].responses[j].conditions == string.Empty)
                {
                    this.dialogueTree.nodes[i].eligibleResponses.Add(this.dialogueTree.nodes[i].responses[j]);
                }
                else
                {
                    string[] array = this.dialogueTree.nodes[i].responses[j].conditions.Split(';');
                    bool flag = true;
                    for (int k = 0; k < array.Length; k++)
                    {
                        if (array[k].IndexOf("charvar[") != -1 || array[k].IndexOf("uservar[") != -1)
                        {
                            string label = array[k].Split('[')[1].Split(']')[0];
                            string text = array[k].Split(']')[1];
                            string text2 = string.Empty;
                            if (text.Substring(0, 2) == "==")
                            {
                                text2 = text.Substring(0, 2);
                            }
                            else if (text.Substring(0, 2) == "!=")
                            {
                                text2 = text.Substring(0, 2);
                            }
                            else if (text.Substring(0, 2) == ">=")
                            {
                                text2 = text.Substring(0, 2);
                            }
                            else if (text.Substring(0, 2) == "<=")
                            {
                                text2 = text.Substring(0, 2);
                            }
                            else if (text.Substring(0, 1) == ">")
                            {
                                text2 = text.Substring(0, 1);
                            }
                            else if (text.Substring(0, 1) == "<")
                            {
                                text2 = text.Substring(0, 1);
                            }
                            float num = float.Parse(text.Substring(text2.Length));
                            float num2 = 0f;
                            num2 = ((array[k].IndexOf("charvar[") == -1) ? UserSettings.getUserVar(label) : Inventory.getCharVar(label));
                            if (text.Substring(0, 2) == "==")
                            {
                                flag = (flag && num2 == num);
                            }
                            else if (text.Substring(0, 2) == "!=")
                            {
                                flag = (flag && num2 != num);
                            }
                            else if (text.Substring(0, 2) == ">=")
                            {
                                flag = (flag && num2 >= num);
                            }
                            else if (text.Substring(0, 2) == "<=")
                            {
                                flag = (flag && num2 <= num);
                            }
                            else if (text.Substring(0, 1) == ">")
                            {
                                flag = (flag && num2 > num);
                            }
                            else if (text.Substring(0, 1) == "<")
                            {
                                flag = (flag && num2 < num);
                            }
                        }
                        if (!flag)
                        {
                            break;
                        }
                    }
                    if (flag)
                    {
                        this.dialogueTree.nodes[i].eligibleResponses.Add(this.dialogueTree.nodes[i].responses[j]);
                    }
                }
            }
        }
    }

    public void saveDialogue()
    {
        if (!this.rebuildingDialogueEditor)
        {
            DialogueTree dialogueTree = new DialogueTree();
            for (int i = 0; i < this.DialogueNodes.Count; i++)
            {
                dialogueTree.nodes.Add(new DialogueNode());
                dialogueTree.nodes[i].id = ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtID")).GetComponent<Text>().text;
                dialogueTree.nodes[i].phrase = ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtPhrase")).GetComponent<InputField>().text;
                bool flag = false;
                for (int j = 0; j < Localization.data.phrases.Count; j++)
                {
                    if (Localization.data.phrases[j].id == dialogueTree.nodes[i].phrase)
                    {
                        flag = true;
                        if (Localization.data.phrases[j].english != ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtEnglish")).GetComponent<InputField>().text)
                        {
                            Localization.data.phrases[j].english = ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtEnglish")).GetComponent<InputField>().text;
                            if (!this.modifiedDialoguePhrases.Contains(Localization.data.phrases[j].id) && ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtEnglish")).GetComponent<InputField>().text != string.Empty)
                            {
                                UnityEngine.Debug.Log("Adding to modified list: " + Localization.data.phrases[j].id);
                                this.modifiedDialoguePhrases.Add(Localization.data.phrases[j].id);
                            }
                        }
                    }
                }
                if (!flag)
                {
                    Phrases phrases = new Phrases();
                    phrases.id = dialogueTree.nodes[i].phrase;
                    phrases.english = ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtEnglish")).GetComponent<InputField>().text;
                    Localization.data.phrases.Add(phrases);
                    UnityEngine.Debug.Log("Added new phrase");
                    if (!this.modifiedDialoguePhrases.Contains(Localization.data.phrases[Localization.data.phrases.Count - 1].id) && phrases.english != string.Empty)
                    {
                        UnityEngine.Debug.Log("Adding to modified list: " + Localization.data.phrases[Localization.data.phrases.Count - 1].id);
                        this.modifiedDialoguePhrases.Add(Localization.data.phrases[Localization.data.phrases.Count - 1].id);
                    }
                }
                for (int k = 0; k < this.curDialogueTree.nodes.Count; k++)
                {
                    if (this.curDialogueTree.nodes[k].id == dialogueTree.nodes[i].id)
                    {
                        dialogueTree.nodes[i].editorX = this.curDialogueTree.nodes[k].editorX;
                        dialogueTree.nodes[i].editorY = this.curDialogueTree.nodes[k].editorY;
                    }
                }
                for (int l = 0; l < this.DialogueResponses.Count; l++)
                {
                    if (((UnityEngine.Component)this.DialogueResponses[l].transform.parent.Find("txtID")).GetComponent<Text>().text == dialogueTree.nodes[i].id)
                    {
                        dialogueTree.nodes[i].responses.Add(new DialogueResponse());
                        dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].id = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtID")).GetComponent<Text>().text;
                        dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].phrase = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtPhrase")).GetComponent<InputField>().text;
                        flag = false;
                        for (int m = 0; m < Localization.data.phrases.Count; m++)
                        {
                            if (Localization.data.phrases[m].id == dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].phrase)
                            {
                                flag = true;
                                if (Localization.data.phrases[m].english != ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtEnglish")).GetComponent<InputField>().text)
                                {
                                    Localization.data.phrases[m].english = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtEnglish")).GetComponent<InputField>().text;
                                    if (!this.modifiedDialoguePhrases.Contains(Localization.data.phrases[m].id) && ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtEnglish")).GetComponent<InputField>().text != string.Empty)
                                    {
                                        UnityEngine.Debug.Log("Adding to modified list: " + Localization.data.phrases[m].id);
                                        this.modifiedDialoguePhrases.Add(Localization.data.phrases[m].id);
                                    }
                                }
                            }
                        }
                        if (!flag)
                        {
                            Phrases phrases2 = new Phrases();
                            phrases2.id = dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].phrase;
                            phrases2.english = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtEnglish")).GetComponent<InputField>().text;
                            Localization.data.phrases.Add(phrases2);
                            UnityEngine.Debug.Log("Added new phrase");
                            if (!this.modifiedDialoguePhrases.Contains(Localization.data.phrases[Localization.data.phrases.Count - 1].id) && phrases2.english != string.Empty)
                            {
                                UnityEngine.Debug.Log("Adding to modified list: " + Localization.data.phrases[Localization.data.phrases.Count - 1].id);
                                this.modifiedDialoguePhrases.Add(Localization.data.phrases[Localization.data.phrases.Count - 1].id);
                            }
                        }
                        if (((UnityEngine.Component)this.DialogueResponses[l].transform.Find("ddTarget")).GetComponent<Dropdown>().options.Count > 0)
                        {
                            dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].target = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("ddTarget")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.DialogueResponses[l].transform.Find("ddTarget")).GetComponent<Dropdown>().value].text.Split(':')[0];
                        }
                        else
                        {
                            dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].target = string.Empty;
                        }
                        dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].conditions = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtConditions")).GetComponent<InputField>().text;
                        dialogueTree.nodes[i].responses[dialogueTree.nodes[i].responses.Count - 1].functions = ((UnityEngine.Component)this.DialogueResponses[l].transform.Find("txtFunctions")).GetComponent<InputField>().text;
                    }
                }
            }
            this.curDialogueTree = dialogueTree;
            Dialogue.exportDialogue(this.curDialogueTree, this.curDialogueFilename);
        }
    }

    public void saveAndUpdateDialogue()
    {
        this.saveDialogue();
        this.updateDialogueEditor();
    }

    public void updateDialogueThenSave()
    {
        this.updateDialogueEditor();
        this.saveDialogue();
    }

    public void deleteDialogueNode(GameObject node)
    {
        string text = ((UnityEngine.Component)node.transform.Find("txtID")).GetComponent<Text>().text;
        int num = 0;
        while (num < this.curDialogueTree.nodes.Count)
        {
            if (!(text == this.curDialogueTree.nodes[num].id))
            {
                num++;
                continue;
            }
            this.curDialogueTree.nodes.RemoveAt(num);
            break;
        }
        this.updateDialogueThenSave();
    }

    public void deleteDialogueResponse(GameObject response)
    {
        string text = ((UnityEngine.Component)response.transform.Find("txtID")).GetComponent<Text>().text;
        for (int i = 0; i < this.curDialogueTree.nodes.Count; i++)
        {
            int num = 0;
            while (num < this.curDialogueTree.nodes[i].responses.Count)
            {
                if (!(text == this.curDialogueTree.nodes[i].responses[num].id))
                {
                    num++;
                    continue;
                }
                this.curDialogueTree.nodes[i].responses.RemoveAt(num);
                i = this.curDialogueTree.nodes.Count;
                break;
            }
        }
        this.updateDialogueThenSave();
    }

    public void addDialogueNode()
    {
        this.curDialogueTree.nodes.Add(new DialogueNode());
        this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].id = this.curDialogueTree.nodes.Count.ToString();
        this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].phrase = "DIALOGUENODE." + this.curDialogueFilename + "." + (this.curDialogueTree.nodes.Count - 1);
        this.updateDialogueThenSave();
        this.checkDialogueEditorForOverlap();
    }

    public void addDialogueResponse(GameObject toNode)
    {
        string text = ((UnityEngine.Component)toNode.transform.Find("txtID")).GetComponent<Text>().text;
        for (int i = 0; i < this.curDialogueTree.nodes.Count; i++)
        {
            if (this.curDialogueTree.nodes[i].id == text)
            {
                string text2 = (this.getTotalNumberOfResponses(this.curDialogueTree) + 1).ToString();
                this.curDialogueTree.nodes[i].responses.Add(new DialogueResponse());
                this.curDialogueTree.nodes[i].responses[this.curDialogueTree.nodes[i].responses.Count - 1].id = text2;
                this.curDialogueTree.nodes[i].responses[this.curDialogueTree.nodes[i].responses.Count - 1].phrase = "DIALOGUERESPONSE." + this.curDialogueFilename + "." + text2;
            }
        }
        this.updateDialogueThenSave();
        this.checkDialogueEditorForOverlap();
    }

    public int getTotalNumberOfResponses(DialogueTree tree)
    {
        int num = 0;
        for (int i = 0; i < tree.nodes.Count; i++)
        {
            for (int j = 0; j < tree.nodes[i].responses.Count; j++)
            {
                if (int.Parse(tree.nodes[i].responses[j].id) > num)
                {
                    num = int.Parse(tree.nodes[i].responses[j].id);
                }
            }
        }
        return num;
    }

    public void addDialogue()
    {
        if (((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("txtNew")).GetComponent<InputField>().text != string.Empty)
        {
            Dialogue.exportDialogue(new DialogueTree(), ((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("txtNew")).GetComponent<InputField>().text);
        }
        ((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("txtNew")).GetComponent<InputField>().text = string.Empty;
        this.updateDialogueFiles();
    }

    public void switchDialogueTrees()
    {
        this.curDialogueTree = Dialogue.importDialogue(((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().value].text, false);
        if (this.curDialogueFilename != ((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().value].text)
        {
            this.curDialogueFilename = ((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().value].text;
            this.dialogueEditorPanX = 0f;
            this.dialogueEditorPanY = 0f;
            this.dialogueEditorZoom = 1f;
        }
        bool flag = false;
        int num = 0;
        while (num < this.curDialogueTree.nodes.Count)
        {
            if (!(this.curDialogueTree.nodes[num].id == "ENTRY"))
            {
                num++;
                continue;
            }
            flag = true;
            break;
        }
        if (!flag)
        {
            this.curDialogueTree.nodes.Add(new DialogueNode());
            this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].id = "ENTRY";
            this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].phrase = string.Empty;
            string id = (this.getTotalNumberOfResponses(this.curDialogueTree) + 1).ToString();
            this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].responses.Add(new DialogueResponse());
            this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].responses[this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].responses.Count - 1].id = id;
            this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].responses[this.curDialogueTree.nodes[this.curDialogueTree.nodes.Count - 1].responses.Count - 1].phrase = string.Empty;
        }
        this.updateDialogueEditor();
    }

    private void updateDialogueEditor()
    {
        if (!this.rebuildingDialogueEditor)
        {
            this.rebuildingDialogueEditor = true;
            if ((UnityEngine.Object)this.DialogueNodeTemplate == (UnityEngine.Object)null)
            {
                this.DialogueNodeTemplate = this.EditorUI.transform.Find("DialogueEditor").Find("Nodes").Find("NodeTemplate")
                    .gameObject;
                this.DialogueResponseTemplate = this.EditorUI.transform.Find("DialogueEditor").Find("Nodes").Find("ResponseTemplate")
                    .gameObject;
                this.DialogueNodeTemplate.SetActive(false);
                this.DialogueResponseTemplate.SetActive(false);
            }
            for (int i = 0; i < this.DialogueNodes.Count; i++)
            {
                UnityEngine.Object.Destroy(this.DialogueNodes[i]);
            }
            for (int j = 0; j < this.DialogueResponses.Count; j++)
            {
                UnityEngine.Object.Destroy(this.DialogueResponses[j]);
            }
            this.DialogueNodes = new List<GameObject>();
            this.DialogueResponses = new List<GameObject>();
            this.DialogueNodeTemplate.SetActive(true);
            this.DialogueResponseTemplate.SetActive(true);
            this.dialogueNodeOptions = new List<Dropdown.OptionData>();
            this.dialogueNodeOptions.Add(new Dropdown.OptionData());
            this.dialogueNodeOptions[this.dialogueNodeOptions.Count - 1].text = "EXIT";
            for (int k = 0; k < this.curDialogueTree.nodes.Count; k++)
            {
                if (this.curDialogueTree.nodes[k].id != "ENTRY")
                {
                    this.dialogueNodeOptions.Add(new Dropdown.OptionData());
                    this.dialogueNodeOptions[this.dialogueNodeOptions.Count - 1].text = this.curDialogueTree.nodes[k].id + ": " + Localization.getPhrase(this.curDialogueTree.nodes[k].phrase, "english");
                }
            }
            for (int l = 0; l < this.curDialogueTree.nodes.Count; l++)
            {
                GameObject gameObject = UnityEngine.Object.Instantiate(this.DialogueNodeTemplate);
                gameObject.transform.SetParent(this.DialogueNodeTemplate.transform.parent);
                this.v3.x = this.curDialogueTree.nodes[l].editorX;
                this.v3.y = this.curDialogueTree.nodes[l].editorY;
                this.v3.z = 0f;
                gameObject.transform.localPosition = this.v3;
                ((UnityEngine.Component)gameObject.transform.Find("txtID")).GetComponent<Text>().text = this.curDialogueTree.nodes[l].id;
                if (this.curDialogueTree.nodes[l].id == "ENTRY")
                {
                    gameObject.transform.Find("txtPhrase").gameObject.SetActive(false);
                    gameObject.transform.Find("txtEnglish").gameObject.SetActive(false);
                }
                else
                {
                    gameObject.transform.Find("txtEntry").gameObject.SetActive(false);
                    ((UnityEngine.Component)gameObject.transform.Find("txtPhrase")).GetComponent<InputField>().text = this.curDialogueTree.nodes[l].phrase;
                    if (Localization.getPhrase(this.curDialogueTree.nodes[l].phrase, "english") != this.curDialogueTree.nodes[l].phrase)
                    {
                        ((UnityEngine.Component)gameObject.transform.Find("txtEnglish")).GetComponent<InputField>().text = Localization.getPhrase(this.curDialogueTree.nodes[l].phrase, "english");
                    }
                }
                this.DialogueNodes.Add(gameObject);
                for (int m = 0; m < this.curDialogueTree.nodes[l].responses.Count; m++)
                {
                    GameObject gameObject2 = UnityEngine.Object.Instantiate(this.DialogueResponseTemplate);
                    gameObject2.transform.SetParent(gameObject.transform);
                    gameObject2.transform.localScale = Vector3.one;
                    this.v3.x = 0f;
                    this.v3.y = -42f - this.dialogueEditorResponseWindowHeight * (float)m;
                    this.v3.z = 0f;
                    gameObject2.transform.localPosition = this.v3;
                    ((UnityEngine.Component)gameObject2.transform.Find("txtID")).GetComponent<Text>().text = this.curDialogueTree.nodes[l].responses[m].id;
                    ((UnityEngine.Component)gameObject2.transform.Find("txtPhrase")).GetComponent<InputField>().text = this.curDialogueTree.nodes[l].responses[m].phrase;
                    ((UnityEngine.Component)gameObject2.transform.Find("txtConditions")).GetComponent<InputField>().text = this.curDialogueTree.nodes[l].responses[m].conditions;
                    ((UnityEngine.Component)gameObject2.transform.Find("txtFunctions")).GetComponent<InputField>().text = this.curDialogueTree.nodes[l].responses[m].functions;
                    if (Localization.getPhrase(this.curDialogueTree.nodes[l].responses[m].phrase, "english") != this.curDialogueTree.nodes[l].responses[m].phrase)
                    {
                        ((UnityEngine.Component)gameObject2.transform.Find("txtEnglish")).GetComponent<InputField>().text = Localization.getPhrase(this.curDialogueTree.nodes[l].responses[m].phrase, "english");
                    }
                    ((UnityEngine.Component)gameObject2.transform.Find("ddTarget")).GetComponent<Dropdown>().options = this.dialogueNodeOptions;
                    bool flag = false;
                    for (int n = 0; n < this.dialogueNodeOptions.Count; n++)
                    {
                        if (this.dialogueNodeOptions[n].text.Split(':')[0] == this.curDialogueTree.nodes[l].responses[m].target)
                        {
                            ((UnityEngine.Component)gameObject2.transform.Find("ddTarget")).GetComponent<Dropdown>().value = n;
                            flag = true;
                        }
                    }
                    if (!flag && this.dialogueNodeOptions.Count > 0)
                    {
                        ((UnityEngine.Component)gameObject2.transform.Find("ddTarget")).GetComponent<Dropdown>().value = 0;
                        this.curDialogueTree.nodes[l].responses[m].target = this.dialogueNodeOptions[0].text.Split(':')[0];
                    }
                    this.DialogueResponses.Add(gameObject2);
                }
            }
            this.DialogueNodeTemplate.SetActive(false);
            this.DialogueResponseTemplate.SetActive(false);
            this.checkDialogueEditorForOverlap();
            this.rebuildingDialogueEditor = false;
        }
    }

    public void updateDialogueEditorLines()
    {
        for (int i = 0; i < this.DialogueResponses.Count; i++)
        {
            this.DialogueResponses[i].GetComponent<LineRenderer>().useWorldSpace = false;
            this.DialogueResponses[i].GetComponent<LineRenderer>().startWidth = 0.05f;
            this.DialogueResponses[i].GetComponent<LineRenderer>().endWidth = 0.05f;
            this.v3 = this.DialogueResponses[i].transform.Find("linkStart").localPosition;
            this.v3.z += 100f;
            this.DialogueResponses[i].GetComponent<LineRenderer>().SetPosition(0, this.v3);
            this.v3 = this.DialogueResponses[i].transform.Find("linkStart").localPosition;
            this.v3.z += 100f;
            this.DialogueResponses[i].GetComponent<LineRenderer>().SetPosition(1, this.v3);
            if (((UnityEngine.Component)this.DialogueResponses[i].transform.Find("ddTarget")).GetComponent<Dropdown>().options.Count > 0)
            {
                for (int j = 0; j < this.DialogueNodes.Count; j++)
                {
                    if (((UnityEngine.Component)this.DialogueNodes[j].transform.Find("txtID")).GetComponent<Text>().text == ((UnityEngine.Component)this.DialogueResponses[i].transform.Find("ddTarget")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.DialogueResponses[i].transform.Find("ddTarget")).GetComponent<Dropdown>().value].text.Split(':')[0])
                    {
                        this.v3 = this.DialogueNodes[j].transform.localPosition - this.DialogueResponses[i].transform.parent.localPosition - this.DialogueResponses[i].transform.localPosition + this.DialogueNodes[j].transform.Find("linkEnd").localPosition;
                        this.v3.z += 100f;
                        this.DialogueResponses[i].GetComponent<LineRenderer>().SetPosition(1, this.v3);
                    }
                }
            }
        }
    }

    public void beginDraggingDialogueNode(GameObject node)
    {
        if (!(((UnityEngine.Component)node.transform.Find("txtID")).GetComponent<Text>().text == "ENTRY"))
        {
            try
            {
                this.draggingDialogueNode = int.Parse(((UnityEngine.Component)node.transform.Find("txtID")).GetComponent<Text>().text);
            }
            catch
            {
                this.draggingDialogueNode = -1;
                return;
            }
            this.dialogueDragLastX = this.mX;
            this.dialogueDragLastY = this.mY;
        }
    }

    private void updateDialogueFiles()
    {
        new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "dialogue" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
        string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "dialogue" + Game.PathDirectorySeparatorChar + string.Empty, "*.rack2dialogue");
        if (files.Length == 0)
        {
            Dialogue.exportDialogue(new DialogueTree(), "receptionist");
        }
        files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "dialogue" + Game.PathDirectorySeparatorChar + string.Empty, "*.rack2dialogue");
        List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
        for (int i = 0; i < files.Length; i++)
        {
            list.Add(new Dropdown.OptionData());
            list[i].text = files[i].Split(Game.PathDirectorySeparatorChar)[files[i].Split(Game.PathDirectorySeparatorChar).Length - 1].Split('.')[0];
        }
        ((UnityEngine.Component)this.EditorUI.transform.Find("DialogueEditor").Find("ddDialogueFile")).GetComponent<Dropdown>().options = list;
    }

    public void checkDialogueEditorForOverlap()
    {
        bool flag = false;
        if (this.dialogueEditorNodeWindowWidth == 0f)
        {
            this.DialogueNodeTemplate.SetActive(true);
            this.DialogueResponseTemplate.SetActive(true);
            this.dialogueEditorNodeWindowWidth = ((UnityEngine.Component)this.DialogueNodeTemplate.transform.Find("bg")).GetComponent<RectTransform>().rect.width;
            this.dialogueEditorNodeWindowHeight = ((UnityEngine.Component)this.DialogueNodeTemplate.transform.Find("bg")).GetComponent<RectTransform>().rect.height;
            this.dialogueEditorResponseWindowWidth = ((UnityEngine.Component)this.DialogueResponseTemplate.transform.Find("bg")).GetComponent<RectTransform>().rect.width;
            this.dialogueEditorResponseWindowHeight = ((UnityEngine.Component)this.DialogueResponseTemplate.transform.Find("bg")).GetComponent<RectTransform>().rect.height;
            this.DialogueNodeTemplate.SetActive(false);
            this.DialogueResponseTemplate.SetActive(false);
        }
        for (int i = 0; i < this.DialogueNodes.Count; i++)
        {
            for (int j = i + 1; j < this.DialogueNodes.Count; j++)
            {
                if (this.dialogueNodesOverlapping(i, j))
                {
                    flag = true;
                }
            }
        }
        if (flag)
        {
            this.checkDialogueEditorForOverlap();
        }
    }

    public void toggleDialogueXMLDisplay()
    {
        this.showDialogueXMLdisplay = !this.showDialogueXMLdisplay;
        if (this.showDialogueXMLdisplay)
        {
            LocalizationData localizationData = new LocalizationData();
            for (int i = 0; i < Localization.data.phrases.Count; i++)
            {
                if (this.modifiedDialoguePhrases.IndexOf(Localization.data.phrases[i].id) != -1 && Localization.data.phrases[i].id != string.Empty)
                {
                    localizationData.phrases.Add(Localization.data.phrases[i]);
                }
            }
            XmlSerializer xmlSerializer = new XmlSerializer(typeof(LocalizationData));
            StringWriter stringWriter = new StringWriter();
            xmlSerializer.Serialize(stringWriter, localizationData);
            this.dialogueXMLdisplay.GetComponent<InputField>().text = stringWriter.ToString();
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("<localization xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n", string.Empty);
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("  <version>0</version>\r\n", string.Empty);
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("  <phrases>\r\n", string.Empty);
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("  </phrases>\r\n", string.Empty);
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("</localization>", string.Empty);
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("    <phrase id", "\t\t<phrase id");
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("    </phrase", "\t\t</phrase");
            this.dialogueXMLdisplay.GetComponent<InputField>().text = this.dialogueXMLdisplay.GetComponent<InputField>().text.Replace("      <english", "\t\t\t<english");
        }
    }

    private void processDialogueEditor()
    {
        this.EditorUI.transform.Find("DialogueEditor").gameObject.SetActive(this.editingDialogue);
        if ((UnityEngine.Object)this.unsavedChangesIndicator == (UnityEngine.Object)null)
        {
            this.unsavedChangesIndicator = this.EditorUI.transform.Find("DialogueEditor").Find("UnsavedChangesIndicator").gameObject;
        }
        if ((UnityEngine.Object)this.dialogueXMLdisplay == (UnityEngine.Object)null)
        {
            this.dialogueXMLdisplay = this.EditorUI.transform.Find("DialogueEditor").Find("txtXML").gameObject;
        }
        this.dialogueXMLdisplay.SetActive(this.showDialogueXMLdisplay);
        if (this.editingDialogue != this.dialogueEditorWasOpen)
        {
            if (this.editingDialogue)
            {
                this.updateDialogueFiles();
                this.switchDialogueTrees();
                this.updateDialogueEditor();
                this.toggleDialogueEditorCheatsheet();
                this.toggleDialogueEditorCheatsheet();
            }
            this.dialogueEditorWasOpen = this.editingDialogue;
        }
        if (this.editingDialogue)
        {
            if (Input.GetKey(KeyCode.LeftAlt))
            {
                float num = this.dialogueEditorZoom;
                Vector2 mouseScrollDelta = Input.mouseScrollDelta;
                this.dialogueEditorZoom = num * ((100f + mouseScrollDelta.y * 5f) / 100f);
            }
            if (!Input.GetMouseButton(0))
            {
                if (this.draggingDialogueNode != -1)
                {
                    this.saveDialogue();
                    this.checkDialogueEditorForOverlap();
                }
                this.draggingDialogueNode = -1;
            }
            if (this.draggingDialogueNode == -1 && Input.GetMouseButton(0) && !this.showDialogueXMLdisplay)
            {
                this.dialogueEditorPanX += (this.mX - this.dialogueDragLastX) * (float)Screen.width / this.dialogueEditorZoom;
                this.dialogueEditorPanY += (this.mY - this.dialogueDragLastY) * (float)Screen.height / this.dialogueEditorZoom;
            }
            this.v3.x = this.dialogueEditorPanX;
            this.v3.y = 0f - this.dialogueEditorPanY;
            this.v3.z = 0f;
            this.EditorUI.transform.Find("DialogueEditor").Find("Nodes").localPosition = this.v3;
            this.EditorUI.transform.Find("DialogueEditor").Find("Nodes").localScale = Vector3.one * this.dialogueEditorZoom;
            for (int i = 0; i < this.curDialogueTree.nodes.Count; i++)
            {
                if (this.draggingDialogueNode != -1 && ((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtID")).GetComponent<Text>().text != "ENTRY" && this.draggingDialogueNode == int.Parse(((UnityEngine.Component)this.DialogueNodes[i].transform.Find("txtID")).GetComponent<Text>().text))
                {
                    this.curDialogueTree.nodes[i].editorX += (this.mX - this.dialogueDragLastX) * (float)Screen.width / this.dialogueEditorZoom;
                    this.curDialogueTree.nodes[i].editorY += (this.mY - this.dialogueDragLastY) * (float)Screen.height / this.dialogueEditorZoom;
                }
                this.v3.x = this.curDialogueTree.nodes[i].editorX;
                this.v3.y = 0f - this.curDialogueTree.nodes[i].editorY;
                this.v3.z = 0f;
                this.DialogueNodes[i].transform.localPosition = this.v3;
                this.DialogueNodes[i].transform.localScale = Vector3.one;
            }
            this.updateDialogueEditorLines();
            this.dialogueDragLastX = this.mX;
            this.dialogueDragLastY = this.mY;
            this.unsavedChangesIndicator.SetActive(this.modifiedDialoguePhrases.Count > 0);
        }
    }

    public bool dialogueNodesOverlapping(int n, int o)
    {
        bool result = false;
        float num = this.dialogueEditorNodeWindowWidth;
        if (this.dialogueEditorResponseWindowWidth > this.dialogueEditorNodeWindowWidth)
        {
            num = this.dialogueEditorResponseWindowWidth;
        }
        float num2 = this.dialogueEditorNodeWindowHeight + this.dialogueEditorResponseWindowHeight * (float)this.curDialogueTree.nodes[n].responses.Count;
        float num3 = this.dialogueEditorNodeWindowWidth;
        if (this.dialogueEditorResponseWindowWidth > this.dialogueEditorNodeWindowWidth)
        {
            num3 = this.dialogueEditorResponseWindowWidth;
        }
        float num4 = this.dialogueEditorNodeWindowHeight + this.dialogueEditorResponseWindowHeight * (float)this.curDialogueTree.nodes[o].responses.Count;
        if (this.curDialogueTree.nodes[n].editorX + num >= this.curDialogueTree.nodes[o].editorX && this.curDialogueTree.nodes[n].editorX <= this.curDialogueTree.nodes[o].editorX + num3 && this.curDialogueTree.nodes[n].editorY + num2 >= this.curDialogueTree.nodes[o].editorY && this.curDialogueTree.nodes[n].editorY <= this.curDialogueTree.nodes[o].editorY + num4)
        {
            result = true;
            if (Math.Abs(this.curDialogueTree.nodes[n].editorY - this.curDialogueTree.nodes[o].editorY) > Math.Abs(this.curDialogueTree.nodes[n].editorX - this.curDialogueTree.nodes[o].editorX))
            {
                if (this.curDialogueTree.nodes[n].editorY > this.curDialogueTree.nodes[o].editorY)
                {
                    this.curDialogueTree.nodes[n].editorY = this.curDialogueTree.nodes[o].editorY + num4 + 16f;
                }
                else
                {
                    this.curDialogueTree.nodes[o].editorY = this.curDialogueTree.nodes[n].editorY + num2 + 16f;
                }
            }
            else if (this.curDialogueTree.nodes[n].editorX > this.curDialogueTree.nodes[o].editorX)
            {
                this.curDialogueTree.nodes[n].editorX = this.curDialogueTree.nodes[o].editorX + num3 + 16f;
            }
            else
            {
                this.curDialogueTree.nodes[o].editorX = this.curDialogueTree.nodes[n].editorX + num + 16f;
            }
        }
        return result;
    }

    private void processCharacters()
    {
        if (CharacterManager.corruptCharacterFiles.Count > 0 && !this.popupOpen && Localization.initted)
        {
            UnityEngine.Debug.Log("Translated: " + Localization.getPhrase("CHARACTER_FILE_CORRUPTED", string.Empty));
            string text = Localization.getPhrase("CHARACTER_FILE_CORRUPTED", string.Empty) + "\r\n\r\n";
            for (int i = 0; i < CharacterManager.corruptCharacterFiles.Count; i++)
            {
                text = text + CharacterManager.corruptCharacterFiles[i] + "\r\n";
            }
            this.popup(text, false, true);
            CharacterManager.corruptCharacterFiles = new List<string>();
        }
        if (this.needTeleportToHallway && !this.renderingHeadshot && !this.customizingCharacter && !this.anythingLoading && this.recentThinking <= 0f)
        {
            BagContent bagContent = new BagContent();
            bagContent.itemType = "BlackSlacks";
            bagContent.x = 1;
            bagContent.y = 0;
            bagContent.newItem = false;
            Inventory.getBagByName("CLOTHING").contents.Add(bagContent);
            bagContent = new BagContent();
            bagContent.itemType = "BlackButtonup";
            bagContent.x = 2;
            bagContent.y = 0;
            bagContent.newItem = false;
            Inventory.getBagByName("CLOTHING").contents.Add(bagContent);
            Inventory.getBagByName("CLOTHING").update();
            Inventory.saveInventoryData();
            this.PC().updateClothingBasedOnInventory();
            this.justTeleportedToHallway = 3f;
            this.needTeleportToHallway = false;
            this.PC().teleport(8.935f, -2.927f, 21.401f, -999f, false);
            this.v3 = this.PC().GO.transform.localEulerAngles;
            this.v3.y = 207f;
            this.PC().GO.transform.localEulerAngles = this.v3;
            this.currentZone = "Outside";
        }
        for (int j = 0; j < this.currentTestSubjects.Count; j++)
        {
            this.currentTestSubjects[j].frozen = (this.currentInteraction != null && !this.currentTestSubjects[j].isInteractionSubject && UserSettings.data.freezeOtherSubjectsWhileInteracting);
        }
        Game.loadingAnyCharacters = false;
        this.loadingAmount += (float)(NPC.queuedNPCsToBuild * RackCharacter.totalLoadSteps);
        for (int k = 0; k < this.characters.Count; k++)
        {
            this.characters[k].processRebuilding();
            if ((UnityEngine.Object)this.characters[k].npcData != (UnityEngine.Object)null && !this.characters[k].npcData.postBuildSetupComplete)
            {
                Game.loadingAnyCharacters = true;
                NPC.curNPCbuild = "NPC - " + this.characters[k].npcData.handle + Environment.NewLine + Localization.getPhrase(this.characters[k].loadProgressString, string.Empty);
            }
            if (!this.characters[k].initted || this.characters[k].rebuilding || this.characters[k].rebuildDelay > 0f)
            {
                Game.loadingAnyCharacters = true;
                if ((UnityEngine.Object)this.characters[k].npcData != (UnityEngine.Object)null)
                {
                    NPC.curNPCbuild = "NPC - " + this.characters[k].npcData.handle + Environment.NewLine + Localization.getPhrase(this.characters[k].loadProgressString, string.Empty);
                }
                else if (this.characters[k].controlledByPlayer)
                {
                    NPC.curNPCbuild = "Your Character" + Environment.NewLine + Localization.getPhrase(this.characters[k].loadProgressString, string.Empty);
                }
                else if (this.anyRandomCharsStillInitting || (this.characterSelectorOpen && this.randomCharactersForSelection.Count < Game.maxCharactersForSelector))
                {
                    NPC.curNPCbuild = "Subject [" + this.randomCharactersForSelection.Count + "/" + Game.maxCharactersForSelector + "]" + Environment.NewLine + Localization.getPhrase(this.characters[k].loadProgressString, string.Empty);
                }
                else
                {
                    NPC.curNPCbuild = "Characters";
                }
                this.loadedAmount += this.characters[k].loadStepsCompleted;
                this.loadingAmount += (float)RackCharacter.totalLoadSteps;
                this.anythingLoading = true;
            }
            else if ((UnityEngine.Object)this.characters[k].npcData != (UnityEngine.Object)null && this.characters[k].loadAccountedFor < 1f)
            {
                this.loadedAmount += (float)RackCharacter.totalLoadSteps;
                this.loadingAmount += (float)RackCharacter.totalLoadSteps;
            }
        }
        if (!this.anythingLoading)
        {
            for (int l = 0; l < this.characters.Count; l++)
            {
                this.characters[l].loadAccountedFor += Time.deltaTime * 2f;
            }
        }
        else
        {
            for (int m = 0; m < this.characters.Count; m++)
            {
                if (this.characters[m].loadAccountedFor < 1f)
                {
                    this.characters[m].loadAccountedFor = 0f;
                }
            }
        }
        if (this.customizingCharacter)
        {
            if (this.PC().interactingWithSelf)
            {
                ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("previewArousal")).GetComponent<Slider>().val += (this.PC().arousal - ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("previewArousal")).GetComponent<Slider>().val) * Time.deltaTime * 10f;
            }
            else
            {
                this.PC().arousal += (((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("previewArousal")).GetComponent<Slider>().val - this.PC().arousal) * Time.deltaTime * 10f;
            }
        }
        NPC.queuedNPCsToBuild = 0;
    }

    private void processEasterEggs()
    {
        if ((UnityEngine.Object)this.testHand == (UnityEngine.Object)null)
        {
            this.testHand = GameObject.Find("TestHand").transform;
        }
        this.testHand.gameObject.SetActive(Input.GetKey(KeyCode.LeftShift) && Game.allowShiftSphere);
        if (Input.GetKey(KeyCode.LeftShift) && this.PC() != null && Game.allowShiftSphere)
        {
            this.v3 = this.PC().bones.Root.position - this.mainCam.transform.position;
            this.v32 = this.mainCam.transform.position + this.v3 * this.testHandZ;
            this.v32 += this.mainCam.transform.right * (this.mX - 0.5f) * 8f;
            this.v32 += this.mainCam.transform.up * (this.mY - 0.5f) * -8f;
            if ((this.v32 - this.testHand.position).magnitude > 3f)
            {
                this.testHand.position = this.v32;
            }
            else
            {
                Transform transform = this.testHand;
                transform.position += (this.v32 - this.testHand.position) * Game.cap(Time.deltaTime * 4.5f, 0f, 1f);
            }
            if (Input.GetKey(KeyCode.R))
            {
                this.testHandZ += Time.deltaTime;
            }
            if (Input.GetKey(KeyCode.F))
            {
                this.testHandZ -= Time.deltaTime;
            }
            this.zoomAllowed = false;
        }
        if (Input.GetKey(KeyCode.B))
        {
            for (int i = 0; i < this.characters.Count; i++)
            {
                this.characters[i].arousal += Time.deltaTime;
                this.characters[i].stimulation += Time.deltaTime;
                this.characters[i].anticipation += Time.deltaTime;
                this.characters[i].orgasm += Time.deltaTime;
            }
        }
        bool flag = false;
        switch (this.konamiStep)
        {
            case 0:
                if (Input.GetKeyDown(KeyCode.UpArrow))
                {
                    flag = true;
                }
                break;
            case 1:
                if (Input.GetKeyDown(KeyCode.UpArrow))
                {
                    flag = true;
                }
                break;
            case 2:
                if (Input.GetKeyDown(KeyCode.DownArrow))
                {
                    flag = true;
                }
                break;
            case 3:
                if (Input.GetKeyDown(KeyCode.DownArrow))
                {
                    flag = true;
                }
                break;
            case 4:
                if (Input.GetKeyDown(KeyCode.LeftArrow))
                {
                    flag = true;
                }
                break;
            case 5:
                if (Input.GetKeyDown(KeyCode.RightArrow))
                {
                    flag = true;
                }
                break;
            case 6:
                if (Input.GetKeyDown(KeyCode.LeftArrow))
                {
                    flag = true;
                }
                break;
            case 7:
                if (Input.GetKeyDown(KeyCode.RightArrow))
                {
                    flag = true;
                }
                break;
            case 8:
                if (Input.GetKeyDown(KeyCode.B))
                {
                    flag = true;
                }
                break;
            case 9:
                if (Input.GetKeyDown(KeyCode.A))
                {
                    flag = true;
                }
                break;
        }
        if (Input.anyKeyDown)
        {
            if (flag)
            {
                this.konamiStep++;
            }
            else
            {
                this.konamiStep = 0;
            }
        }
        if (this.konamiStep == 10)
        {
            Game.bigHeadCheat = true;
            Game.rainbowJizzCheat = true;
        }
    }

    public static void PlaySFXAtPoint(AudioClip clip, Vector3 position, float vol = 1f)
    {
        AudioSource.PlayClipAtPoint(clip, position, vol * UserSettings.data.vol * UserSettings.data.volWorld);
    }

    public static void CopyComponent(UnityEngine.Component original, GameObject destination)
    {
        Type type = original.GetType();
        if (type != typeof(Transform))
        {
            UnityEngine.Component obj = destination.AddComponent(type);
            FieldInfo[] fields = type.GetFields();
            FieldInfo[] array = fields;
            foreach (FieldInfo fieldInfo in array)
            {
                fieldInfo.SetValue(obj, fieldInfo.GetValue(original));
            }
        }
    }

    public bool assignToApparatus(MenuOption mo)
    {
        MenuOption[] componentsInChildren = ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel")).GetComponentsInChildren<MenuOption>();
        for (int i = 0; i < componentsInChildren.Length; i++)
        {
            if (this.subjectRoomAssignments[this.characterSelector_currentSelected] == componentsInChildren[i].id1 && this.subjectApparatusAssignments[this.characterSelector_currentSelected] == componentsInChildren[i].id2)
            {
                if (this.subjectTypes[this.characterSelector_currentSelected] == 2)
                {
                    this.assignedCost -= (float)this.subjectValues[this.characterSelector_currentSelected];
                }
                this.subjectRoomAssignments[this.characterSelector_currentSelected] = -1;
                this.subjectApparatusAssignments[this.characterSelector_currentSelected] = -1;
                ((UnityEngine.Component)componentsInChildren[i].gameObject.transform.Find("Text")).GetComponent<Text>().color = Color.white;
            }
        }
        if (this.subjectTypes[this.characterSelector_currentSelected] == 2)
        {
            if (!((float)Inventory.data.money >= (float)this.subjectValues[this.characterSelector_currentSelected] + this.assignedCost))
            {
                this.charSelectCostErrorBuzz = 0.55f;
                this.playSound("ui_error", 1f, 1f);
                return false;
            }
            this.assignedCost += (float)this.subjectValues[this.characterSelector_currentSelected];
        }
        bool flag = false;
        Color color = ((UnityEngine.Component)mo.gameObject.transform.Find("Text")).GetComponent<Text>().color;
        if (color.r < 0.9f)
        {
            flag = true;
            this.playSound("ui_error", 1f, 1f);
        }
        if (!flag)
        {
            for (int j = 0; j < Game.maxCharactersForSelector; j++)
            {
                if (this.subjectRoomAssignments[j] == mo.id1 && this.subjectApparatusAssignments[j] == mo.id2)
                {
                    flag = true;
                    this.playSound("ui_error", 1f, 1f);
                }
            }
        }
        if (!flag)
        {
            this.subjectRoomAssignments[this.characterSelector_currentSelected] = mo.id1;
            this.subjectApparatusAssignments[this.characterSelector_currentSelected] = mo.id2;
            ((UnityEngine.Component)mo.gameObject.transform.Find("Text")).GetComponent<Text>().color = Color.white * 0.25f;
            this.playSound("ui_contextopen", 1f, 1f);
            this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("cmdBegin")
                .gameObject.SetActive(true);
        }
        return true;
    }

    public void prepareTestSubjects()
    {
        if (!this.fadingToFinishPreparingTestSubjects)
        {
            this.fadingToFinishPreparingTestSubjects = true;
            this.fadeToBlackThen(this.finishPreparingTestSubjects);
        }
    }

    public void finishPreparingTestSubjects()
    {
        this.playSound("submitTestSubjects", 1f, 1f);
        for (int i = 0; i < Game.maxCharactersForSelector; i++)
        {
            bool flag = false;
            if (this.subjectRoomAssignments[i] != -1)
            {
                flag = true;
                if (this.subjectTypes[i] == 2)
                {
                    if (Inventory.data.money >= this.subjectValues[i])
                    {
                        Inventory.data.money -= this.subjectValues[i];
                    }
                    else
                    {
                        flag = false;
                    }
                }
                if (this.subjectTypes[i] == 1)
                {
                    this.randomCharactersForSelection[i].satisfactionValue = (float)this.subjectValues[i];
                }
            }
            if (flag)
            {
                this.currentTestSubjects.Add(this.randomCharactersForSelection[i]);
                if (this.subjectTypes[i] == 1)
                {
                    SexualPreferences.createObjectivesForTestSubject(this.randomCharactersForSelection[i]);
                }
                for (int j = 0; j < this.World.transform.Find("Rooms").Find("Room" + this.subjectRoomAssignments[i]).childCount; j++)
                {
                    if (((UnityEngine.Component)this.World.transform.Find("Rooms").Find("Room" + this.subjectRoomAssignments[i]).GetChild(j)).GetComponent<LabItemInWorld>().index == this.subjectApparatusAssignments[i])
                    {
                        this.randomCharactersForSelection[i].hidden = false;
                        this.randomCharactersForSelection[i].leaveFurniture();
                        this.randomCharactersForSelection[i].delayedApparatusBind = ((UnityEngine.Component)this.World.transform.Find("Rooms").Find("Room" + this.subjectRoomAssignments[i]).GetChild(j)).GetComponent<BondageApparatus>();
                        this.randomCharactersForSelection[i].delayedApparatusTime = 1f;
                    }
                }
                Bag bag = new Bag();
                bag.name = this.randomCharactersForSelection[i].data.uid;
                bag.scale = 1;
                bag.sizeX = 5;
                bag.sizeY = 8;
                bag.contents = new List<BagContent>();
                bag.unlimited = true;
                Inventory.data.bags.Add(bag);
                Inventory.data.subjectbags.Add(this.randomCharactersForSelection[i].data.uid);
            }
            else
            {
                this.removeCharacter(this.randomCharactersForSelection[i]);
            }
        }
        this.randomCharactersForSelection = new List<RackCharacter>();
        this.characterSelectorOpen = false;
        this.fadingToFinishPreparingTestSubjects = false;
    }

    public static void saveDataToXML(string filename, Type typ, object data)
    {
        filename = filename.Replace('/', Game.PathDirectorySeparatorChar);
        try
        {
            XmlSerializer xmlSerializer = new XmlSerializer(typ);
            Encoding encoding = Encoding.GetEncoding("UTF-8");
            using (StreamWriter streamWriter = new StreamWriter(filename, false, encoding))
            {
                xmlSerializer.Serialize(streamWriter, data);
                streamWriter.Close();
            }
        }
        catch
        {
            UnityEngine.Debug.Log("Error saving data, it's probably already open somewhere else.");
        }
    }

    public void openEnjoymentPreview()
    {
    }

    public void enjoymentIconHover(int e)
    {
        switch (e)
        {
            case 0:
                if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_experiences"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue > 0.7f)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_EXPERIENCES_high", string.Empty), 0f, 20f, false);
                }
                else if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_experiences"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue > 0.3f)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_EXPERIENCES_normal", string.Empty), 0f, 20f, false);
                }
                else
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_EXPERIENCES_low", string.Empty), 0f, 20f, false);
                }
                break;
            case 1:
                if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_sensations"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue > 0.7f)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_SENSATIONS_high", string.Empty), 0f, 20f, false);
                }
                else if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_sensations"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue > 0.3f)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_SENSATIONS_normal", string.Empty), 0f, 20f, false);
                }
                else
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_SENSATIONS_low", string.Empty), 0f, 20f, false);
                }
                break;
            case 2:
                if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_attraction"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue > 0.7f)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_ATTRACTION_high", string.Empty), 0f, 20f, false);
                }
                else if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_attraction"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue > 0.3f)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_ATTRACTION_normal", string.Empty), 0f, 20f, false);
                }
                else
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                        .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_CATEGORY_ATTRACTION_low", string.Empty), 0f, 20f, false);
                }
                break;
        }
    }

    public void processCharacterSelector()
    {
        if (this.World.transform.Find("Lab").Find("stasisTube0").gameObject.activeInHierarchy)
        {
            if (!this.stasisParticlesInitted)
            {
                for (int i = 0; i < 6; i++)
                {
                    this.stasisParticles[i] = ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + i).Find("Particle System")).GetComponent<ParticleSystem>().main;
                }
                this.stasisParticlesInitted = true;
            }
            for (int j = 0; j < 6; j++)
            {
                bool occupied = ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<Furniture>().occupied;
                if (!this.stasisSFXstarted)
                {
                    this.stasisTubesWereOccupied[j] = !occupied;
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().pitch = 0.8f + UnityEngine.Random.value * 0.4f;
                }
                if (occupied != this.stasisTubesWereOccupied[j])
                {
                    this.stasisTubesWereOccupied[j] = occupied;
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().Stop();
                    if (occupied)
                    {
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().clip = (Resources.Load("stasis_tube_full") as AudioClip);
                        this.col.r = 0.160784319f;
                        this.col.g = 0.68235296f;
                        this.col.b = 0.7019608f;
                        this.col.a = 1f;
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j).Find("Point light")).GetComponent<Light>().color = this.col;
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j).Find("SubjectStasisPod.002")).GetComponent<MeshRenderer>().material = this.glowBlueMat;
                        this.col.r = 0f;
                        this.col.g = 0.081f;
                        this.col.b = 0.102f;
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j).Find("SubjectStasisPod.003")).GetComponent<MeshRenderer>().material.SetColor("_EmissionColor", this.col);
                        this.stasisParticles[j].startColor = Color.white;
                    }
                    else
                    {
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().clip = (Resources.Load("stasis_tube_empty") as AudioClip);
                        this.col.r = 0.9490196f;
                        this.col.g = 0.654902f;
                        this.col.b = 0.1254902f;
                        this.col.a = 1f;
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j).Find("Point light")).GetComponent<Light>().color = this.col;
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j).Find("SubjectStasisPod.002")).GetComponent<MeshRenderer>().material = this.glowOrangeMat;
                        this.col.r = 1f;
                        this.col.g = 0.807843149f;
                        this.col.b = 0f;
                        this.stasisParticles[j].startColor = this.col;
                        this.col.r = 0.102f;
                        this.col.g = 0.023f;
                        this.col.b = 0f;
                        ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j).Find("SubjectStasisPod.003")).GetComponent<MeshRenderer>().material.SetColor("_EmissionColor", this.col);
                    }
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().Play();
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().pitch = 0.8f + UnityEngine.Random.value * 0.4f;
                }
                if (this.characterSelectorOpen)
                {
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume += (0.7f - ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
                }
                else if (this.currentZone == "LabTower" || (this.currentZone == "LabTowerLower" && (!((UnityEngine.Component)this.World.transform.Find("Lab").Find("LabShaft").Find("Glass Sliding Door")).GetComponent<AutomaticSlidingDoor>().doorOpen || (j > 0 && j < 5))))
                {
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume += (0.06f - ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
                }
                else if (this.currentZone == "LabTower" || this.currentZone == "LabTowerLower")
                {
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume += (0.3f - ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
                }
                else
                {
                    ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume += (0.7f - ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + j)).GetComponent<AudioSource>().volume) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
                }
            }
            this.stasisSFXstarted = true;
        }
        if (this.PC() != null)
        {
            this.anyRandomCharsStillInitting = false;
            for (int k = 0; k < this.randomCharactersForSelection.Count; k++)
            {
                if (!this.randomCharactersForSelection[k].initted)
                {
                    this.anyRandomCharsStillInitting = true;
                }
                else if (this.randomCharactersForSelection[k].needsRandomize)
                {
                    this.anyRandomCharsStillInitting = true;
                    if ((UnityEngine.Object)this.randomCharactersForSelection[k].GO != (UnityEngine.Object)null && this.randomCharactersForSelection[k].initted && Game.gameInstance.recentThinking < 1f && !Game.gameInstance.anythingLoading && !this.randomCharactersForSelection[k].rebuilding)
                    {
                        this.randomCharactersForSelection[k].needsRandomize = false;
                        this.randomCharactersForSelection[k].addClothingPiece("RackChip");
                        this.randomCharactersForSelection[k].useFurniture(((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + k)).GetComponent<Furniture>());
                        Light component = ((UnityEngine.Component)this.World.transform.Find("Lab").Find("stasisTube" + k).Find("Point light")).GetComponent<Light>();
                        Vector3 localScale = this.World.transform.Find("Lab").Find("stasisTube" + k).localScale;
                        component.range = 9.5f + (localScale.x - 1f) * 4.5f;
                    }
                }
                else if ((UnityEngine.Object)this.randomCharactersForSelection[k].GO != (UnityEngine.Object)null && (UnityEngine.Object)this.randomCharactersForSelection[k].furniture == (UnityEngine.Object)null && this.randomCharactersForSelection[k].initted && Game.gameInstance.recentThinking < 1f && !Game.gameInstance.anythingLoading && !this.randomCharactersForSelection[k].rebuilding)
                {
                    this.anyRandomCharsStillInitting = true;
                }
            }
            if (!this.anyRandomCharsStillInitting)
            {
                if (this.randomCharactersForSelection.Count < Game.maxCharactersForSelector)
                {
                    if (this.characterSelectorOpen)
                    {
                        if (this.randomCharactersForSelection.Count == 0)
                        {
                            this.subjectTypes = new List<int>();
                            if (UserSettings.needTutorial("NPT_BRING_YOURSELF_TO_ORGASM"))
                            {
                                this.subjectTypes.Add(0);
                                this.subjectTypes.Add(0);
                                this.subjectTypes.Add(0);
                                this.subjectTypes.Add(0);
                                this.subjectTypes.Add(0);
                                this.subjectTypes.Add(0);
                            }
                            else if (UserSettings.needTutorial("NPT_SAVE_MONEY_FOR_MSS"))
                            {
                                this.subjectTypes.Add(1);
                                this.subjectTypes.Add(1);
                                this.subjectTypes.Add(1);
                                this.subjectTypes.Add(1);
                                this.subjectTypes.Add(1);
                                this.subjectTypes.Add(1);
                            }
                            else
                            {
                                this.subjectTypes.Add(0);
                                this.subjectTypes.Add(1);
                                this.subjectTypes.Add(2);
                                float num = 1f + UnityEngine.Random.value + Inventory.data.labReputation;
                                num -= 1.6f;
                                for (int l = 0; l < 3; l++)
                                {
                                    if (num < 0f)
                                    {
                                        this.subjectTypes.Add(2);
                                    }
                                    else if (num < 2f)
                                    {
                                        this.subjectTypes.Add(0);
                                    }
                                    else
                                    {
                                        this.subjectTypes.Add(1);
                                    }
                                    num += 0.6f;
                                }
                            }
                            this.subjectValues = new List<int>();
                            for (int m = 0; m < Game.maxCharactersForSelector; m++)
                            {
                                this.subjectValues.Add(175 + Mathf.RoundToInt(UnityEngine.Random.value * 20f) * 10);
                                if (this.subjectTypes[m] == 1)
                                {
                                    List<int> list;
                                    int index;
                                    (list = this.subjectValues)[index = m] = list[index] * 2;
                                }
                            }
                        }
                        float num2 = UnityEngine.Random.value * (0.5f + UserSettings.data.customCharacterFrequency + UserSettings.data.favoriteCharacterFrequency + UserSettings.data.racknetCharacterFrequency);
                        if (num2 < UserSettings.data.customCharacterFrequency)
                        {
                            new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + "custom" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
                            string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + "custom" + Game.PathDirectorySeparatorChar + string.Empty, "*.rack2character");
                            if (files.Length == 0)
                            {
                                this.randomCharactersForSelection.Add(RandomCharacterGenerator.createRandomCharacter(true));
                            }
                            else
                            {
                                int num3 = Mathf.FloorToInt(UnityEngine.Random.value * (float)files.Length * 2f) % files.Length;
                                this.randomCharactersForSelection.Add(new RackCharacter(this, CharacterManager.importCharacterData(files[num3], true), false, null, 0f, string.Empty));
                                this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].loadedFromExternal = 1;
                            }
                            this.addCharacter(this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1]);
                            this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].needsRandomize = true;
                        }
                        else if (num2 - UserSettings.data.customCharacterFrequency < UserSettings.data.favoriteCharacterFrequency)
                        {
                            this.cleanUpFavorites();
                            if (Inventory.data.favoriteCharacters.Count == 0)
                            {
                                this.randomCharactersForSelection.Add(RandomCharacterGenerator.createRandomCharacter(true));
                            }
                            else
                            {
                                int index2 = Mathf.FloorToInt(UnityEngine.Random.value * (float)Inventory.data.favoriteCharacters.Count * 2f) % Inventory.data.favoriteCharacters.Count;
                                this.randomCharactersForSelection.Add(new RackCharacter(this, CharacterManager.importCharacterData(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty + Inventory.data.favoriteCharacters[index2] + ".rack2character", true), false, null, 0f, string.Empty));
                                this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].loadedFromExternal = 2;
                            }
                            this.addCharacter(this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1]);
                            this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].needsRandomize = true;
                        }
                        else if (num2 - UserSettings.data.customCharacterFrequency - UserSettings.data.favoriteCharacterFrequency < UserSettings.data.racknetCharacterFrequency && RacknetMultiplayer.lobbyConnectionStatus == 5)
                        {
                            if (UserSettings.RNcacheData.racknetCharacterCache.Count == 0)
                            {
                                this.randomCharactersForSelection.Add(RandomCharacterGenerator.createRandomCharacter(true));
                            }
                            else
                            {
                                int index3 = Mathf.FloorToInt(UnityEngine.Random.value * (float)UserSettings.RNcacheData.racknetCharacterCache.Count * 2f) % UserSettings.RNcacheData.racknetCharacterCache.Count;
                                string racknetCharacter = RacknetMultiplayer.getRacknetCharacter(UserSettings.RNcacheData.racknetCharacterCache[index3]);
                                this.randomCharactersForSelection.Add(new RackCharacter(this, null, false, null, 0f, racknetCharacter));
                                this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].loadedFromExternal = 3;
                                this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].racknetAccountID = UserSettings.RNcacheData.racknetCharacterCache[index3].Split('.')[0];
                                this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].racknetID = UserSettings.RNcacheData.racknetCharacterCache[index3];
                            }
                            this.addCharacter(this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1]);
                            this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].needsRandomize = true;
                        }
                        else
                        {
                            this.randomCharactersForSelection.Add(RandomCharacterGenerator.createRandomCharacter(true));
                            this.addCharacter(this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1]);
                            this.randomCharactersForSelection[this.randomCharactersForSelection.Count - 1].needsRandomize = true;
                        }
                    }
                }
                else
                {
                    for (int n = 0; n < this.randomCharactersForSelection.Count; n++)
                    {
                        this.randomCharactersForSelection[n].hidden = (!this.World.transform.Find("Lab").gameObject.activeInHierarchy || (n != this.characterSelector_currentSelected && n != (this.characterSelector_currentSelected + 5) % 6));
                    }
                }
            }
            if (this.characterSelectorOpen && this.randomCharactersForSelection.Count == Game.maxCharactersForSelector)
            {
                this.showCurrency = true;
                this.showBackButton = true;
                this.UI.transform.Find("CharacterSelector").gameObject.SetActive(true);
                this.v3 = this.UI.transform.Find("CharacterSelector").Find("RightPanel").localEulerAngles;
                this.v3.y += (30f - this.v3.y) * Game.cap(Time.deltaTime * 7f, 0f, 1f);
                this.UI.transform.Find("CharacterSelector").Find("RightPanel").localEulerAngles = this.v3;
                if (!this.wasCharacterSelectorOpen)
                {
                    this.subjectRoomAssignments = new List<int>();
                    this.subjectApparatusAssignments = new List<int>();
                    for (int num4 = 0; num4 < Game.maxCharactersForSelector; num4++)
                    {
                        this.subjectValues.Add(150 + Mathf.RoundToInt(UnityEngine.Random.value * 20f) * 10);
                        this.subjectRoomAssignments.Add(-1);
                        this.subjectApparatusAssignments.Add(-1);
                    }
                    this.assignedCost = 0f;
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("cmdBegin")
                        .gameObject.SetActive(false);
                    for (int num5 = 0; num5 < 3; num5++)
                    {
                        LabItemInWorld[] componentsInChildren = ((UnityEngine.Component)this.World.transform.Find("Rooms").Find("Room" + num5)).GetComponentsInChildren<LabItemInWorld>();
                        int num6 = 0;
                        for (int num7 = 0; num7 < LayoutManager.getLayoutByName(LayoutManager.data.activeLayouts[num5]).items.Count; num7++)
                        {
                            if (Inventory.getItemDefinition(LayoutManager.getLayoutByName(LayoutManager.data.activeLayouts[num5]).items[num7].assetName).category == "BONDAGE_APPARATUS")
                            {
                                if ((UnityEngine.Object)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                    .Find("cmd" + num6) == (UnityEngine.Object)null)
                                {
                                    GameObject gameObject = UnityEngine.Object.Instantiate(this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                        .Find("cmd" + (num6 - 1))
                                        .gameObject);
                                    gameObject.transform.SetParent(this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                        .Find("cmd" + (num6 - 1))
                                        .parent);
                                    gameObject.name = "cmd" + num6;
                                    gameObject.transform.localScale = this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                        .Find("cmd" + (num6 - 1))
                                        .localScale;
                                    gameObject.transform.localEulerAngles = this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                        .Find("cmd" + (num6 - 1))
                                        .localEulerAngles;
                                    this.v3 = this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                        .Find("cmd" + (num6 - 1))
                                        .localPosition;
                                    this.v3 += this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                        .Find("cmd" + (num6 - 1))
                                        .localPosition - this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                            .Find("cmd" + (num6 - 2))
                                            .localPosition;
                                    gameObject.transform.localPosition = this.v3;
                                }
                                this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                    .Find("cmd" + num6)
                                    .gameObject.SetActive(true);
                                for (int num8 = 0; num8 < componentsInChildren.Length; num8++)
                                {
                                    if (componentsInChildren[num8].index == num7)
                                    {
                                        if (((UnityEngine.Component)componentsInChildren[num8]).GetComponent<BondageApparatus>().boundCharacter == null)
                                        {
                                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                                .Find("cmd" + num6)
                                                .Find("Text")).GetComponent<Text>().color = Color.white;
                                        }
                                        else
                                        {
                                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                                .Find("cmd" + num6)
                                                .Find("Text")).GetComponent<Text>().color = Color.white * 0.25f;
                                        }
                                    }
                                }
                                                                ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                                                    .Find("cmd" + num6)).GetComponent<MenuOption>().callback = this.assignToApparatus;
                                ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                    .Find("cmd" + num6)).GetComponent<MenuOption>().id1 = num5;
                                ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                    .Find("cmd" + num6)).GetComponent<MenuOption>().id2 = num7;
                                ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                    .Find("cmd" + num6)).GetComponent<MenuOption>().forcedTextKey = Inventory.getItemDefinition(LayoutManager.getLayoutByName(LayoutManager.data.activeLayouts[num5]).items[num7].assetName).displayName;
                                num6++;
                            }
                        }
                        for (int num9 = num6; num9 < 100 && !((UnityEngine.Object)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                            .Find("cmd" + num9) == (UnityEngine.Object)null); num9++)
                        {
                            this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("Room" + num5)
                                .Find("cmd" + num9)
                                .gameObject.SetActive(false);
                        }
                    }
                }
                if (this.showingPrefs)
                {
                    this.preferenceDisplayX += (0.5f - this.preferenceDisplayX) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                }
                else
                {
                    this.preferenceDisplayX += (0.25f - this.preferenceDisplayX) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                }
                if (this.mX > this.preferenceDisplayX)
                {
                    if (this.showingPrefs)
                    {
                        UISFX.playHover();
                        this.updateSubjectPreferencePreview(true);
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(string.Empty, 0f, 1f, false);
                    }
                }
                else if (!this.showingPrefs)
                {
                    UISFX.playHover();
                    this.updateSubjectPreferencePreview(false);
                }
                                                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("leftBlacker")).GetComponent<Image>().color = Color.black * Game.cap((this.preferenceDisplayX + 0.05f - this.mX) * 15f, 0f, 0.8f);
                this.randomCharactersForSelection[this.characterSelector_currentSelected].lastForeskinOverlap = -1f;
                this.UI.transform.Find("CharacterSelector").Find("LeftPanel").gameObject.SetActive(this.subjectRoomAssignments[this.characterSelector_currentSelected] != -1 && !this.showingPrefs);
                this.v3 = Vector3.one * this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_sensations"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue;
                this.v3 += (Vector3.one - this.v3) * 0.25f;
                Transform transform = this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                    .Find("sensation");
                transform.localScale += (this.v3 - this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                    .Find("sensation")
                    .localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                this.v3 = Vector3.one * this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_experiences"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue;
                this.v3 += (Vector3.one - this.v3) * 0.25f;
                Transform transform2 = this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                    .Find("experience");
                transform2.localScale += (this.v3 - this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                    .Find("experience")
                    .localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                this.v3 = Vector3.one * this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences["category_attraction"] / this.randomCharactersForSelection[this.characterSelector_currentSelected].highestPreferenceCategoryValue;
                this.v3 += (Vector3.one - this.v3) * 0.25f;
                Transform transform3 = this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                    .Find("attraction");
                transform3.localScale += (this.v3 - this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                    .Find("attraction")
                    .localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                if (this.subjectRoomAssignments[this.characterSelector_currentSelected] != -1)
                {
                    this.v3 = this.UI.transform.Find("CharacterSelector").Find("LeftPanel").localScale;
                    this.v3 += (Vector3.one - this.v3) * Game.cap(Time.deltaTime * 3f, 0f, 1f);
                    this.UI.transform.Find("CharacterSelector").Find("LeftPanel").localScale = this.v3;
                    this.UI.transform.Find("CharacterSelector").Find("LeftPanel").Find("room0")
                        .gameObject.SetActive(this.subjectRoomAssignments[this.characterSelector_currentSelected] == 0);
                    this.UI.transform.Find("CharacterSelector").Find("LeftPanel").Find("room1")
                        .gameObject.SetActive(this.subjectRoomAssignments[this.characterSelector_currentSelected] == 1);
                    this.UI.transform.Find("CharacterSelector").Find("LeftPanel").Find("room2")
                        .gameObject.SetActive(this.subjectRoomAssignments[this.characterSelector_currentSelected] == 2);
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("LeftPanel").Find("txtApparatus")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(LayoutManager.getLayoutByName(LayoutManager.data.activeLayouts[this.subjectRoomAssignments[this.characterSelector_currentSelected]]).items[this.subjectApparatusAssignments[this.characterSelector_currentSelected]].assetName).displayName, string.Empty);
                }
                if (this.subjectTypes[this.characterSelector_currentSelected] == 2)
                {
                    if (this.charSelectCostErrorBuzz > 0f)
                    {
                        this.charSelectCostErrorBuzz -= Time.deltaTime;
                        this.v3 = Vector3.zero;
                        this.v3.z = Mathf.Cos(Time.time * 50f) * 30f * this.charSelectCostErrorBuzz;
                        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .localEulerAngles = this.v3;
                    }
                    else
                    {
                        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .localEulerAngles = Vector3.zero;
                    }
                }
                if (Game.maxCharactersForSelector > 1)
                {
                    if (Input.GetKeyDown(KeyCode.A) || Input.GetKeyDown(KeyCode.LeftArrow))
                    {
                        this.characterSelector_currentSelected++;
                        this.characterSelector_currentSelected = (this.characterSelector_currentSelected + 6) % 6;
                        UISFX.clickSFX(string.Empty);
                        this.v3.x = 0f;
                        this.v3.y = 90f;
                        this.v3.z = 0f;
                        this.UI.transform.Find("CharacterSelector").Find("RightPanel").localEulerAngles = this.v3;
                        this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("experience")
                            .localScale = Vector3.zero;
                        this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("sensation")
                            .localScale = Vector3.zero;
                        this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("attraction")
                            .localScale = Vector3.zero;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(string.Empty, 0f, 1f, false);
                        this.updateSubjectPreferencePreview(true);
                    }
                    if (Input.GetKeyDown(KeyCode.D) || Input.GetKeyDown(KeyCode.RightArrow))
                    {
                        this.characterSelector_currentSelected--;
                        this.characterSelector_currentSelected = (this.characterSelector_currentSelected + 6) % 6;
                        UISFX.clickSFX(string.Empty);
                        this.v3.x = 0f;
                        this.v3.y = 90f;
                        this.v3.z = 0f;
                        this.UI.transform.Find("CharacterSelector").Find("RightPanel").localEulerAngles = this.v3;
                        this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("experience")
                            .localScale = Vector3.zero;
                        this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("sensation")
                            .localScale = Vector3.zero;
                        this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("attraction")
                            .localScale = Vector3.zero;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                            .Find("txtTooltip")).GetComponent<ScienceTextAnimator>().setText(string.Empty, 0f, 1f, false);
                        this.updateSubjectPreferencePreview(true);
                    }
                }
                if (this.characterSelector_currentSelected != this.characterSelector_currentSelected_last && this.randomCharactersForSelection[this.characterSelector_currentSelected].initted && !(this.randomCharactersForSelection[this.characterSelector_currentSelected].data.species == string.Empty) && !this.randomCharactersForSelection[this.characterSelector_currentSelected].needsRandomize)
                {
                    this.UI.transform.Find("CharacterSelector").Find("LeftPanel").localScale = Vector3.one * 0.01f;
                    this.characterSelector_currentSelected_last = this.characterSelector_currentSelected;
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_custom")
                        .gameObject.SetActive(this.randomCharactersForSelection[this.characterSelector_currentSelected].loadedFromExternal == 1);
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_favorite")
                        .gameObject.SetActive(this.randomCharactersForSelection[this.characterSelector_currentSelected].loadedFromExternal == 2);
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
                        .gameObject.SetActive(this.randomCharactersForSelection[this.characterSelector_currentSelected].loadedFromExternal == 3);
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("outdatedWarning")
                        .gameObject.SetActive(this.randomCharactersForSelection[this.characterSelector_currentSelected].loadedFromExternal > 0 && this.randomCharactersForSelection[this.characterSelector_currentSelected].data.gameVersion != Game.gameVersion);
                    if (this.randomCharactersForSelection[this.characterSelector_currentSelected].data.gameVersion <= Game.gameVersion)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("outdatedWarning")
                            .Find("txt")).GetComponent<Text>().text = Localization.getPhrase("OUTDATED_CHARACTER_WARNING", string.Empty);
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("outdatedWarning")
                            .Find("txt")).GetComponent<Text>().text = Localization.getPhrase("FUTURE_CHARACTER_WARNING", string.Empty);
                    }
                    if (this.randomCharactersForSelection[this.characterSelector_currentSelected].loadedFromExternal == 3)
                    {
                        bool flag = false;
                        bool flag2 = false;
                        for (int num10 = 0; num10 < RacknetMultiplayer.upvotes.Count; num10++)
                        {
                            if (RacknetMultiplayer.upvotes.GetString(num10) == this.randomCharactersForSelection[this.characterSelector_currentSelected].racknetID)
                            {
                                flag = true;
                            }
                        }
                        for (int num11 = 0; num11 < RacknetMultiplayer.downvotes.Count; num11++)
                        {
                            if (RacknetMultiplayer.downvotes.GetString(num11) == this.randomCharactersForSelection[this.characterSelector_currentSelected].racknetID)
                            {
                                flag2 = true;
                            }
                        }
                        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
                            .Find("cmdUpvote")
                            .gameObject.SetActive(!flag && !flag2);
                        this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("sourceIcon_racknet")
                            .Find("cmdDownvote")
                            .gameObject.SetActive(!flag && !flag2);
                    }
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                        .Find("header0")
                        .gameObject.SetActive(this.subjectTypes[this.characterSelector_currentSelected] == 0);
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                        .Find("header1")
                        .gameObject.SetActive(this.subjectTypes[this.characterSelector_currentSelected] == 1);
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                        .Find("header2")
                        .gameObject.SetActive(this.subjectTypes[this.characterSelector_currentSelected] == 2);
                    this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                        .gameObject.SetActive(this.subjectTypes[this.characterSelector_currentSelected] > 0);
                    if (this.subjectTypes[this.characterSelector_currentSelected] == 2)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .Find("txtCost")).GetComponent<Text>().text = Localization.getPhrase("COST", string.Empty);
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .Find("txtAmount")).GetComponent<Text>().text = this.subjectValues[this.characterSelector_currentSelected] + string.Empty;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .Find("txtAmount")).GetComponent<Text>().color = ColorPicker.HexToColor("DE813E");
                    }
                    else if (this.subjectTypes[this.characterSelector_currentSelected] == 1)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .Find("txtCost")).GetComponent<Text>().text = Localization.getPhrase("POTENTIAL_EARNINGS", string.Empty);
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .Find("txtAmount")).GetComponent<Text>().text = this.subjectValues[this.characterSelector_currentSelected] + string.Empty;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("price")
                            .Find("txtAmount")).GetComponent<Text>().color = ColorPicker.HexToColor("95DE3E");
                    }
                    switch (this.subjectTypes[this.characterSelector_currentSelected])
                    {
                        case 0:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                                .Find("txtType")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("VOLUNTEER_TITLE", string.Empty), 0f, 0.6f, false);
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                                .Find("txtDescription")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("VOLUNTEER_DESCRIPTION", string.Empty), 10f, 8.1f, false);
                            break;
                        case 2:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                                .Find("txtType")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("RESEARCH_SUBJECT_TITLE", string.Empty), 0f, 0.6f, false);
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                                .Find("txtDescription")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("RESEARCH_SUBJECT_DESCRIPTION", string.Empty), 10f, 8.1f, false);
                            break;
                        case 1:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                                .Find("txtType")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("CLIENT_TITLE", string.Empty), 0f, 0.6f, false);
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("subjectType")
                                .Find("txtDescription")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("CLIENT_DESCRIPTION", string.Empty), 10f, 8.1f, false);
                            break;
                    }
                                                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtID")).GetComponent<ScienceTextAnimator>().setText(this.randomCharactersForSelection[this.characterSelector_currentSelected].data.uid, 7f, 1.3f, false);
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtName")).GetComponent<ScienceTextAnimator>().setText(this.randomCharactersForSelection[this.characterSelector_currentSelected].data.name, 0f, 1.1f, false);
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtSpecies")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("SPECIES_" + this.randomCharactersForSelection[this.characterSelector_currentSelected].data.species, string.Empty), 3.5f, 0.6f, false);
                    if (this.randomCharactersForSelection[this.characterSelector_currentSelected].data.genitalType == 0)
                    {
                        if (this.randomCharactersForSelection[this.characterSelector_currentSelected].data.identifiesMale)
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<Text>().color = ColorPicker.HexToColor("5D98B0");
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("MALE", string.Empty), 2.8f, 0.9f, false);
                        }
                        else
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<Text>().color = ColorPicker.HexToColor("71B05D");
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("ANDROMORPHIC_FEMALE", string.Empty), 2.8f, 0.9f, false);
                        }
                    }
                    else if (this.randomCharactersForSelection[this.characterSelector_currentSelected].data.genitalType == 1)
                    {
                        if (this.randomCharactersForSelection[this.characterSelector_currentSelected].data.identifiesMale)
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<Text>().color = ColorPicker.HexToColor("B0A05D");
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("GYNOMORPHIC_MALE", string.Empty), 2.8f, 0.9f, false);
                        }
                        else
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<Text>().color = ColorPicker.HexToColor("B05D70");
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("FEMALE", string.Empty), 2.8f, 0.9f, false);
                        }
                    }
                    else if (this.randomCharactersForSelection[this.characterSelector_currentSelected].data.genitalType == 3)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<Text>().color = ColorPicker.HexToColor("825DB0");
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("HERMAPHRODITE", string.Empty), 2.8f, 0.9f, false);
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<Text>().color = ColorPicker.HexToColor("A5A5A5");
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterSelector").Find("RightPanel").Find("txtGender")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("EXOTIC_GENDER", string.Empty), 2.8f, 0.9f, false);
                    }
                }
                goto IL_3618;
            }
            this.UI.transform.Find("CharacterSelector").gameObject.SetActive(false);
            if (!this.wasCharacterSelectorOpen)
            {
                goto IL_3611;
            }
            goto IL_3611;
        }
        goto IL_3618;
    IL_3618:
        this.wasCharacterSelectorOpen = (this.characterSelectorOpen && this.randomCharactersForSelection.Count == Game.maxCharactersForSelector);
        return;
    IL_3611:
        this.characterSelector_currentSelected_last = -1;
        goto IL_3618;
    }

    public void cleanUpFavorites()
    {
        new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
        string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty, "*.rack2character");
        bool flag = false;
        for (int num = Inventory.data.favoriteCharacters.Count - 1; num >= 0; num--)
        {
            string b = Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty + Inventory.data.favoriteCharacters[num] + ".rack2character";
            bool flag2 = false;
            for (int i = 0; i < files.Length; i++)
            {
                if (files[i] == b)
                {
                    UnityEngine.Debug.Log("MATCH!");
                    flag2 = true;
                    return;
                }
            }
            if (!flag2)
            {
                UnityEngine.Debug.Log("File missing, removing favorite '" + Inventory.data.favoriteCharacters[num] + "'");
                flag = true;
                Inventory.data.favoriteCharacters.RemoveAt(num);
            }
        }
        if (flag)
        {
            Inventory.saveInventoryData();
        }
    }

    public void updateSubjectPreferencePreview(bool wipe = false)
    {
        if (this.showingPrefs && !wipe)
        {
            return;
        }
        if ((UnityEngine.Object)this.preferenceTemplate == (UnityEngine.Object)null)
        {
            this.preferenceTemplate = this.UI.transform.Find("CharacterSelector").Find("EnjoymentPanel").Find("icons")
                .Find("preferences")
                .Find("Preference")
                .gameObject;
            this.preferenceTemplate.SetActive(false);
        }
        for (int i = 0; i < this.subjectPreferencePreviews.Count; i++)
        {
            UnityEngine.Object.Destroy(this.subjectPreferencePreviews[i]);
        }
        this.subjectPreferencePreviews = new List<GameObject>();
        this.showingPrefs = !wipe;
        if (!wipe)
        {
            int num = 0;
            foreach (string item in this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences.Keys.ToList())
            {
                if (item.Contains("category_"))
                {
                    GameObject gameObject = UnityEngine.Object.Instantiate(this.preferenceTemplate);
                    gameObject.SetActive(true);
                    gameObject.transform.SetParent(this.preferenceTemplate.transform.parent);
                    gameObject.transform.SetAsFirstSibling();
                    this.v3 = Vector3.zero;
                    num++;
                    this.v3.y -= 17f * (float)(this.subjectPreferencePreviews.Count + num);
                    num++;
                    gameObject.transform.localPosition = this.v3;
                    gameObject.transform.localScale = this.preferenceTemplate.transform.localScale;
                    gameObject.transform.localRotation = this.preferenceTemplate.transform.localRotation;
                    gameObject.transform.Find("plus").gameObject.SetActive(false);
                    gameObject.transform.Find("minus").gameObject.SetActive(false);
                    UnityEngine.Object.Destroy(gameObject.transform.Find("tooltip").gameObject);
                    switch (item)
                    {
                        case "category_experiences":
                            ((UnityEngine.Component)gameObject.transform.Find("txt")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("EXPERIENCE:", string.Empty).ToUpper(), (float)this.subjectPreferencePreviews.Count * 0.7f, 4f, false);
                            break;
                        case "category_attraction":
                            ((UnityEngine.Component)gameObject.transform.Find("txt")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("ATTRACTION:", string.Empty).ToUpper(), (float)this.subjectPreferencePreviews.Count * 0.7f, 4f, false);
                            break;
                        case "category_sensations":
                            ((UnityEngine.Component)gameObject.transform.Find("txt")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("SENSATION:", string.Empty).ToUpper(), (float)this.subjectPreferencePreviews.Count * 0.7f, 4f, false);
                            break;
                    }
                    this.subjectPreferencePreviews.Add(gameObject);
                }
                if (SexualPreferences.getPreference(item).hideFromPreview != 1 && (SexualPreferences.getPreference(item).hideFromPreview != 2 || this.randomCharactersForSelection[this.characterSelector_currentSelected].showPenis) && (SexualPreferences.getPreference(item).hideFromPreview != 3 || this.randomCharactersForSelection[this.characterSelector_currentSelected].showVagina) && (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences[item] > 0.5f + SexualPreferences.preferenceIndifferenceRange || this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences[item] < 0.5f - SexualPreferences.preferenceIndifferenceRange))
                {
                    GameObject gameObject2 = UnityEngine.Object.Instantiate(this.preferenceTemplate);
                    gameObject2.SetActive(true);
                    gameObject2.transform.SetParent(this.preferenceTemplate.transform.parent);
                    gameObject2.transform.SetAsFirstSibling();
                    this.v3 = Vector3.zero;
                    this.v3.y -= 17f * (float)(this.subjectPreferencePreviews.Count + num);
                    gameObject2.transform.localPosition = this.v3;
                    gameObject2.transform.localScale = this.preferenceTemplate.transform.localScale;
                    gameObject2.transform.localRotation = this.preferenceTemplate.transform.localRotation;
                    string str = string.Empty;
                    if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferenceKnowledge[item] == 0)
                    {
                        str = " (Latent)";
                    }
                    if (this.randomCharactersForSelection[this.characterSelector_currentSelected].preferenceKnowledge[item] == 1)
                    {
                        str = " (Secret)";
                    }
                    ((UnityEngine.Component)gameObject2.transform.Find("txt")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("PREFERENCE_" + item, string.Empty) + str, (float)this.subjectPreferencePreviews.Count * 0.7f, 4f, false);
                    gameObject2.transform.Find("plus").gameObject.SetActive(this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences[item] >= 0.5f);
                    gameObject2.transform.Find("minus").gameObject.SetActive(this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences[item] < 0.5f);
                    string str2 = (!(this.randomCharactersForSelection[this.characterSelector_currentSelected].preferences[item] >= 0.5f)) ? Localization.getPhrase("THIS_SUBJECT_DOES_NOT_ENJOY", string.Empty) : Localization.getPhrase("THIS_SUBJECT_ENJOYS", string.Empty);
                    ((UnityEngine.Component)gameObject2.transform.Find("tooltip").Find("txt")).GetComponent<Text>().text = str2 + " " + Localization.getPhrase("PREFERENCE_DESCRIPTION_" + item, string.Empty);
                    this.subjectPreferencePreviews.Add(gameObject2);
                }
            }
        }
    }

    public void closeCharacterSelector()
    {
        if (this.randomCharactersForSelection.Count >= Game.maxCharactersForSelector)
        {
            this.characterSelectorOpen = false;
        }
    }

    public void openCharacterSelector(bool forEmployees = false)
    {
        this.fadeToBlackThen(this.finishOpeningCharacterSelector);
    }

    public void finishOpeningCharacterSelector()
    {
        this.characterSelectorOpen = true;
    }

    private void processInput()
    {
        if (this.PC() != null && (this.PC().interactionSubject != null || this.PC().interactingWithSelf) && Input.GetKeyDown(UserSettings.data.KEY_TOGGLE_AUTO))
        {
            this.PC().controlMode = (this.PC().controlMode + 1) % 4;
            UISFX.clickSFX(string.Empty);
        }
        Vector3 localPosition = this.mainCam.transform.localPosition;
        if (localPosition.x == 0f)
        {
            Vector3 localEulerAngles = this.mainCam.transform.localEulerAngles;
            if (localEulerAngles.x == 0f)
            {
                goto IL_00a7;
            }
        }
        goto IL_00a7;
    IL_00a7:
        if (Input.GetKey(UserSettings.data.KEY_SCREENSHOT))
        {
            new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "screenshots" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
            ScreenCapture.CaptureScreenshot(Game.persistentDataPath + Game.PathDirectorySeparatorChar + "screenshots" + Game.PathDirectorySeparatorChar + DateTime.Now.Ticks.ToString().Substring(0, 10) + "-" + DateTime.Now.Ticks.ToString().Substring(10) + ".png");
            this.addToast(3, Color.white, DateTime.Now.Ticks.ToString().Substring(0, 10) + " - \r\n" + DateTime.Now.Ticks.ToString().Substring(10) + ".png", string.Empty);
        }
        if (!this.titleOpen && !this.anythingLoading && (Input.GetKeyDown(KeyCode.Escape) || this.simulatedESC))
        {
            this.playSound("ui_close", 1f, 1f);
            this.performESC(true);
        }
        this.processEasterEggs();
        Vector3 mousePosition = Input.mousePosition;
        this.mX = Game.cap(mousePosition.x / (float)Screen.width, 0f, 1f);
        Vector3 mousePosition2 = Input.mousePosition;
        this.mY = Game.cap(1f - mousePosition2.y / (float)Screen.height, 0f, 1f);
        this.mouseMoved = ((Input.mousePosition - this.lastMousePosition).magnitude > 0f);
        this.lastMousePosition = Input.mousePosition;
        this.mouseChange = new Vector3(0f - Input.GetAxis("Mouse X"), Input.GetAxis("Mouse Y"), 0f);
        this.mouseChangeSinceLastFixedUpdate += this.mouseChange;
        Vector3 vector = GameObject.Find("UICam").GetComponent<Camera>().WorldToScreenPoint(this.UI.transform.Find("bottomright").position);
        float x = vector.x;
        Vector3 vector2 = GameObject.Find("UICam").GetComponent<Camera>().WorldToScreenPoint(this.UI.transform.Find("topleft").position);
        this.screenWidth = Math.Abs(x - vector2.x);
        Vector3 vector3 = GameObject.Find("UICam").GetComponent<Camera>().WorldToScreenPoint(this.UI.transform.Find("bottomright").position);
        float y = vector3.y;
        Vector3 vector4 = GameObject.Find("UICam").GetComponent<Camera>().WorldToScreenPoint(this.UI.transform.Find("topleft").position);
        this.screenHeight = Math.Abs(y - vector4.y);
        this.screenWidth /= this.UI.GetComponent<Canvas>().scaleFactor;
        this.screenHeight /= this.UI.GetComponent<Canvas>().scaleFactor;
        this.uiMouseX = this.mX * this.screenWidth - this.screenWidth / 2f;
        this.uiMouseY = 0f - this.screenHeight + (1f - this.mY) * this.screenHeight + this.screenHeight / 2f;
        this.uiMouse.x = this.uiMouseX;
        this.uiMouse.y = this.uiMouseY;
        this.uiMouse.z = 0f;
        if (!Input.GetMouseButton(0))
        {
            this.draggingUIthing = false;
        }
        bool flag = false;
        if (this.PC() != null)
        {
            if (this.PC().interactingWithSelf)
            {
                flag = true;
            }
            if (this.PC().interactionSubject != null)
            {
                flag = true;
            }
        }
        if (!this.draggingUIthing && (this.satisfactionMessageOpen || RacknetMultiplayer.anyRacknetUIopen || flag || Input.GetKey(KeyCode.LeftAlt) || (Input.GetKey(KeyCode.LeftShift) && Game.allowShiftSphere) || this.lightingControlPanelOpen || this.shopOpen || this.chemicalSynthesisMenuOpen || this.titleOpen || this.creditsOpen || this.anythingLoading || this.pauseOpen || this.popupOpen || this.characterSelectorOpen || this.customizingCharacter || this.devConsoleOpen || this.inventoryOpen || this.preferencesMenuOpen || this.wasInlineDialogueOpen || this.showingChemicalSelectionMenu))
        {
            Cursor.lockState = CursorLockMode.None;
        }
        else
        {
            Cursor.lockState = CursorLockMode.Locked;
        }
        Cursor.visible = (Cursor.lockState != CursorLockMode.Locked);
        if (this.PC() != null && this.PC().interactionSubject != null && Input.GetKeyDown(UserSettings.data.KEY_FREECAM))
        {
            UISFX.clickSFX(string.Empty);
            this.freeCam = !this.freeCam;
            if (this.freeCam)
            {
                this.freeCamPos = this.mainCamContainer.transform.position;
                this.interactionZoom = (this.freeCamPos - this.camTarget).magnitude / 9f;
            }
        }
        if (this.hoveringHotspot != null && this.hoveringHotspot != string.Empty && Input.GetMouseButtonDown(0))
        {
            this.interactionAngle.x = 0f;
            this.interactionAngle.y = -0.25f;
            this.setToolMode(0);
            this.beginInteraction(this.PC().interactionSubject, this.hoveringHotspot, this.curTool, this.curToolMode, 0f);
            this.hoveringHotspot = string.Empty;
        }
    }

    public void languageClicked(string lang)
    {
        Localization.setLanguage(lang);
    }

    public void gamemodeSelected(bool _freeplay)
    {
        Game.freeplay = _freeplay;
        if (Game.freeplay)
        {
            this.selectingMode = false;
            this.selectingSave = true;
        }
        else
        {
            this.selectingMode = false;
            this.selectingSave = true;
        }
    }

    public static void trace(object str)
    {
        Game.consoleLines.Add(str.ToString());
        while (Game.consoleLines.Count > 50)
        {
            Game.consoleLines.RemoveAt(0);
        }
        UnityEngine.Debug.Log(str);
    }

    public void consoleCommand(string command)
    {
        string text = command;
        if (command.IndexOf(' ') != -1)
        {
            text = command.Split(' ')[0];
        }
        if (text != null)
        {
            Dictionary<string, int> dictionary = new Dictionary<string, int>(37);
            dictionary.Add("help", 0);
            dictionary.Add("cmdlist", 0);
            dictionary.Add("cvarlist", 0);
            dictionary.Add("shiftsphere", 1);
            dictionary.Add("cum", 2);
            dictionary.Add("hands", 3);
            dictionary.Add("enjoyment", 4);
            dictionary.Add("allowWrongSubjectHotspots", 5);
            dictionary.Add("ik", 6);
            dictionary.Add("skiptour", 7);
            dictionary.Add("fixed", 8);
            dictionary.Add("money", 9);
            dictionary.Add("chemical", 10);
            dictionary.Add("deliver", 11);
            dictionary.Add("aa", 12);
            dictionary.Add("sticky", 13);
            dictionary.Add("updateembellishments", 14);
            dictionary.Add("resizetextures", 15);
            dictionary.Add("bloom", 16);
            dictionary.Add("glow", 17);
            dictionary.Add("ssao", 18);
            dictionary.Add("cummies", 19);
            dictionary.Add("rainbow", 20);
            dictionary.Add("bighead", 21);
            dictionary.Add("writhe", 22);
            dictionary.Add("quit", 23);
            dictionary.Add("dof", 24);
            dictionary.Add("dialogue", 25);
            dictionary.Add("size", 26);
            dictionary.Add("species", 27);
            dictionary.Add("subjectsize", 28);
            dictionary.Add("capfps", 29);
            dictionary.Add("coloralts", 30);
            dictionary.Add("position", 31);
            dictionary.Add("camera", 32);
            dictionary.Add("assets", 33);
            dictionary.Add("autowalkdist", 34);
            int num = default(int);
            if (dictionary.TryGetValue(text, out num))
            {
                switch (num)
                {
                    case 0:
                        Game.trace("aa: toggle antialiasing");
                        Game.trace("assets: output current asset load status");
                        Game.trace("autowalkdist: output distance from autowalk target");
                        Game.trace("bighead: you'll see");
                        Game.trace("bloom: toggle bloom FX");
                        Game.trace("camera: output current camera location");
                        Game.trace("capfps [#]: cap the framerate");
                        Game.trace("chemical [0-6] [#]: add or remove chemicals");
                        Game.trace("coloralts: turn on a debug tool in the quickstart editor clipboard");
                        Game.trace("cum: toggle cum on/off");
                        Game.trace("cummies: you'll see");
                        Game.trace("deliver: instantly deliver all orders");
                        Game.trace("dialogue: open the dialogue editor");
                        Game.trace("dof: toggle depth of field");
                        Game.trace("enjoyment: toggle enjoyment debugging");
                        Game.trace("fixed [#]: change the fixed time step (normally 0.01)");
                        Game.trace("glow: toggle glow FX");
                        Game.trace("hands: a debug tool that turns off hand animation for ease of posing");
                        Game.trace("ik: toggle IK");
                        Game.trace("money [#]: add or remove money");
                        Game.trace("position: output current player location");
                        Game.trace("rainbow: you'll see");
                        Game.trace("resizetextures: caches character textures at quality-specific resolutions for faster load times");
                        Game.trace("shiftsphere: toggle the debug shiftsphere");
                        Game.trace("size [#]: change your character's height");
                        Game.trace("skiptour: skip the intro tour (don't do this until you have your passkey)");
                        Game.trace("species [name]: force the random character generator to pick a specific species");
                        Game.trace("ssao: toggle SSAO");
                        Game.trace("sticky: toggle sticky interaction mode");
                        Game.trace("updateembellishments: update embellishment vertex references for all species definitions");
                        Game.trace("writhe: toggle writhe testing mode (arrow keys)");
                        Game.trace("quit: quit the game");
                        break;
                    case 1:
                        Game.allowShiftSphere = !Game.allowShiftSphere;
                        break;
                    case 2:
                        Game.allowCum = !Game.allowCum;
                        break;
                    case 3:
                        Game.allowHandPositioning = !Game.allowHandPositioning;
                        break;
                    case 4:
                        Game.enjoymentDebugging = !Game.enjoymentDebugging;
                        break;
                    case 5:
                        RackCharacter.allowWrongSubjectHotspots = !RackCharacter.allowWrongSubjectHotspots;
                        break;
                    case 6:
                        Game.allowIK = !Game.allowIK;
                        break;
                    case 7:
                        this.setTourProgress(7);
                        NPC.requisitionsOfficer.teleport(-21f, -4.4f, -113f, -999f, false);
                        NPC.requisitionsOfficer.autoWalk(-21f, -4.4f, -113f, 0f, 0f, 0f, null, 999f);
                        NPC.requisitionsOfficer.npcData.talkRange = 6f;
                        break;
                    case 8:
                        this.FDT = float.Parse(command.Split(' ')[1]);
                        break;
                    case 9:
                        Inventory.addMoney(int.Parse(command.Split(' ')[1]));
                        break;
                    case 10:
                        Inventory.addChemical(int.Parse(command.Split(' ')[1]), int.Parse(command.Split(' ')[2]));
                        break;
                    case 11:
                        Shop.instantDelivery = true;
                        break;
                    case 12:
                        this.mainCam.GetComponent<Antialiasing>().enabled = !this.mainCam.GetComponent<Antialiasing>().enabled;
                        break;
                    case 13:
                        Interaction.stickyInteractions = !Interaction.stickyInteractions;
                        break;
                    case 14:
                        Game.updatingEmbellishmentSpeciesID = 0;
                        CharacterManager.updateDefinitionEmbellishments(CharacterManager.species[0]);
                        break;
                    case 15:
                        {
                            List<string> list = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty).ToList();
                            for (int i = 0; i < list.Count; i++)
                            {
                                list[i] = list[i].Split(Game.PathDirectorySeparatorChar)[list[i].Split(Game.PathDirectorySeparatorChar).Length - 1];
                                list[i] = list[i].Split(new string[1]
                                {
                                                                                                                                                                                                                                                                                                                            ".png"
                                }, StringSplitOptions.None)[0];
                            }
                            for (int j = 0; j < 4; j++)
                            {
                                float num2 = 1f;
                                switch (j)
                                {
                                    case 0:
                                        num2 = 0.125f;
                                        break;
                                    case 1:
                                        num2 = 0.25f;
                                        break;
                                    case 2:
                                        num2 = 0.5f;
                                        break;
                                    case 3:
                                        num2 = 0.75f;
                                        break;
                                }
                                new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(num2 * 100f) + Game.PathDirectorySeparatorChar).Directory.Create();
                                for (int k = 0; k < list.Count; k++)
                                {
                                    if (File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + list[k] + ".png"))
                                    {
                                        byte[] data = File.ReadAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + list[k] + ".png");
                                        Texture2D texture2D = new Texture2D(4, 4);
                                        texture2D.LoadImage(data);
                                        TextureScale.Bilinear(texture2D, Mathf.RoundToInt((float)texture2D.width * num2), Mathf.RoundToInt((float)texture2D.height * num2));
                                        byte[] bytes = texture2D.EncodeToPNG();
                                        File.WriteAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(num2 * 100f) + string.Empty + Game.PathDirectorySeparatorChar + string.Empty + list[k] + ".png", bytes);
                                        UnityEngine.Object.Destroy(texture2D);
                                    }
                                }
                            }
                            break;
                        }
                    case 16:
                        this.mainCam.GetComponent<BloomOptimized>().enabled = !this.mainCam.GetComponent<BloomOptimized>().enabled;
                        break;
                    case 17:
                        this.mainCam.GetComponent<Camera>().allowHDR = !this.mainCam.GetComponent<Camera>().allowHDR;
                        break;
                    case 18:
                        this.mainCam.GetComponent<SSAOPro>().enabled = !this.mainCam.GetComponent<SSAOPro>().enabled;
                        break;
                    case 19:
                        Game.daddyCummyCheat = true;
                        break;
                    case 20:
                        Game.rainbowJizzCheat = true;
                        break;
                    case 21:
                        Game.bigHeadCheat = true;
                        break;
                    case 22:
                        RackCharacter.testingWrithe = !RackCharacter.testingWrithe;
                        break;
                    case 23:
                        Application.Quit();
                        break;
                    case 24:
                        this.mainCam.GetComponent<DepthOfField>().enabled = !this.mainCam.GetComponent<DepthOfField>().enabled;
                        break;
                    case 25:
                        this.editingDialogue = !this.editingDialogue;
                        this.UI.SetActive(!this.editingDialogue);
                        this.EditorUI.SetActive(this.editingDialogue);
                        break;
                    case 26:
                        this.PC().data.height = float.Parse(command.Split(' ')[1]);
                        this.PC().applyCustomization();
                        break;
                    case 27:
                        RandomCharacterGenerator.forceSpecies = command.Split(' ')[1];
                        break;
                    case 28:
                        this.PC().interactionSubject.data.height = float.Parse(command.Split(' ')[1]);
                        this.PC().interactionSubject.applyCustomization();
                        break;
                    case 29:
                        Application.targetFrameRate = int.Parse(command.Split(' ')[1]);
                        QualitySettings.vSyncCount = 0;
                        this.manualFPSset = true;
                        break;
                    case 30:
                        this.UI.transform.Find("CharacterCustomizationUI").Find("QuickStart").Find("clipboard")
                            .Find("cmdColorAlt")
                            .gameObject.SetActive(true);
                        break;
                    case 31:
                        {
                            object[] obj = new object[7];
                            Vector3 position = this.PC().GO.transform.position;
                            obj[0] = position.x;
                            obj[1] = ",";
                            Vector3 position2 = this.PC().GO.transform.position;
                            obj[2] = position2.y;
                            obj[3] = ",";
                            Vector3 position3 = this.PC().GO.transform.position;
                            obj[4] = position3.z;
                            obj[5] = " Facing: ";
                            Vector3 localEulerAngles = this.PC().GO.transform.localEulerAngles;
                            obj[6] = localEulerAngles.y;
                            Game.trace(string.Concat(obj));
                            break;
                        }
                    case 32:
                        Game.trace("Angle: " + this.camFollowAngle);
                        Game.trace("Dist: " + this.camFollowDist);
                        Game.trace("Elevation: " + this.camFollowElevation);
                        break;
                    case 33:
                        Game.trace(AssetLoadManager.thingsStillLoading.Count + " assets loading.");
                        Game.trace(AssetLoadManager.WWWs.Count + " assets in memory.");
                        break;
                    case 34:
                        Game.trace("Distance from autowalk target: " + (this.PC().targetLocation - this.PC().GO.transform.position).magnitude);
                        break;
                }
            }
        }
    }

    private void processToast()
    {
        if ((UnityEngine.Object)this.ToastTemplate == (UnityEngine.Object)null)
        {
            this.ToastTemplate = this.UI.transform.Find("ToastNotifications").Find("Toast").gameObject;
            this.ToastTemplate.SetActive(false);
        }
        if (this.toastDelay > 0f)
        {
            this.toastDelay -= Time.deltaTime;
        }
        if (this.toastsQueued.Count > 0 && this.toastDelay <= 0f && this.curDialogue == string.Empty && this.toasts.Count < 4)
        {
            this.ToastTemplate.SetActive(true);
            this.toastsQueued[0].GO = UnityEngine.Object.Instantiate(this.ToastTemplate);
            this.toastsQueued[0].GO.transform.SetParent(this.ToastTemplate.transform.parent);
            this.toastsQueued[0].GO.transform.localPosition = this.ToastTemplate.transform.localPosition;
            this.toastsQueued[0].GO.transform.Translate(0f, -80f, 0f);
            this.toastsQueued[0].GO.transform.localScale = this.ToastTemplate.transform.localScale;
            this.toastsQueued[0].GO.transform.localEulerAngles = this.ToastTemplate.transform.localEulerAngles;
            this.toastsQueued[0].life = 9f;
            this.v3 = Vector3.zero;
            this.v3.x = -255f;
            this.toastsQueued[0].GO.transform.Find("shimmer").localPosition = this.v3;
            this.toastsQueued[0].GO.transform.Find("shimmer").localScale = Vector3.one;
            switch (this.toastsQueued[0].type)
            {
                case 0:
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt0")).GetComponent<Text>().text = string.Empty;
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt1")).GetComponent<Text>().text = Localization.getPhrase(this.toastsQueued[0].message, string.Empty);
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt1")).GetComponent<Text>().color = this.toastsQueued[0].color;
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt2")).GetComponent<Text>().text = Localization.getPhrase("HAS_BEEN_ADDED_TO_YOUR", string.Empty);
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt3")).GetComponent<Text>().text = Localization.getPhrase(this.toastsQueued[0].subMessage, string.Empty);
                    this.playSound("ui_toast", 1f, 1f);
                    break;
                case 3:
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt0")).GetComponent<Text>().text = string.Empty;
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt1")).GetComponent<Text>().text = this.toastsQueued[0].message;
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt1")).GetComponent<Text>().color = this.toastsQueued[0].color;
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt2")).GetComponent<Text>().text = Localization.getPhrase("HAS_BEEN_SAVED_TO", string.Empty);
                    ((UnityEngine.Component)this.toastsQueued[0].GO.transform.Find("txt3")).GetComponent<Text>().text = Localization.getPhrase("SCREENSHOT_FOLDER", string.Empty);
                    this.playSound("ui_toast", 1f, 1f);
                    break;
            }
            this.ToastTemplate.SetActive(false);
            this.toasts.Insert(0, this.toastsQueued[0]);
            this.toastsQueued.RemoveAt(0);
            this.toastDelay = 0.5f;
        }
        for (int i = 0; i < this.toasts.Count; i++)
        {
            this.toasts[i].ind = i;
            this.toasts[i].life -= Time.deltaTime;
            if (this.toasts[i].life < 0f)
            {
                this.toasts[i].life = 0f;
            }
            this.v3 = this.toasts[i].GO.transform.localPosition;
            this.v3.y += ((float)(40 + 80 * this.toasts[i].ind) - this.v3.y) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
            this.toasts[i].GO.transform.localPosition = this.v3;
            this.v3 = Vector3.one;
            if (this.toasts[i].life < 0.5f)
            {
                this.v3 *= this.toasts[i].life * 2f;
            }
            this.toasts[i].GO.transform.localScale = this.v3;
            if (this.toasts[i].life <= 8f)
            {
                this.v3 = this.toasts[i].GO.transform.Find("shimmer").localPosition;
                this.v3.x += (180f - this.v3.x) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
                this.toasts[i].GO.transform.Find("shimmer").localPosition = this.v3;
                this.v32 = Vector3.one;
                this.v32.x = 1f - Math.Abs(this.v3.x + 255f) / 550f;
                this.toasts[i].GO.transform.Find("shimmer").localScale = this.v32;
            }
            if (this.toasts[i].life <= 0f)
            {
                UnityEngine.Object.Destroy(this.toasts[i].GO);
                this.toasts.RemoveAt(i);
            }
        }
    }

    public void addToast(int type, Color color, string message, string subMessage = "")
    {
        Toast toast = new Toast();
        toast.type = type;
        toast.color = color;
        toast.message = message;
        toast.subMessage = subMessage;
        this.toastsQueued.Add(toast);
    }

    private void processUI()
    {
        this.time = Time.time;
        this.deltaTime = Time.deltaTime;
        if (this.deltaTime <= 0f)
        {
            this.deltaTime = 0.001f;
        }
        Objectives.deltaTime = this.deltaTime;
        if (Input.GetKey(KeyCode.Q))
        {
            this.WAIcooldown -= Time.deltaTime;
            if (this.WAIcooldown <= 0f)
            {
                this.WAIcooldown += 0.5f;
                this.UI.transform.Find("txtWorkingAsIntended").gameObject.SetActive(!this.UI.transform.Find("txtWorkingAsIntended").gameObject.activeSelf);
            }
        }
        else
        {
            this.WAIcooldown = 0f;
            this.UI.transform.Find("txtWorkingAsIntended").gameObject.SetActive(false);
        }
        if (Input.GetKeyDown(KeyCode.BackQuote))
        {
            this.devConsoleOpen = !this.devConsoleOpen;
        }
        if ((UnityEngine.Object)this.devConsole == (UnityEngine.Object)null)
        {
            this.devConsole = this.UI.transform.Find("DevConsole").gameObject;
        }
        this.devConsole.SetActive(this.devConsoleOpen);
        if (this.devConsoleOpen)
        {
            ((UnityEngine.Component)this.devConsole.transform.Find("txtOut")).GetComponent<Text>().text = string.Join("\r\n", Game.consoleLines.ToArray());
            if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))
            {
                this.consoleCommand(((UnityEngine.Component)this.devConsole.transform.Find("txtIn")).GetComponent<InputField>().text);
                ((UnityEngine.Component)this.devConsole.transform.Find("txtIn")).GetComponent<InputField>().text = string.Empty;
            }
        }
        this.UIinUse = false;
        if (this.titleOpen || this.anythingLoading || this.showingChemicalSelectionMenu || this.pauseOpen || this.popupOpen || this.inResearchMode || this.shopOpen || this.chemicalSynthesisMenuOpen || this.curDialogue != string.Empty || this.characterSelectorOpen || TestingRoom.editingMode || this.lightingControlPanelOpen || RacknetMultiplayer.anyRacknetUIopen)
        {
            this.UIinUse = true;
            this.inventoryOpen = (false || this.selectingComponents);
        }
        else if (Input.GetKeyDown(UserSettings.data.KEY_INTERFACE))
        {
            this.inventoryOpen = !this.inventoryOpen;
            if (this.inventoryOpen)
            {
                Inventory.emptyBag("COMPONENTS", string.Empty);
                Inventory.emptyBag("COMPONENTS_CONFIRMED", string.Empty);
                this.interactingWithBags = new List<string>();
                if (this.PC().standingOnSurface.name.IndexOf("garage") == -1)
                {
                    this.interactingWithBags.Add("CLOTHING");
                }
                else
                {
                    this.interactingWithBags.Add(Inventory.getBagByName("STORAGE").uid);
                    this.interactingWithBags.Add(Inventory.getBagByName("GARAGE").uid);
                }
                this.playSound("ui_contextopen", 1f, 1f);
            }
            else
            {
                this.playSound("ui_contextclose", 1f, 1f);
            }
        }
        this.processTitleScreen();
        if (this.PC() != null)
        {
            this.processInventory();
            this.processCurrency();
            this.processChemicals();
            Shop.processDeliveries();
            this.processTutorials();
        }
        this.processOrgasmGrid();
        this.processGadgetUI();
        this.processLoadingScreen();
        this.processPauseScreen();
        this.processTranslationWarningScreen();
        this.processPopup();
        this.processCustomizationMenu();
        this.processVersion();
        this.processColorPicker();
        this.processEmbellishmentMenu();
        this.processTexturePatternMenu();
        this.processPreferencesMenu();
        this.processBackButton();
        this.processToast();
        this.processBlacker();
        this.processChemicalSynthesis();
        this.processShop();
        this.processCharacterSelector();
        this.processToolMenu();
        this.processTerminateMenu();
        this.processSatisfactionResults();
        if (this.PC() != null)
        {
            this.processClimaxMenu();
        }
        this.processSexPoseMenu();
        this.processWarning();
        this.processCredits();
        this.processObjectiveMenu();
        this.processEmotes();
        ScienceTextAnimator.updateSFX();
    }

    public void initOrgasmGrid()
    {
        this.orgasmGrid = this.UI.transform.Find("OrgasmGrid").gameObject;
        this.orgasmGridCursor = this.orgasmGrid.transform.Find("grid").Find("cursor");
        this.orgasmGridHeadPS = ((UnityEngine.Component)this.orgasmGridCursor.Find("head")).GetComponent<ParticleSystem>();
        this.orgasmGridHeadEM = this.orgasmGridHeadPS.emission;
        this.orgasmGridHeadMM = this.orgasmGridHeadPS.main;
        this.orgasmGridTrailPS = ((UnityEngine.Component)this.orgasmGridCursor.Find("trail")).GetComponent<ParticleSystem>();
        this.orgasmGridTrailEM = this.orgasmGridTrailPS.emission;
        this.orgasmGridTrailMM = this.orgasmGridTrailPS.main;
        this.orgasmGridInitted = true;
        this.orgasmGridWidth = (float)((UnityEngine.Component)this.orgasmGrid.transform.Find("grid")).GetComponent<Image>().mainTexture.width;
        this.orgasmGridHeight = (float)((UnityEngine.Component)this.orgasmGrid.transform.Find("grid")).GetComponent<Image>().mainTexture.height;
        this.orgasmGridRating = ((UnityEngine.Component)this.orgasmGrid.transform.Find("grid").Find("txtRating")).GetComponent<Text>();
    }

    public void processOrgasmGrid()
    {
        if (!this.orgasmGridInitted)
        {
            this.initOrgasmGrid();
        }
        this.showOrgasmGrid = false;
        if (this.PC() != null)
        {
            if (this.PC().interactionSubject != null)
            {
                if (this.PC().interactionSubject.orgasming > 0f)
                {
                    this.recentSubjectOrgasm = 0f;
                }
                if (this.recentSubjectOrgasm < 10f)
                {
                    this.showOrgasmGrid = true;
                    this.recentSubjectOrgasm += Time.deltaTime;
                }
            }
            else
            {
                this.recentSubjectOrgasm = 90f;
            }
        }
        else
        {
            this.recentSubjectOrgasm = 90f;
        }
        if (this.showOrgasmGrid)
        {
            if (!this.wasShowingOrgasmGrid)
            {
                this.orgasmGrid.SetActive(true);
                this.orgasmGridHeadPS.Clear();
                this.orgasmGridTrailPS.Clear();
                this.wasShowingOrgasmGrid = true;
                this.recentSubjectOrgasm = 90f;
                this.orgasmRating = 0f;
                this.orgasmRatingNodeSpacing = 0f;
                this.nextOrgasmRatingNode = 0;
                for (int i = 0; i < 100; i++)
                {
                    this.orgasmRatingNodes[i] = 0f;
                }
            }
            if (this.orgasmRatingNodeSpacing == 0f)
            {
                this.orgasmRatingNodeSpacing = this.PC().interactionSubject.currentOrgasmDuration / 100f;
            }
            this.v3.x = (0f - this.orgasmGridWidth) * 0.5f + this.orgasmGridWidth * (1f - this.PC().interactionSubject.orgasming / this.PC().interactionSubject.currentOrgasmDuration);
            this.v3.y = Game.cap((this.PC().interactionSubject.percievedStimulation / this.PC().interactionSubject.targetStimulation - 1f) * (0.1f + this.PC().interactionSubject.orgasming / this.PC().interactionSubject.currentOrgasmDuration * 3f), -1f, 3f);
            if (this.v3.y > 0f)
            {
                this.orgasmGridTrailMM.startColor = BondageApparatus.c2_r * this.v3.y + BondageApparatus.c2_g * (1f - this.v3.y);
                this.orgasmGridHeadMM.startColor = BondageApparatus.c2_r * this.v3.y + BondageApparatus.c2_g * (1f - this.v3.y);
            }
            else
            {
                this.orgasmGridTrailMM.startColor = BondageApparatus.c2_w * (0f - this.v3.y) + BondageApparatus.c2_g * (1f + this.v3.y);
                this.orgasmGridHeadMM.startColor = BondageApparatus.c2_w * (0f - this.v3.y) + BondageApparatus.c2_g * (1f + this.v3.y);
            }
            if (this.nextOrgasmRatingNode < 100 && this.PC().interactionSubject.orgasming < this.PC().interactionSubject.currentOrgasmDuration - this.orgasmRatingNodeSpacing * (float)this.nextOrgasmRatingNode)
            {
                float num = Mathf.Pow(Mathf.Abs(this.v3.y) * 10f, 2f);
                for (int j = this.nextOrgasmRatingNode; j < 100; j++)
                {
                    this.orgasmRatingNodes[j] = num;
                }
                this.orgasmRating = this.orgasmRatingNodes.Sum();
                this.nextOrgasmRatingNode++;
            }
            if (this.v3.y > 1f)
            {
                this.v3.y = 1f;
            }
            this.v3.y *= this.orgasmGridHeight * 0.45f;
            this.v3.z = 0f;
            this.orgasmGridCursor.localPosition = this.v3;
            this.orgasmGridHeadEM.enabled = (this.PC().interactionSubject.orgasming > 0f);
            this.orgasmGridTrailEM.enabled = (this.PC().interactionSubject.orgasming > 0f);
            if (this.orgasmRating < 200f)
            {
                this.orgasmGridRating.text = Localization.getPhrase("ORGASM_RATING_AMAZING", string.Empty);
                this.orgasmGridRating.color = BondageApparatus.c2_r * 0f + BondageApparatus.c2_g * 1f;
            }
            else if (this.orgasmRating < 500f)
            {
                this.orgasmGridRating.text = Localization.getPhrase("ORGASM_RATING_GREAT", string.Empty);
                this.orgasmGridRating.color = BondageApparatus.c2_r * 0.1f + BondageApparatus.c2_g * 0.9f;
            }
            else if (this.orgasmRating < 1100f)
            {
                this.orgasmGridRating.text = Localization.getPhrase("ORGASM_RATING_GOOD", string.Empty);
                this.orgasmGridRating.color = BondageApparatus.c2_r * 0.2f + BondageApparatus.c2_g * 0.8f;
            }
            else if (this.orgasmRating < 2000f)
            {
                this.orgasmGridRating.text = Localization.getPhrase("ORGASM_RATING_OKAY", string.Empty);
                this.orgasmGridRating.color = BondageApparatus.c2_r * 0.4f + BondageApparatus.c2_g * 0.6f;
            }
            else if (this.orgasmRating < 4500f)
            {
                this.orgasmGridRating.text = Localization.getPhrase("ORGASM_RATING_BAD", string.Empty);
                this.orgasmGridRating.color = BondageApparatus.c2_r * 0.65f + BondageApparatus.c2_g * 0.350000024f;
            }
            else
            {
                this.orgasmGridRating.text = Localization.getPhrase("ORGASM_RATING_RUINED", string.Empty);
                this.orgasmGridRating.color = BondageApparatus.c2_r * 1f + BondageApparatus.c2_g * 0f;
            }
        }
        else if (this.wasShowingOrgasmGrid)
        {
            this.orgasmGrid.SetActive(false);
            this.wasShowingOrgasmGrid = false;
        }
    }

    public void initTutorials()
    {
        this.tutorialDrone = this.UI.transform.Find("TutorialWindow").Find("helperBot");
        this.tutorialDroneText = this.UI.transform.Find("TutorialWindow").Find("helpText").gameObject;
        this.tutorialDroneAdvice = ((UnityEngine.Component)this.tutorialDroneText.transform.Find("txt")).GetComponent<ScienceTextAnimator>();
        this.tutorialDroneArrow = this.tutorialDrone.Find("arrow");
        this.tutorialDroneBlocker = this.UI.transform.Find("TutorialWindow").Find("blocker").gameObject;
        this.tutorialDroneImage = this.UI.transform.Find("TutorialWindow").Find("tutorialImages").gameObject;
    }

    public void processTutorials()
    {
        if (TutorialTooltip.recentTutorialCompletion > 0)
        {
            TutorialTooltip.recentTutorialCompletion--;
        }
        Tutorials.process();
        if (Tutorials.droneFollow && !this.dialogueWasOpen)
        {
            if (!this.tutorialWasOpen)
            {
                this.originalDialogueCamCullingMask = this.dialogueCam.cullingMask;
                this.dialogueCam.cullingMask = this.renderCam.GetComponent<Camera>().cullingMask;
                this.UI.transform.Find("TutorialWindow").gameObject.SetActive(true);
                ((UnityEngine.Component)this.dialogueCam).GetComponent<Antialiasing>().enabled = false;
                ((UnityEngine.Component)this.dialogueCam).GetComponent<BloomOptimized>().enabled = false;
                this.tutorialWasOpen = true;
            }
            this.dialogueCamPos = this.PC().bones.Head.position - this.helperDrone.transform.position;
            this.dialogueCamPos /= this.dialogueCamPos.magnitude;
            this.dialogueCamPos *= 1.3f;
            this.dialogueCamPos += this.helperDrone.transform.position;
            this.dialogueCam.transform.position = this.dialogueCamPos;
            this.dialogueCam.transform.LookAt(this.helperDrone.transform.position);
            switch (Tutorials.tutorialDroneAnchorX)
            {
                default:
                    this.v3.x = 0f;
                    break;
                case -1:
                    this.v3.x = (0f - this.screenWidth) / 2f;
                    break;
                case 1:
                    this.v3.x = this.screenWidth / 2f;
                    break;
            }
            switch (Tutorials.tutorialDroneAnchorY)
            {
                default:
                    this.v3.y = 0f;
                    break;
                case -1:
                    this.v3.y = (0f - this.screenHeight) / 2f;
                    break;
                case 1:
                    this.v3.y = this.screenHeight / 2f;
                    break;
            }
            this.v3.z = 0f;
            this.tutorialDrone.localPosition = Tutorials.tutorialDronePosition + this.v3;
            this.tutorialDroneText.SetActive(Tutorials.tutorialDroneAdvice != string.Empty);
            this.tutorialDroneBlocker.SetActive(Tutorials.forcedTutorialFromTooltip || Tutorials.tutorialDroneImage != string.Empty);
            this.tutorialDroneImage.SetActive(Tutorials.tutorialDroneImage != string.Empty);
            if (Tutorials.tutorialDroneImage != this.lastTutorialDroneImage)
            {
                if (Tutorials.tutorialDroneImage != string.Empty)
                {
                    this.tutorialDroneImage.GetComponent<RawImage>().texture = (Resources.Load(Tutorials.tutorialDroneImage) as Texture2D);
                }
                this.lastTutorialDroneImage = Tutorials.tutorialDroneImage;
            }
            if (Tutorials.tutorialDroneAdvice != string.Empty)
            {
                this.tutorialDroneText.transform.Find("close").gameObject.SetActive(Tutorials.allowTutorialDroneAdviceContinue);
                if (Tutorials.tutorialDroneAdviceInstant)
                {
                    ((UnityEngine.Component)this.tutorialDroneAdvice).GetComponent<Text>().text = Tutorials.tutorialDroneAdvice;
                    this.wasTutorialDroneAdviceInstant = true;
                }
                else
                {
                    this.tutorialDroneAdvice.setText(Tutorials.tutorialDroneAdvice, 0f, 6f, !this.wasTutorialDroneAdviceInstant);
                    this.wasTutorialDroneAdviceInstant = false;
                }
                this.v3.z = 0f;
                if (Tutorials.tutorialDroneForceTextX == 0)
                {
                    Vector3 localPosition = this.tutorialDrone.localPosition;
                    if (localPosition.x > 0f)
                    {
                        ref Vector3 val = ref this.v3;
                        Vector3 localPosition2 = this.tutorialDrone.localPosition;
                        val.x = localPosition2.x - 170f;
                    }
                    else
                    {
                        ref Vector3 val2 = ref this.v3;
                        Vector3 localPosition3 = this.tutorialDrone.localPosition;
                        val2.x = localPosition3.x + 170f;
                    }
                }
                else
                {
                    ref Vector3 val3 = ref this.v3;
                    Vector3 localPosition4 = this.tutorialDrone.localPosition;
                    val3.x = localPosition4.x + (float)(170 * Tutorials.tutorialDroneForceTextX);
                }
                if (Tutorials.tutorialDroneForceTextY == 0)
                {
                    Vector3 localPosition5 = this.tutorialDrone.localPosition;
                    if (localPosition5.y > 0f)
                    {
                        ref Vector3 val4 = ref this.v3;
                        Vector3 localPosition6 = this.tutorialDrone.localPosition;
                        val4.y = localPosition6.y - 35f;
                    }
                    else
                    {
                        ref Vector3 val5 = ref this.v3;
                        Vector3 localPosition7 = this.tutorialDrone.localPosition;
                        val5.y = localPosition7.y + 35f;
                    }
                }
                else
                {
                    ref Vector3 val6 = ref this.v3;
                    Vector3 localPosition8 = this.tutorialDrone.localPosition;
                    val6.y = localPosition8.y + (float)(35 * Tutorials.tutorialDroneForceTextY);
                }
                this.tutorialDroneText.transform.localPosition = this.v3;
            }
            this.tutorialDroneArrow.gameObject.SetActive(Tutorials.tutorialDroneArrowPosition != -1f);
            if (Tutorials.tutorialDroneArrowPosition != -1f)
            {
                this.v3.x = Mathf.Cos((0f - Tutorials.tutorialDroneArrowPosition + 90f) * 3.1415f / 180f) * (50f + Mathf.Cos(Time.time * 10f) * 4f);
                this.v3.y = Mathf.Sin((0f - Tutorials.tutorialDroneArrowPosition + 90f) * 3.1415f / 180f) * (50f + Mathf.Cos(Time.time * 10f) * 4f);
                this.v3.z = 0f;
                this.tutorialDroneArrow.localPosition = this.v3;
                this.v3.x = 0f;
                this.v3.y = 0f;
                this.v3.z = 0f - Tutorials.tutorialDroneArrowPosition;
                this.tutorialDroneArrow.localEulerAngles = this.v3;
            }
        }
        else if (this.tutorialWasOpen)
        {
            this.UI.transform.Find("TutorialWindow").gameObject.SetActive(false);
            this.dialogueCam.cullingMask = this.originalDialogueCamCullingMask;
            ((UnityEngine.Component)this.dialogueCam).GetComponent<Antialiasing>().enabled = UserSettings.data.antialiasing;
            ((UnityEngine.Component)this.dialogueCam).GetComponent<BloomOptimized>().enabled = UserSettings.data.bloom;
            this.tutorialWasOpen = false;
        }
    }

    public void openChemicalSynthesis()
    {
        this.chemicalSynthesisMenuOpen = true;
    }

    public void closeChemicalSynthesisStation()
    {
        this.chemicalSynthesisMenuOpen = false;
    }

    public void updateListOfAvailableChemicals()
    {
        this.chemicalsAvailableForSynthesis = new List<string>();
        for (int i = 0; i < ResearchList.allTasksAvailable.Count; i++)
        {
            if (Inventory.data.completedResearch.Contains(ResearchList.allTasksAvailable[i].id) && ResearchList.allTasksAvailable[i].category == "CHEMICALS")
            {
                if (ResearchList.allTasksAvailable[i].fetish == string.Empty)
                {
                    this.chemicalsAvailableForSynthesis.Add(ResearchList.allTasksAvailable[i].id);
                }
                else if (UserSettings.getFetishSetting(ResearchList.allTasksAvailable[i].fetish) > 0f)
                {
                    this.chemicalsAvailableForSynthesis.Add(ResearchList.allTasksAvailable[i].id);
                }
            }
        }
    }

    public void initChemicalSynthesisUI()
    {
        this.chemicalSynthesisUI = this.UI.transform.Find("ChemicalSynthesisMenu").gameObject;
        this.chemicalSynthesisTileTemplate = this.chemicalSynthesisUI.transform.Find("Tile").gameObject;
        this.chemicalSynthesisTileContainer = this.chemicalSynthesisUI.transform.Find("tileContainer");
        this.chemicalSynthesisRightMenu = this.chemicalSynthesisUI.transform.Find("rightMenu");
        this.chemicalSynthesis_txtChemicalName = ((UnityEngine.Component)this.chemicalSynthesisRightMenu.Find("txtChemicalName")).GetComponent<ScienceTextAnimator>();
        this.chemicalSynthesis_txtChemicalDescription = ((UnityEngine.Component)this.chemicalSynthesisRightMenu.Find("txtChemicalDescription")).GetComponent<ScienceTextAnimator>();
        for (int i = 0; i < this.chemicalSynthesis_hoverCost.Length; i++)
        {
            this.chemicalSynthesis_hoverCost[i] = ((UnityEngine.Component)this.chemicalSynthesisRightMenu.Find("costMenu").Find("txtCost" + i)).GetComponent<Text>();
            this.chemicalSynthesis_hoverCostHex[i] = ((UnityEngine.Component)this.chemicalSynthesisRightMenu.Find("costMenu").Find("costImages").Find("hex" + i)).GetComponent<Image>();
            this.originalChemicalHexColors[i] = this.chemicalSynthesis_hoverCostHex[i].color;
        }
        this.chemicalSynthesisCheckoutMenu = this.chemicalSynthesisUI.transform.Find("checkoutMenu");
        this.chemicalSynthesisTileTemplate.SetActive(false);
        this.chemicalSynthesisInitialized = true;
    }

    public void synthesizeChemicals()
    {
        for (int i = 0; i < this.chemicalSynthesis_hoverCost.Length; i++)
        {
            int num = Inventory.getItemDefinition(this.chemicalSynthesis_selectedChemical).chemicalcosts[i] * this.chemicalSynthesis_selectedChemicalQuantity;
            if (this.chemicalSynthesis_inverting)
            {
                num += Inventory.getItemDefinition("Chemical.ChemicalNeutralizer").chemicalcosts[i] * this.chemicalSynthesis_selectedChemicalQuantity;
            }
            Inventory.addChemical(i, -num);
        }
        LayoutItemSpecialProperties layoutItemSpecialProperties = null;
        if (!Inventory.weHaveItem("ChemicalGun", out layoutItemSpecialProperties, string.Empty, false))
        {
            Inventory.giveItem("ChemicalGun", null, string.Empty, true, true, 0);
        }
        string text = this.chemicalSynthesis_selectedChemical;
        if (this.chemicalSynthesis_inverting)
        {
            text += "!";
        }
        Inventory.addChemicalCompound(text, (float)this.chemicalSynthesis_selectedChemicalQuantity, true);
        this.closeChemicalSynthesisStation();
    }

    public void updateChemicalSynthesisCheckout()
    {
        this.chemicalSynthesis_selectedChemicalQuantity = (int)Game.cap((float)this.chemicalSynthesis_selectedChemicalQuantity, 0f, 10f);
        if (this.chemicalSynthesis_selectedChemical == string.Empty)
        {
            this.chemicalSynthesisCheckoutMenu.gameObject.SetActive(false);
        }
        else
        {
            this.chemicalSynthesisCheckoutMenu.gameObject.SetActive(true);
            if (this.chemicalSynthesis_inverting)
            {
                ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("selectedChemical").Find("txtName")).GetComponent<Text>().text = Localization.getPhrase("Chemical.ChemicalNeutralizer PREFIX", string.Empty) + Localization.getPhrase(this.chemicalSynthesis_selectedChemical, string.Empty);
                ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("selectedChemical")).GetComponent<RawImage>().texture = (Resources.Load("chemicalbranding" + Game.PathDirectorySeparatorChar + string.Empty + this.chemicalSynthesis_selectedChemical.Split('.')[this.chemicalSynthesis_selectedChemical.Split('.').Length - 1] + "!") as Texture2D);
            }
            else
            {
                ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("selectedChemical").Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(this.chemicalSynthesis_selectedChemical, string.Empty);
                ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("selectedChemical")).GetComponent<RawImage>().texture = (Resources.Load("chemicalbranding" + Game.PathDirectorySeparatorChar + string.Empty + this.chemicalSynthesis_selectedChemical.Split('.')[this.chemicalSynthesis_selectedChemical.Split('.').Length - 1]) as Texture2D);
            }
            ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("txtDoseCount")).GetComponent<Text>().text = this.chemicalSynthesis_selectedChemicalQuantity.ToString();
            for (int i = 0; i < this.chemicalSynthesis_hoverCost.Length; i++)
            {
                int num = Inventory.getItemDefinition(this.chemicalSynthesis_selectedChemical).chemicalcosts[i] * this.chemicalSynthesis_selectedChemicalQuantity;
                if (this.chemicalSynthesis_inverting)
                {
                    num += Inventory.getItemDefinition("Chemical.ChemicalNeutralizer").chemicalcosts[i] * this.chemicalSynthesis_selectedChemicalQuantity;
                }
                if (num == 0)
                {
                    ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("costMenu").Find("txtCost" + i)).GetComponent<Text>().text = string.Empty;
                    ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("costMenu").Find("costImages").Find("hex" + i)).GetComponent<Image>().color = this.originalChemicalHexColors[i] * 0.6f;
                }
                else
                {
                    ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("costMenu").Find("txtCost" + i)).GetComponent<Text>().text = num.ToString();
                    ((UnityEngine.Component)this.chemicalSynthesisCheckoutMenu.Find("costMenu").Find("costImages").Find("hex" + i)).GetComponent<Image>().color = this.originalChemicalHexColors[i] * 1f;
                }
            }
        }
        this.showInvertedDefinition = (this.chemicalSynthesis_inverting || this.chemicalSynthesis_selectedChemical == "Chemical.ChemicalNeutralizer");
    }

    public void addSelectedChemical()
    {
        this.chemicalSynthesis_selectedChemicalQuantity++;
        this.updateChemicalSynthesisCheckout();
    }

    public void removeSelectedChemical()
    {
        if (this.chemicalSynthesis_selectedChemicalQuantity > 1)
        {
            this.chemicalSynthesis_selectedChemicalQuantity--;
        }
        else
        {
            this.chemicalSynthesis_inverting = false;
            this.chemicalSynthesis_selectedChemical = string.Empty;
            this.chemicalSynthesis_selectedChemicalQuantity = 0;
        }
        this.updateChemicalSynthesisCheckout();
    }

    public void processChemicalSynthesis()
    {
        if (!this.chemicalSynthesisInitialized)
        {
            this.initChemicalSynthesisUI();
        }
        if (this.chemicalSynthesisMenuOpen)
        {
            if (!this.chemicalSynthesisMenuWasOpen)
            {
                this.chemicalSynthesis_inverting = false;
                this.chemicalSynthesis_selectedChemical = string.Empty;
                this.chemicalSynthesis_selectedChemicalQuantity = 0;
                this.updateChemicalSynthesisCheckout();
                this.chemicalSynthesisUI.SetActive(true);
                this.updateListOfAvailableChemicals();
                for (int i = 0; i < this.chemicalTiles.Count; i++)
                {
                    UnityEngine.Object.Destroy(this.chemicalTiles[i]);
                }
                this.chemicalTiles = new List<GameObject>();
                if (this.chemicalsAvailableForSynthesis.Count == 0)
                {
                    this.chemicalSynthesisUI.transform.Find("txtNoChemicalsUnlocked").gameObject.SetActive(true);
                }
                else
                {
                    this.chemicalSynthesisUI.transform.Find("txtNoChemicalsUnlocked").gameObject.SetActive(false);
                    this.chemicalSynthesisTileTemplate.SetActive(true);
                    int num = -2;
                    int num2 = 0;
                    for (int j = 0; j < this.chemicalsAvailableForSynthesis.Count; j++)
                    {
                        GameObject gameObject = UnityEngine.Object.Instantiate(this.chemicalSynthesisTileTemplate);
                        this.v3 = Vector3.zero;
                        gameObject.transform.SetParent(this.chemicalSynthesisTileContainer);
                        this.v3.x = (float)(146 * num);
                        this.v3.y = (float)(-68 * num2);
                        if ((num + 10) % 2 == 1)
                        {
                            this.v3.y -= 34f;
                        }
                        this.v3.z = 0f;
                        gameObject.transform.localPosition = this.v3;
                        num++;
                        if (num == 3)
                        {
                            num = -2;
                            num2++;
                        }
                        gameObject.transform.localScale = Vector3.one;
                        ((UnityEngine.Component)gameObject.transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(this.chemicalsAvailableForSynthesis[j], string.Empty);
                        gameObject.GetComponent<RawImage>().texture = (Resources.Load("chemicalbranding" + Game.PathDirectorySeparatorChar + string.Empty + this.chemicalsAvailableForSynthesis[j].Split('.')[this.chemicalsAvailableForSynthesis[j].Split('.').Length - 1]) as Texture2D);
                        gameObject.name = this.chemicalsAvailableForSynthesis[j];
                        this.chemicalTiles.Add(gameObject);
                    }
                    this.chemicalSynthesisTileTemplate.SetActive(false);
                }
                this.chemicalSynthesisMenuWasOpen = true;
            }
            float num3 = 85f;
            int num4 = -1;
            for (int k = 0; k < this.chemicalTiles.Count; k++)
            {
                Vector3 localPosition = this.chemicalTiles[k].transform.localPosition;
                Vector3 localScale = this.chemicalSynthesisTileContainer.localScale;
                this.v32 = localPosition * localScale.x + this.chemicalSynthesisTileContainer.localPosition;
                this.v3.x = this.uiMouseX - this.v32.x;
                this.v3.y = (this.uiMouseY - this.v32.y) * 172f / 74f;
                this.v3.z = 0f;
                float magnitude = this.v3.magnitude;
                if (magnitude < num3)
                {
                    num3 = magnitude;
                    num4 = k;
                }
            }
            if (num4 != this.lastHoverChemical)
            {
                if (num4 != -1)
                {
                    UISFX.playHover();
                    if (this.showInvertedDefinition && this.chemicalTiles[num4].name != "Chemical.ChemicalNeutralizer")
                    {
                        this.chemicalSynthesis_txtChemicalDescription.setText(Localization.getPhrase(this.chemicalTiles[num4].name + " INVERTEDDESCRIPTION", string.Empty), 0.5f, 10f, false);
                        this.chemicalSynthesis_txtChemicalName.setText(Localization.getPhrase("Chemical.ChemicalNeutralizer PREFIX", string.Empty) + Localization.getPhrase(this.chemicalTiles[num4].name, string.Empty), 0f, 3f, false);
                    }
                    else
                    {
                        this.chemicalSynthesis_txtChemicalDescription.setText(Localization.getPhrase(this.chemicalTiles[num4].name + " DESCRIPTION", string.Empty), 0.5f, 10f, false);
                        this.chemicalSynthesis_txtChemicalName.setText(Localization.getPhrase(this.chemicalTiles[num4].name, string.Empty), 0f, 3f, false);
                    }
                    for (int l = 0; l < this.chemicalSynthesis_hoverCost.Length; l++)
                    {
                        int num5 = Inventory.getItemDefinition(this.chemicalTiles[num4].name).chemicalcosts[l];
                        if (this.showInvertedDefinition)
                        {
                            num5 += Inventory.getItemDefinition("Chemical.ChemicalNeutralizer").chemicalcosts[l];
                        }
                        if (num5 == 0)
                        {
                            this.chemicalSynthesis_hoverCostHex[l].color = this.originalChemicalHexColors[l] * 0.6f;
                            this.chemicalSynthesis_hoverCost[l].text = string.Empty;
                        }
                        else
                        {
                            this.chemicalSynthesis_hoverCost[l].text = num5.ToString();
                            this.chemicalSynthesis_hoverCostHex[l].color = this.originalChemicalHexColors[l] * 1f;
                        }
                    }
                }
                else if (this.chemicalSynthesis_selectedChemical == string.Empty)
                {
                    this.chemicalSynthesis_txtChemicalName.setText(string.Empty, 0f, 1f, false);
                    this.chemicalSynthesis_txtChemicalDescription.setText(string.Empty, 0f, 1f, false);
                    for (int m = 0; m < this.chemicalSynthesis_hoverCost.Length; m++)
                    {
                        this.chemicalSynthesis_hoverCost[m].text = string.Empty;
                        this.chemicalSynthesis_hoverCostHex[m].color = Color.black * 0f;
                    }
                }
                else
                {
                    if (this.chemicalSynthesis_inverting)
                    {
                        this.chemicalSynthesis_txtChemicalDescription.setText(Localization.getPhrase(this.chemicalSynthesis_selectedChemical + " INVERTEDDESCRIPTION", string.Empty), 0.5f, 10f, false);
                        this.chemicalSynthesis_txtChemicalName.setText(Localization.getPhrase("Chemical.ChemicalNeutralizer PREFIX", string.Empty) + Localization.getPhrase(this.chemicalSynthesis_selectedChemical, string.Empty), 0f, 3f, false);
                    }
                    else
                    {
                        this.chemicalSynthesis_txtChemicalDescription.setText(Localization.getPhrase(this.chemicalSynthesis_selectedChemical + " DESCRIPTION", string.Empty), 0.5f, 10f, false);
                        this.chemicalSynthesis_txtChemicalName.setText(Localization.getPhrase(this.chemicalSynthesis_selectedChemical, string.Empty), 0f, 3f, false);
                    }
                    for (int n = 0; n < this.chemicalSynthesis_hoverCost.Length; n++)
                    {
                        this.chemicalSynthesis_hoverCost[n].text = string.Empty;
                        this.chemicalSynthesis_hoverCostHex[n].color = Color.black * 0f;
                    }
                }
                this.lastHoverChemical = num4;
            }
            for (int num6 = 0; num6 < this.chemicalTiles.Count; num6++)
            {
                if (num4 == -1 || num4 == num6)
                {
                    Transform transform = this.chemicalTiles[num6].transform;
                    transform.localScale += (Vector3.one - this.chemicalTiles[num6].transform.localScale) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                }
                else
                {
                    Transform transform2 = this.chemicalTiles[num6].transform;
                    transform2.localScale += (Vector3.one * 0.8f - this.chemicalTiles[num6].transform.localScale) * Game.cap(Time.deltaTime * 8f, 0f, 1f);
                }
            }
            if (num4 != -1 && Input.GetMouseButtonDown(0))
            {
                UISFX.clickSFX(string.Empty);
                if (this.chemicalTiles[num4].name == "Chemical.ChemicalNeutralizer")
                {
                    if (this.chemicalSynthesis_selectedChemical == string.Empty || this.chemicalSynthesis_selectedChemical == "Chemical.ChemicalNeutralizer")
                    {
                        if (this.chemicalSynthesis_selectedChemical == "Chemical.ChemicalNeutralizer")
                        {
                            this.chemicalSynthesis_selectedChemicalQuantity++;
                        }
                        else
                        {
                            this.chemicalSynthesis_selectedChemical = this.chemicalTiles[num4].name;
                            this.chemicalSynthesis_selectedChemicalQuantity = 1;
                        }
                    }
                    else
                    {
                        this.chemicalSynthesis_inverting = !this.chemicalSynthesis_inverting;
                    }
                }
                else if (this.chemicalSynthesis_selectedChemical == string.Empty)
                {
                    this.chemicalSynthesis_selectedChemical = this.chemicalTiles[num4].name;
                    this.chemicalSynthesis_selectedChemicalQuantity = 1;
                }
                else if (this.chemicalSynthesis_selectedChemical == this.chemicalTiles[num4].name)
                {
                    this.chemicalSynthesis_selectedChemicalQuantity++;
                }
                else
                {
                    if (this.chemicalSynthesis_selectedChemical == "Chemical.ChemicalNeutralizer")
                    {
                        this.chemicalSynthesis_inverting = true;
                    }
                    this.chemicalSynthesis_selectedChemical = this.chemicalTiles[num4].name;
                    this.chemicalSynthesis_selectedChemicalQuantity = 1;
                }
                this.updateChemicalSynthesisCheckout();
            }
            this.showBackButton = true;
        }
        else if (this.chemicalSynthesisMenuWasOpen)
        {
            for (int num7 = 0; num7 < this.chemicalTiles.Count; num7++)
            {
                UnityEngine.Object.Destroy(this.chemicalTiles[num7]);
            }
            this.chemicalTiles = new List<GameObject>();
            this.chemicalSynthesisUI.SetActive(false);
            this.chemicalSynthesisMenuWasOpen = false;
        }
        this.processChemicalCompoundUI();
    }

    public void updateChemicalUI()
    {
        this.selectedChemicalCompoundID = -1;
        bool flag = false;
        for (int i = 0; i < Inventory.data.chemicalcompounds.Count; i++)
        {
            if (Inventory.data.chemicalcompounds[i].name == UserSettings.data.selectedChemicalCompound)
            {
                this.selectedChemicalCompoundID = i;
                flag = true;
            }
        }
        if (!flag)
        {
            UserSettings.data.selectedChemicalCompound = string.Empty;
        }
        if (UserSettings.data.selectedChemicalCompound == string.Empty && Inventory.data.chemicalcompounds.Count > 0)
        {
            UserSettings.data.selectedChemicalCompound = Inventory.data.chemicalcompounds[0].name;
            this.selectedChemicalCompoundID = 0;
        }
        if (Game.selectedChemicalWasJustForciblyChanged && !Input.GetMouseButton(0))
        {
            Game.selectedChemicalWasJustForciblyChanged = false;
        }
    }

    public void processChemicalCompoundUI()
    {
        if (!this.inittedChemicalCompoundUI && this.PC() != null)
        {
            this.updateChemicalUI();
            this.inittedChemicalCompoundUI = true;
        }
        if (this.PC() == null)
        {
            this.inittedChemicalCompoundUI = false;
        }
    }

    public void processEmotes()
    {
        if (this.PC() != null)
        {
            for (int i = 0; i < this.characters.Count; i++)
            {
                RackCharacter rackCharacter = this.characters[i];
                rackCharacter.emoteOffset *= 0f;
                if (!(this.characters[i].emoteTime <= 0f))
                {
                    for (int j = i + 1; j < this.characters.Count; j++)
                    {
                        if (!(this.characters[j].emoteTime <= 0f))
                        {
                            Vector3 vector = this.characters[j].emote.transform.localPosition - this.characters[i].emote.transform.localPosition;
                            vector.y *= 0.3f;
                            if (vector.magnitude < 150f)
                            {
                                vector.y *= 4f;
                                this.characters[i].emoteOffset = -vector.normalized * 150f;
                                this.characters[j].emoteOffset = vector.normalized * 150f;
                            }
                        }
                    }
                }
            }
        }
    }

    public void clearFinishedObjectives()
    {
        Objectives.wipeCompletedObjectives();
    }

    public void processObjectiveMenu()
    {
        if ((UnityEngine.Object)this.objectivesMenu == (UnityEngine.Object)null)
        {
            this.objectivesMenu = this.UI.transform.Find("ObjectivesMenu").Find("menu");
            this.cmdClearObjectives = this.objectivesMenu.Find("cmdClear").gameObject;
            this.objectiveTemplate = this.UI.transform.Find("ObjectivesMenu").Find("menu").Find("objectives")
                .Find("ObjectiveTemplate")
                .gameObject;
            this.objectiveTemplate.SetActive(false);
            this.UI.transform.Find("ObjectivesMenu").gameObject.SetActive(true);
        }
        this.v3 = Vector3.zero;
        this.v3.y = -85f;
        if (Input.GetKeyDown(UserSettings.data.KEY_TOGGLE_OBJECTIVES) && (!UserSettings.data.hideObjectivesDuringSex || this.currentInteraction == null))
        {
            this.showObjectives = !this.showObjectives;
            UISFX.playHover();
        }
        if (!this.showObjectives || this.customizingCharacter || Objectives.objectives.Count == 0 || (this.currentInteraction != null && UserSettings.data.hideObjectivesDuringSex && !Input.GetKey(UserSettings.data.KEY_TOGGLE_OBJECTIVES)))
        {
            this.v3.x = -500f;
        }
        if (this.sexPoseMenuWasOpen)
        {
            this.v3.y = -90f - 45f * (float)this.numSexPosesShown;
        }
        else
        {
            if (this.UIinUse)
            {
                this.v3.x = -500f;
            }
            if (this.timeSinceWastedSpecimen < 7f)
            {
                this.v3.y -= 65f;
            }
        }
        Transform transform = this.objectivesMenu;
        transform.localPosition += (this.v3 - this.objectivesMenu.localPosition) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
        this.visibleObjectives = 0;
        for (int i = 0; i < Objectives.objectives.Count; i++)
        {
            if (Objectives.objectives[i].completed || !Objectives.objectives[i].secret)
            {
                this.visibleObjectives++;
            }
        }
        while (this.objectivePanels.Count < this.visibleObjectives)
        {
            GameObject gameObject = UnityEngine.Object.Instantiate(this.objectiveTemplate);
            gameObject.SetActive(true);
            this.v3.x = 0f;
            this.v3.y = (float)(-25 * this.objectivePanels.Count);
            this.v3.z = 0f;
            gameObject.transform.SetParent(this.objectiveTemplate.transform.parent);
            gameObject.transform.localScale = this.objectiveTemplate.transform.localScale;
            gameObject.transform.localRotation = this.objectiveTemplate.transform.localRotation;
            gameObject.transform.localPosition = this.v3;
            ((UnityEngine.Component)gameObject.transform.Find("txt")).GetComponent<ScienceTextAnimator>().setText(string.Empty, 0f, 3f, false);
            this.objectivePanelMarkers.Add(gameObject.transform.Find("marker"));
            gameObject.transform.Find("marker").SetParent(this.UI.transform.Find("WorldMarkerContainer"));
            this.objectivePanels.Add(gameObject);
        }
        while (this.objectivePanels.Count > this.visibleObjectives)
        {
            UnityEngine.Object.Destroy(this.objectivePanels[this.objectivePanels.Count - 1]);
            this.objectivePanels.RemoveAt(this.objectivePanels.Count - 1);
            UnityEngine.Object.Destroy(this.objectivePanelMarkers[this.objectivePanelMarkers.Count - 1]);
            this.objectivePanelMarkers.RemoveAt(this.objectivePanelMarkers.Count - 1);
        }
        int num = 0;
        bool active = false;
        for (int j = 0; j < Objectives.objectives.Count; j++)
        {
            if (Objectives.objectives[j].completed || !Objectives.objectives[j].secret)
            {
                if (((UnityEngine.Component)this.objectivePanels[num].transform.Find("txt")).GetComponent<ScienceTextAnimator>().finalText != Objectives.objectives[j].description)
                {
                    ((UnityEngine.Component)this.objectivePanels[num].transform.Find("txt")).GetComponent<ScienceTextAnimator>().setText(Objectives.objectives[j].description, 0f, 3f, false);
                }
                this.v3 = Vector3.zero;
                this.v3.y = -130f * (1f - Objectives.objectives[j].completion);
                this.objectivePanels[num].transform.Find("progressDot").Find("fill").localPosition = this.v3;
                this.v3.y *= -1f;
                this.objectivePanels[num].transform.Find("progressDot").Find("fill").Find("mask")
                    .localPosition = this.v3;
                if (Objectives.objectives[j].hasMarker && !Objectives.objectives[j].completed)
                {
                    this.v3 = this.mainCam.transform.InverseTransformPoint(Objectives.objectives[j].markerPosition);
                    this.objectivePanelMarkers[num].gameObject.SetActive(this.v3.z > 0f);
                    this.objectivePanelMarkers[num].localPosition = this.worldToScreen(Objectives.objectives[j].markerPosition, true, 3000f);
                    this.objectivePanelMarkers[num].localScale = Vector3.one * (1f + Mathf.Cos(Time.time * 10f) * 0.1f) / Game.cap(this.v3.magnitude * 0.05f, 1f, 6f);
                    this.v3 = this.camTarget_actual - Objectives.objectives[j].markerPosition;
                    this.col = Color.white;
                    this.col.a = Game.cap(this.v3.magnitude * 0.1f - 1.5f, 0f, 1f);
                    ((UnityEngine.Component)this.objectivePanelMarkers[num]).GetComponent<Image>().color = this.col;
                }
                else
                {
                    this.objectivePanelMarkers[num].gameObject.SetActive(false);
                }
                if (Objectives.objectives[j].completed)
                {
                    if (Objectives.objectives[j].bad)
                    {
                        this.col.r = 0.8039216f;
                        this.col.g = 0.470588237f;
                        this.col.b = 0.2f;
                        this.col.a = 1f;
                    }
                    else
                    {
                        this.col.r = 0.5529412f;
                        this.col.g = 0.8039216f;
                        this.col.b = 0.2f;
                        this.col.a = 1f;
                        active = true;
                    }
                }
                else
                {
                    switch (Objectives.objectives[j].source)
                    {
                        case 0:
                            this.col.r = 0.2f;
                            this.col.g = 0.4392157f;
                            this.col.b = 0.8039216f;
                            this.col.a = 1f;
                            break;
                        case 1:
                            this.col.r = 0.627451f;
                            this.col.g = 0.2f;
                            this.col.b = 0.8039216f;
                            this.col.a = 1f;
                            break;
                        case 2:
                            this.col.r = 0.5529412f;
                            this.col.g = 0.8039216f;
                            this.col.b = 0.2f;
                            this.col.a = 1f;
                            break;
                        case 3:
                            this.col.r = 0.8039216f;
                            this.col.g = 0.470588237f;
                            this.col.b = 0.2f;
                            this.col.a = 1f;
                            break;
                    }
                }
                    ((UnityEngine.Component)this.objectivePanels[num].transform.Find("progressDot").Find("frame")).GetComponent<Image>().color = this.col;
                ((UnityEngine.Component)this.objectivePanels[num].transform.Find("progressDot").Find("fill").Find("mask")).GetComponent<Image>().color = this.col;
                if (Objectives.objectives[j].completed)
                {
                    ((UnityEngine.Component)this.objectivePanels[num].transform.Find("txt")).GetComponent<Text>().color = this.col;
                }
                else
                {
                    ((UnityEngine.Component)this.objectivePanels[num].transform.Find("txt")).GetComponent<Text>().color = Color.white;
                }
                this.cmdClearObjectives.SetActive(active);
                num++;
            }
        }
    }

    public void toggleLightingControlPanel(Transform panel)
    {
        this.currentLightingControlPanelOpen = panel;
        this.addGadget("LightingControlPanel", true, null);
    }

    public void addGadget(string name, bool limitToOne = false, SexToy sexToy = null)
    {
        if (this.activeGadgets.Contains(name) && limitToOne)
        {
            return;
        }
        this.activeGadgets.Add(name);
        this.gadgetsJustTurnedOn.Add(this.activeGadgets.Count - 1);
        this.activeGadgetSexToys.Add(sexToy);
        this.gadgetGOs.Add(null);
    }

    public void killGadget(string name)
    {
        int num = this.activeGadgets.IndexOf(name);
        if (num != -1)
        {
            this.gadgetsToKill.Add(num);
        }
    }

    public bool updateLightsBasedOnLCP()
    {
        for (int i = 0; i < this.LCPpanels.Count; i++)
        {
            LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[this.LCPpanelIDs[i]].customProperties.enabled = ((UnityEngine.Component)this.LCPpanels[i].transform.Find("switch")).GetComponent<UISwitch>().on;
            LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[this.LCPpanelIDs[i]].customProperties.power = ((UnityEngine.Component)this.LCPpanels[i].transform.Find("slider")).GetComponent<Slider>().val;
            LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[this.LCPpanelIDs[i]].customProperties.color = ((UnityEngine.Component)this.LCPpanels[i].transform.Find("colorpicker").Find("color")).GetComponent<CanvasRenderer>().GetColor();
        }
        LayoutManager.saveLayoutData();
        this.needRoomReflectionUpdate = true;
        return true;
    }

    public void createStandardGadgetUI(int g)
    {
        this.gadgetGOs[g] = UnityEngine.Object.Instantiate(this.UI.transform.Find("GadgetInterfaces").Find(this.activeGadgets[g].Split('.')[0]).gameObject);
        this.gadgetGOs[g].SetActive(true);
        this.gadgetGOs[g].transform.SetParent(this.UI.transform.Find("GadgetInterfaces").Find("gadgetContainer"));
        this.gadgetGOs[g].transform.localScale = Vector3.one;
        this.gadgetGOs[g].transform.localEulerAngles = Vector3.zero;
        this.gadgetGOs[g].transform.localPosition = Vector3.zero;
    }

    public void positionGadgetUI(int g)
    {
        this.gadgetwidth = this.gadgetGOs[g].GetComponent<RectTransform>().rect.width;
        this.gadgetheight = this.gadgetGOs[g].GetComponent<RectTransform>().rect.height;
        this.v3.x = 0f - this.gadgetwidth * 0.5f;
        this.v3.y = 0f - this.gadgetUIposY - this.gadgetheight * 0.5f;
        this.v3.z = 0f;
        this.gadgetGOs[g].transform.localPosition = this.v3;
        this.gadgetUIposY += this.gadgetheight + 10f;
    }

    public void initGadgetUIvalues(int g)
    {
        ((UnityEngine.Component)this.gadgetGOs[g].transform.Find("switch")).GetComponent<UISwitch>().on = this.activeGadgetSexToys[g].on;
        ((UnityEngine.Component)this.gadgetGOs[g].transform.Find("slider")).GetComponent<Slider>().val = this.activeGadgetSexToys[g].power;
    }

    public void pollGadgetUIvalues(int g)
    {
        this.activeGadgetSexToys[g].power = ((UnityEngine.Component)this.gadgetGOs[g].transform.Find("slider")).GetComponent<Slider>().val;
        this.activeGadgetSexToys[g].on = (((UnityEngine.Component)this.gadgetGOs[g].transform.Find("switch")).GetComponent<UISwitch>().on && this.activeGadgetSexToys[g].power > 0.1f);
    }

    public void setGadgetSubjectName(int g)
    {
        ((UnityEngine.Component)this.gadgetGOs[g].transform.Find("txtSubject")).GetComponent<Text>().text = this.activeGadgetSexToys[g].subject.data.name;
    }

    public void processGadgetUI()
    {
        if (Input.GetKeyDown(UserSettings.data.KEY_TOGGLE_HOLOGRAM_HUDS))
        {
            UISFX.playHover();
            BondageApparatus.showHologramHUDs = !BondageApparatus.showHologramHUDs;
        }
        if (Input.GetKeyDown(UserSettings.data.KEY_TOGGLE_GADGETS))
        {
            this.showGadgets = !this.showGadgets;
            UISFX.playHover();
        }
        this.UI.transform.Find("GadgetInterfaces").gameObject.SetActive((!this.UIinUse && this.currentInteraction == null && this.showGadgets && !this.customizingCharacter) || this.lightingControlPanelOpen);
        this.gadgetUIposY = 0f;
        for (int j = 0; j < this.activeGadgets.Count; j++)
        {
            switch (this.activeGadgets[j].Split('.')[0])
            {
                case "VibratingCockRing":
                    if (!this.gadgetsToKill.Contains(j))
                    {
                        if (this.gadgetsJustTurnedOn.Contains(j))
                        {
                            this.createStandardGadgetUI(j);
                            this.initGadgetUIvalues(j);
                            this.setGadgetSubjectName(j);
                        }
                        this.pollGadgetUIvalues(j);
                        this.positionGadgetUI(j);
                    }
                    break;
                case "LightingControlPanel":
                    if (this.gadgetsToKill.Contains(j))
                    {
                        this.UI.transform.Find("GadgetInterfaces").Find("LightingControlPanel").gameObject.SetActive(false);
                        for (int k = 0; k < this.LCPpanels.Count; k++)
                        {
                            UnityEngine.Object.Destroy(this.LCPpanels[k]);
                        }
                        this.LCPpanels = new List<GameObject>();
                        this.LCPpanelIDs = new List<int>();
                        this.lightingControlPanelOpen = false;
                    }
                    else
                    {
                        if (this.gadgetsJustTurnedOn.Contains(j))
                        {
                            this.UI.transform.Find("GadgetInterfaces").Find("LightingControlPanel").gameObject.SetActive(true);
                            if ((UnityEngine.Object)this.LCPpanelTemplate == (UnityEngine.Object)null)
                            {
                                this.LCPpanelTemplate = this.UI.transform.Find("GadgetInterfaces").Find("LightingControlPanel").Find("LightPanel")
                                    .gameObject;
                            }
                            this.LCPpanelTemplate.SetActive(true);
                            int num = 0;
                            for (int l = 0; l < LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items.Count; l++)
                            {
                                GameObject gameObject = UnityEngine.Object.Instantiate(this.LCPpanelTemplate);
                                gameObject.transform.SetParent(this.LCPpanelTemplate.transform.parent);
                                gameObject.transform.localScale = Vector3.one;
                                this.v3.x = -235f + (float)(235 * (num % 3));
                                this.v3.y = 70f - 70f * Mathf.Floor((float)(num / 3));
                                this.v3.z = 0f;
                                gameObject.transform.localPosition = this.v3;
                                num++;
                                this.LCPpanels.Add(gameObject);
                                this.LCPpanelIDs.Add(l);
                                switch (LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[l].assetName)
                                {
                                    default:
                                        UnityEngine.Object.Destroy(gameObject);
                                        num--;
                                        this.LCPpanels.RemoveAt(this.LCPpanels.Count - 1);
                                        this.LCPpanelIDs.RemoveAt(this.LCPpanelIDs.Count - 1);
                                        break;
                                    case "ColoredCeilingLight":
                                    case "CeilingLight":
                                    case "ColoredSpotlight":
                                    case "Spotlight":
                                        gameObject.transform.Find("colorpicker").Find("grid").gameObject.SetActive(LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[l].assetName.IndexOf("Colored") != -1);
                                        this.col = LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[l].customProperties.color;
                                        this.col.a = 1f;
                                        ((UnityEngine.Component)gameObject.transform.Find("colorpicker").Find("color")).GetComponent<CanvasRenderer>().SetColor(this.col);
                                        ((UnityEngine.Component)gameObject.transform.Find("slider")).GetComponent<Slider>().phrase = Inventory.getItemDefinition(LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[l].assetName).displayName;
                                        ((UnityEngine.Component)gameObject.transform.Find("switch")).GetComponent<UISwitch>().onClick = this.updateLightsBasedOnLCP;
                                        ((UnityEngine.Component)gameObject.transform.Find("slider")).GetComponent<Slider>().onChange = this.updateLightsBasedOnLCP;
                                        ((UnityEngine.Component)gameObject.transform.Find("colorpicker")).GetComponent<LittleColorPicker>().onChange = this.updateLightsBasedOnLCP;
                                        ((UnityEngine.Component)gameObject.transform.Find("switch")).GetComponent<UISwitch>().on = LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[l].customProperties.enabled;
                                        ((UnityEngine.Component)gameObject.transform.Find("slider")).GetComponent<Slider>().val = LayoutManager.getLayoutByRoomID(((UnityEngine.Component)this.currentLightingControlPanelOpen).GetComponent<LabItemInWorld>().roomID).items[l].customProperties.power;
                                        break;
                                }
                            }
                            this.UI.transform.Find("GadgetInterfaces").Find("LightingControlPanel").Find("txtNone")
                                .gameObject.SetActive(this.LCPpanels.Count == 0);
                            this.LCPpanelTemplate.SetActive(false);
                            this.lightingControlPanelOpen = true;
                        }
                        if (this.needRoomReflectionUpdate && !Input.GetMouseButton(0))
                        {
                            this.updateRoomReflections();
                            this.needRoomReflectionUpdate = false;
                        }
                        this.showBackButton = true;
                    }
                    break;
            }
        }
        this.gadgetsJustTurnedOn = new List<int>();
        this.gadgetsToKill = (from i in this.gadgetsToKill
                              orderby i descending
                              select i).ToList();
        for (int m = 0; m < this.gadgetsToKill.Count; m++)
        {
            this.activeGadgets.RemoveAt(this.gadgetsToKill[m]);
            this.activeGadgetSexToys.RemoveAt(this.gadgetsToKill[m]);
            if ((UnityEngine.Object)this.gadgetGOs[this.gadgetsToKill[m]] != (UnityEngine.Object)null)
            {
                UnityEngine.Object.Destroy(this.gadgetGOs[this.gadgetsToKill[m]]);
            }
            this.gadgetGOs.RemoveAt(this.gadgetsToKill[m]);
        }
        this.gadgetsToKill = new List<int>();
    }

    public void gotPatronData()
    {
        this.patreonSupporters = this.rawPatreonData.Split(new string[1]
        {
                                                                                                                                                                                                                                                                                                                                " ♠ "
        }, StringSplitOptions.None);
        for (int i = 0; i < this.patreonSupporters.Length; i++)
        {
            if (this.patreonSupporters[i] == string.Empty)
            {
                this.patreonSupporters[i] = "Anonymous";
                i--;
            }
        }
        this.nextPatron = Mathf.FloorToInt(UnityEngine.Random.value * (float)this.patreonSupporters.Length);
        for (int j = 0; j < 180; j++)
        {
            this.nextPatron = (this.nextPatron + 1) % this.patreonSupporters.Length;
            Text component = ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons" + j % 2)).GetComponent<Text>();
            component.text = component.text + this.patreonSupporters[this.nextPatron] + Environment.NewLine;
        }
    }

    public IEnumerator loadPatreonData(string url)
    {
        WWW www = new WWW(url + "?refresh=" + Guid.NewGuid());
        yield return (object)www;
        /*Error: Unable to find new state assignment for yield return*/
        if (www.error != string.Empty)
        {
            UnityEngine.Debug.Log("Failed to load patrons");
        }
        else
        {
            this.rawPatreonData = www.text;
        }
        yield break;
    }

    public void processCredits()
    {
        this.UI.transform.Find("CreditsWindow").gameObject.SetActive(this.creditsOpen);
        if (this.creditsOpen)
        {
            if (this.patreonFetchStatus == 0)
            {
                Game.gameInstance.StartCoroutine(this.loadPatreonData("http://fek.onl/patrons.php"));
                this.patreonFetchStatus = 1;
            }
            if (this.patreonFetchStatus == 1 && this.rawPatreonData != string.Empty)
            {
                this.gotPatronData();
                this.patreonFetchStatus = 2;
            }
            if (this.patreonFetchStatus == 2)
            {
                Transform transform = this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0");
                transform.localPosition += Vector3.up * Time.deltaTime * 3.5f;
                Transform transform2 = this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons1");
                transform2.localPosition += Vector3.up * Time.deltaTime * 3.5f;
                Vector3 localPosition = this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0")
                    .localPosition;
                if (localPosition.y > 51.2f)
                {
                    Transform transform3 = this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0");
                    transform3.localPosition += Vector3.up * -1.4f;
                    Transform transform4 = this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons1");
                    transform4.localPosition += Vector3.up * -1.4f;
                    string text = ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0")).GetComponent<Text>().text;
                    text = text.Substring(text.IndexOf(Environment.NewLine) + Environment.NewLine.Length);
                    text = text + this.patreonSupporters[this.nextPatron] + Environment.NewLine;
                    this.nextPatron = (this.nextPatron + 1) % this.patreonSupporters.Length;
                    ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0")).GetComponent<Text>().text = text;
                    text = ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons1")).GetComponent<Text>().text;
                    text = text.Substring(text.IndexOf(Environment.NewLine) + Environment.NewLine.Length);
                    text = text + this.patreonSupporters[this.nextPatron] + Environment.NewLine;
                    this.nextPatron = (this.nextPatron + 1) % this.patreonSupporters.Length;
                    ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons1")).GetComponent<Text>().text = text;
                }
                Text component = ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0")).GetComponent<Text>();
                component.color += (this.patronTextColor - ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons0")).GetComponent<Text>().color) * Game.cap(Time.deltaTime * 4f, 0f, 1f);
                Text component2 = ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons1")).GetComponent<Text>();
                component2.color += (this.patronTextColor - ((UnityEngine.Component)this.UI.transform.Find("CreditsWindow").Find("patreonArea").Find("txtPatrons1")).GetComponent<Text>().color) * Game.cap(Time.deltaTime * 4f, 0f, 1f);
            }
            this.showBackButton = true;
        }
    }

    public void processWarning()
    {
        if (this.warningDisplayTime > 0f)
        {
            this.warningDisplayTime -= Time.deltaTime;
        }
        this.UI.transform.Find("txtWarningMessage").gameObject.SetActive(this.warningDisplayTime > 0f);
        this.warningVelocity += (Game.cap(this.warningDisplayTime, 0f, 1f) - this.warningSize - this.warningVelocity * 0.45f) * Game.cap(Time.deltaTime * 75f, 0f, 1f);
        this.warningSize += this.warningVelocity * Game.cap(Time.deltaTime * 15f, 0f, 1f);
        this.UI.transform.Find("txtWarningMessage").localScale = Vector3.one * this.warningSize;
    }

    public void sexPoseRollover(int p)
    {
        this.sexPoseHover[p - 1] = true;
    }

    public void sexPoseRollout(int p)
    {
        this.sexPoseHover[p - 1] = false;
    }

    public void processSexPoseMenu()
    {
        if (this.PC() != null)
        {
            if (this.PC().interactionSubject != null && !this.inventoryOpen && !this.shopOpen && this.currentInteraction == null)
            {
                this.UI.transform.Find("PoseMenu").gameObject.SetActive(true);
                this.v3.x = 0f;
                this.v3.y = 0f;
                this.v3.z = 0f;
                Transform transform = this.UI.transform.Find("PoseMenu").Find("container");
                transform.localPosition += (this.v3 - this.UI.transform.Find("PoseMenu").Find("container").localPosition) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
                if (!this.sexPoseMenuWasOpen)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose0")
                        .Find("icon")).GetComponent<RawImage>().texture = (Resources.Load("sexpositionicons" + Game.PathDirectorySeparatorChar + string.Empty + this.PC().interactionApparatus.apparatusType + "_default") as Texture2D);
                    for (int i = 0; i < this.PC().interactionApparatus.publicPoseNames.Count; i++)
                    {
                        this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + (i + 1))
                            .gameObject.SetActive(this.PC().interactionApparatus.publicPoseNames[i] != string.Empty);
                        if (this.PC().interactionApparatus.publicPoseNames[i] != string.Empty)
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + (i + 1))
                                .Find("txt")).GetComponent<Text>().text = Localization.getPhrase("SEXPOSE_" + this.PC().interactionApparatus.publicPoseNames[i].ToUpper(), string.Empty);
                            ((UnityEngine.Component)this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + (i + 1))
                                .Find("icon")).GetComponent<RawImage>().texture = (Resources.Load("sexpositionicons" + Game.PathDirectorySeparatorChar + string.Empty + this.PC().interactionApparatus.apparatusType + "_" + this.PC().interactionApparatus.publicPoseNames[i]) as Texture2D);
                        }
                    }
                }
                this.numSexPosesShown = 0;
                for (int j = 0; j < 7; j++)
                {
                    if (j > 0)
                    {
                        if (this.PC().curSexPoseName == this.PC().interactionApparatus.publicPoseNames[j - 1])
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + j)
                                .Find("icon")).GetComponent<CanvasRenderer>().SetColor(Color.white);
                        }
                        else
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + j)
                                .Find("icon")).GetComponent<CanvasRenderer>().SetColor(Game.fadedCol);
                        }
                        if (this.PC().interactionApparatus.publicPoseNames[j - 1] != string.Empty)
                        {
                            this.v3 = this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + j)
                                .localPosition;
                            if (this.sexPoseHover[j - 1])
                            {
                                this.v3.x = -150f;
                                this.numSexPosesShown++;
                            }
                            else
                            {
                                this.v3.x = -300f;
                            }
                            Transform transform2 = this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + j);
                            transform2.localPosition += (this.v3 - this.UI.transform.Find("PoseMenu").Find("container").Find("cmdPose" + j)
                                .localPosition) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
                        }
                    }
                }
                this.sexPoseMenuWasOpen = true;
            }
            else
            {
                Vector3 localPosition = this.UI.transform.Find("PoseMenu").Find("container").localPosition;
                if (localPosition.x < -190f)
                {
                    this.UI.transform.Find("PoseMenu").gameObject.SetActive(false);
                }
                else
                {
                    this.v3.x = -200f;
                    this.v3.y = 0f;
                    this.v3.z = 0f;
                    Transform transform3 = this.UI.transform.Find("PoseMenu").Find("container");
                    transform3.localPosition += (this.v3 - this.UI.transform.Find("PoseMenu").Find("container").localPosition) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
                }
                this.sexPoseMenuWasOpen = false;
            }
        }
    }

    public bool confirmTermination(MenuOption mo)
    {
        UISFX.clickSFX(string.Empty);
        this.fadeToBlackThen(this.finishTermination);
        return true;
    }

    public bool closeSatisfaction(MenuOption mo)
    {
        this.satisfactionMessageOpen = false;
        return true;
    }

    public void showSatisfactionMessage(int satisfactionRating, int earnings)
    {
        this.satisfactionMessageOpen = true;
        this.mostRecentSatisfactionRating = satisfactionRating;
        ((UnityEngine.Component)this.UI.transform.Find("SatisfactionResults").Find("txtMessage")).GetComponent<Text>().text = Localization.getPhrase("SATISFACTION_MESSAGE_" + satisfactionRating, string.Empty);
        ((UnityEngine.Component)this.UI.transform.Find("SatisfactionResults").Find("txtMoney")).GetComponent<Text>().text = earnings.ToString();
    }

    public void finishTermination()
    {
        if (this.PC().interactionSubject != null)
        {
            if (((UnityEngine.Component)this.UI.transform.Find("TerminateConfirm").Find("chkSave")).GetComponent<Toggle>().isOn)
            {
                Inventory.data.favoriteCharacters.Add(this.PC().interactionSubject.data.uid);
                Inventory.saveInventoryData();
                this.PC().interactionSubject.saveMe(true);
            }
            if (this.PC().interactionSubject.satisfactionValue > 0f)
            {
                int num = Mathf.FloorToInt(this.PC().interactionSubject.satisfaction * this.PC().interactionSubject.satisfactionValue);
                int satisfactionRating = Mathf.FloorToInt(this.PC().interactionSubject.satisfaction * 7f);
                this.showSatisfactionMessage(satisfactionRating, num);
                Inventory.addMoney(num);
            }
            this.PC().interactionApparatus.terminate();
            int num2 = 0;
            while (num2 < this.currentTestSubjects.Count)
            {
                if (this.currentTestSubjects[num2].uid != this.PC().interactionSubject.uid)
                {
                    num2++;
                    continue;
                }
                this.currentTestSubjects.RemoveAt(num2);
                break;
            }
            this.removeCharacter(this.PC().interactionSubject);
            this.PC().leaveInteraction();
        }
    }

    public void terminateSession()
    {
        UISFX.clickSFX(string.Empty);
        this.confirmingTerminate = true;
    }

    public void processSatisfactionResults()
    {
        this.UI.transform.Find("SatisfactionResults").gameObject.SetActive(this.satisfactionMessageOpen);
    }

    public void processTerminateMenu()
    {
        if (this.hideTerminateMenuForTutorialReasons && !UserSettings.needTutorial("NPT_BRING_YOURSELF_TO_ORGASM"))
        {
            this.hideTerminateMenuForTutorialReasons = false;
        }
        if (this.PC() != null)
        {
            this.v3 = this.UI.transform.Find("TerminateMenu").Find("cmdTerminate").transform.localPosition;
            float num = 0f;
            num = ((this.PC().interactionSubject == null || this.confirmingTerminate || this.inventoryOpen || this.currentInteraction != null || this.hideTerminateMenuForTutorialReasons) ? 240f : ((!this.hoveringOverTerminateButton) ? 170f : 0f));
            this.v3.x += (num - this.v3.x) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
            this.UI.transform.Find("TerminateMenu").Find("cmdTerminate").transform.localPosition = this.v3;
            this.UI.transform.Find("TerminateConfirm").gameObject.SetActive(this.confirmingTerminate);
            if (this.confirmingTerminate)
            {
                if (this.PC().interactionApparatus.boundCharacter.satisfactionValue > 0f)
                {
                    this.satisfactionString = "\r\n" + Mathf.FloorToInt(this.PC().interactionApparatus.boundCharacter.satisfaction * 1000f) / 10 + "% " + Localization.getPhrase("CLIENT_SATISFACTION", string.Empty);
                }
                else
                {
                    this.satisfactionString = string.Empty;
                }
                ((UnityEngine.Component)this.UI.transform.Find("TerminateConfirm").Find("txt")).GetComponent<Text>().text = this.PC().interactionSubject.data.name.ToUpper() + "\r\n\r\n" + Mathf.FloorToInt(this.PC().interactionApparatus.totalSessionSpecimenCollected * 10f) / 10 + " " + Localization.getPhrase("SAMPLES_READY_FOR_COLLECTION", string.Empty) + this.satisfactionString + "\r\n\r\n" + Localization.getPhrase("WOULD_YOU_LIKE_TO_END_SESSION", string.Empty);
                this.showBackButton = true;
            }
        }
    }

    public void fadeToBlackThen(Action func)
    {
        this.fadingToBlack = true;
        this.fadeToBlackActions.Add(func);
    }

    public void processBlacker()
    {
        this.blackerColor = Color.black;
        this.stillThinkingAfterFirstSpeciesSelection = (this.stillThinkingAfterFirstSpeciesSelection && (this.anythingLoading || this.recentThinking > 0f));
        if (this.justTeleportedToHallway > 0f)
        {
            this.justTeleportedToHallway -= Time.deltaTime;
        }
        if (this.fadingToBlack)
        {
            this.UI.transform.Find("blacker").gameObject.SetActive(true);
            this.blackAmount += (1.05f - this.blackAmount) * Game.cap(Time.deltaTime * 7f, 0f, 1f);
            this.blackerColor.a = Game.cap(this.blackAmount, 0f, 1f);
            ((UnityEngine.Component)this.UI.transform.Find("blacker")).GetComponent<Image>().color = this.blackerColor;
            if (this.blackAmount >= 1f)
            {
                for (int i = 0; i < this.fadeToBlackActions.Count; i++)
                {
                    this.fadeToBlackActions[i]();
                }
                this.fadeToBlackActions = new List<Action>();
                this.fadingToBlack = false;
            }
        }
        else if (this.characterSelectorOpen && (this.randomCharactersForSelection.Count < Game.maxCharactersForSelector || this.anyRandomCharsStillInitting))
        {
            this.UI.transform.Find("blacker").gameObject.SetActive(true);
            this.blackAmount += (1.05f - this.blackAmount) * Game.cap(Time.deltaTime * 7f, 0f, 1f);
            this.blackerColor.a = Game.cap(this.blackAmount, 0f, 1f);
            ((UnityEngine.Component)this.UI.transform.Find("blacker")).GetComponent<Image>().color = this.blackerColor;
        }
        else if (NPC.waitingForBlackoutElevator)
        {
            this.UI.transform.Find("blacker").gameObject.SetActive(true);
            this.blackAmount += (1.05f - this.blackAmount) * Game.cap(Time.deltaTime * 7f, 0f, 1f);
            this.blackerColor.a = Game.cap(this.blackAmount, 0f, 1f);
            ((UnityEngine.Component)this.UI.transform.Find("blacker")).GetComponent<Image>().color = this.blackerColor;
        }
        else if (this.firstCustomizationSpeciesSelection || this.stillThinkingAfterFirstSpeciesSelection || this.justTeleportedToHallway > 0f || this.renderingHeadshot || this.waitingOnPostCustomizationSnapshot || (this.PC() == null && !this.titleOpen && this.loadTransition > 0.9f))
        {
            this.UI.transform.Find("blacker").gameObject.SetActive(true);
            if (this.PC() == null || this.firstCustomizationSpeciesSelection)
            {
                this.blackAmount = 1.05f;
            }
            else
            {
                this.blackAmount += (1.05f - this.blackAmount) * Game.cap(Time.deltaTime * 3f, 0f, 1f);
            }
            this.blackerColor.a = Game.cap(this.blackAmount, 0f, 1f);
            ((UnityEngine.Component)this.UI.transform.Find("blacker")).GetComponent<Image>().color = this.blackerColor;
        }
        else if (this.blackAmount > 0f)
        {
            if (Inventory.getCharVar("startingStuffGiven") == 0f)
            {
                this.blackAmount += (-0.05f - this.blackAmount) * Game.cap(Time.deltaTime * 0.75f, 0f, 1f);
            }
            else
            {
                this.blackAmount += (-0.05f - this.blackAmount) * Game.cap(Time.deltaTime * 2.5f, 0f, 1f);
            }
            this.blackAmount = Game.cap(this.blackAmount, 0f, 1f);
            this.blackerColor.a = Game.cap(this.blackAmount, 0f, 1f);
            ((UnityEngine.Component)this.UI.transform.Find("blacker")).GetComponent<Image>().color = this.blackerColor;
        }
        else
        {
            this.UI.transform.Find("blacker").gameObject.SetActive(false);
        }
    }

    public void initResearch()
    {
        ResearchList.init();
        this.ResearchHologram = this.World.transform.Find("ResearchHologram").gameObject;
        this.ResearchHotspotBeacon = this.ResearchHologram.transform.Find("HotspotBeacon").gameObject;
        this.ResearchHotspotBeacon.SetActive(false);
        this.ResearchHologram.SetActive(false);
        this.researchHotspots = new List<ResearchGrid>();
    }

    public void openResearch()
    {
        if (!this.inResearchMode)
        {
            Inventory.updateResearchTasks();
            this.locationBeforeEnteringResearchHologram = this.PC().GO.transform.position;
            this.ResearchHologram.SetActive(true);
            this.PC().ignoreCollisions(this.ResearchHologram.transform.Find("sphereFloor"), false, null);
            this.inResearchMode = true;
            this.takingResearchTransitionScreenshot = true;
            this.researchTransition = 1f;
            for (int i = 0; i < this.researchHotspots.Count; i++)
            {
                for (int j = 0; j < this.researchHotspots[i].tiles.Length; j++)
                {
                    UnityEngine.Object.Destroy(this.researchHotspots[i].tiles[j]);
                }
                UnityEngine.Object.Destroy(this.researchHotspots[i].beacon);
                UnityEngine.Object.Destroy(this.researchHotspots[i].pointer.gameObject);
                UnityEngine.Object.Destroy(this.researchHotspots[i].GO);
            }
            this.researchHotspots = new List<ResearchGrid>();
            this.populateResearchHotspots();
            this.playSound("enter_hologram", 1f, 1f);
        }
    }

    public void researchTaskComplete(string id, int val = 0, int type = 0)
    {
        if (UserSettings.needTutorial("NPT_COMPLETE_A_RESEARCH_PROJECT"))
        {
            Objectives.completeObjective("NPT_COMPLETE_A_RESEARCH_PROJECT");
            UserSettings.completeTutorial("NPT_COMPLETE_A_RESEARCH_PROJECT");
        }
        if (UserSettings.needTutorial("NPT_COMPLETE_THE_DILDO_RESEARCH_PROJECT") && id == "Dildo")
        {
            Objectives.completeObjective("NPT_COMPLETE_THE_DILDO_RESEARCH_PROJECT");
            UserSettings.completeTutorial("NPT_COMPLETE_THE_DILDO_RESEARCH_PROJECT");
        }
        this.playSound("research_complete", 1f, 1f);
        this.researchToastTime = 0f;
        this.researchToastPlaying = true;
        ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtResearchComplete")).GetComponent<Text>().text = Localization.getPhrase("RESEARCH_COMPLETE", string.Empty);
        if (id == "ChemicalConversion")
        {
            string str = string.Empty;
            switch (type)
            {
                case 0:
                    str = Localization.getPhrase("CHEMICAL_RED", string.Empty);
                    break;
                case 1:
                    str = Localization.getPhrase("CHEMICAL_ORANGE", string.Empty);
                    break;
                case 2:
                    str = Localization.getPhrase("CHEMICAL_YELLOW", string.Empty);
                    break;
                case 3:
                    str = Localization.getPhrase("CHEMICAL_GREEN", string.Empty);
                    break;
                case 4:
                    str = Localization.getPhrase("CHEMICAL_BLUE", string.Empty);
                    break;
                case 5:
                    str = Localization.getPhrase("CHEMICAL_PURPLE", string.Empty);
                    break;
            }
            ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtID")).GetComponent<Text>().text = val.ToString() + " " + str;
            Inventory.addChemical(type, val);
        }
        else if (id == "PaidResearch")
        {
            ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtID")).GetComponent<Text>().text = val.ToString();
            Inventory.addMoney(val);
        }
        else
        {
            ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtID")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(id).displayName, string.Empty);
        }
        ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtCTA")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(id).unlockCTA, string.Empty);
    }

    public void populateResearchHotspots()
    {
        for (int i = 0; i < Inventory.data.researchTasks.Count; i++)
        {
            if (!Inventory.data.researchTasks[i].completed)
            {
                for (int j = 0; j < this.researchHotspots.Count; j++)
                {
                    if (!(Inventory.data.researchTasks[i].id == this.researchHotspots[j].taskID))
                    {
                        continue;
                    }
                }
                ResearchGrid researchGrid = new ResearchGrid(this);
                researchGrid.GO.transform.SetParent(this.ResearchHologram.transform.Find("sphereFloor"));
                float num = 1f;
                this.v3.x = num * Mathf.Cos(Inventory.data.researchTasks[i].globePositionX * 3.1415f / 180f) * Mathf.Cos(Inventory.data.researchTasks[i].globePositionY * 3.1415f / 180f);
                this.v3.y = num * Mathf.Sin(Inventory.data.researchTasks[i].globePositionY * 3.1415f / 180f);
                this.v3.z = num * Mathf.Sin(Inventory.data.researchTasks[i].globePositionX * 3.1415f / 180f) * Mathf.Cos(Inventory.data.researchTasks[i].globePositionY * 3.1415f / 180f);
                researchGrid.GO.transform.localPosition = this.v3;
                researchGrid.GO.transform.LookAt(this.ResearchHologram.transform.Find("sphereFloor").transform.position);
                researchGrid.GO.transform.Rotate(90f, 0f, 0f);
                researchGrid.taskID = Inventory.data.researchTasks[i].id;
                researchGrid.taskValue = Inventory.data.researchTasks[i].value;
                researchGrid.taskType = Inventory.data.researchTasks[i].type;
                researchGrid.taskCategory = Inventory.data.researchTasks[i].category;
                researchGrid.taskCompletion = Inventory.data.researchTasks[i].completionAmount;
                this.ResearchHotspotBeacon.SetActive(true);
                researchGrid.beacon = UnityEngine.Object.Instantiate(this.ResearchHotspotBeacon);
                researchGrid.beacon.transform.SetParent(researchGrid.GO.transform);
                researchGrid.beacon.transform.localPosition = Vector3.zero;
                researchGrid.beacon.transform.localEulerAngles = Vector3.zero;
                ((UnityEngine.Component)researchGrid.beacon.transform.Find("panel").Find("txtName")).GetComponent<TextMesh>().text = Localization.getPhrase(Inventory.getItemDefinition(researchGrid.taskID).displayName, string.Empty);
                ((UnityEngine.Component)researchGrid.beacon.transform.Find("panel").Find("txtComplete")).GetComponent<TextMesh>().text = Mathf.FloorToInt(Inventory.data.researchTasks[i].completionAmount * 100f) + "%";
                researchGrid.pointer = researchGrid.beacon.transform.Find("pointer");
                researchGrid.pointer.SetParent(this.ResearchHologram.transform.Find("playerContainer"));
                researchGrid.pointer.localScale = Vector3.one;
                researchGrid.pointer.localPosition = Vector3.zero;
                researchGrid.pointer.localRotation = Quaternion.identity;
                this.ResearchHotspotBeacon.SetActive(false);
                this.researchHotspots.Add(researchGrid);
                for (int k = 0; k < Inventory.data.researchTasks[i].solutionPoints.Count; k++)
                {
                    researchGrid.setTileSolution(k, Inventory.data.researchTasks[i].solutionPoints[k] + 1, true);
                }
                for (int l = 0; l < Inventory.data.researchTasks[i].guesses.Count; l++)
                {
                    researchGrid.setGuess(l, Inventory.data.researchTasks[i].guesses[l] + 1, true);
                }
                researchGrid.updateTiles();
            }
        }
    }

    public void processResearchToast()
    {
        this.UI.transform.Find("ResearchToast").gameObject.SetActive(this.researchToastPlaying);
        if (this.researchToastPlaying)
        {
            this.researchToastTime += Time.deltaTime;
            if (this.researchToastTime > 5f)
            {
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("bg")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((5.5f - this.researchToastTime) * 2f, 0f, 1f));
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtResearchComplete")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((5.5f - this.researchToastTime) * 2f, 0f, 1f));
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtID")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((5.5f - this.researchToastTime) * 2f, 0f, 1f));
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtCTA")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((5.5f - this.researchToastTime) * 2f, 0f, 1f));
            }
            else
            {
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("bg")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((this.researchToastTime - 1f) * 3f, 0f, 1f));
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtResearchComplete")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((this.researchToastTime - 1.3f) * 3f, 0f, 1f));
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtID")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((this.researchToastTime - 1.5f) * 3f, 0f, 1f));
                ((UnityEngine.Component)this.UI.transform.Find("ResearchToast").Find("txtCTA")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap((this.researchToastTime - 2.25f) * 3f, 0f, 1f));
            }
            if (this.researchToastTime >= 5.5f)
            {
                this.researchToastPlaying = false;
            }
        }
    }

    public void processResearch()
    {
        this.processResearchToast();
        this.wasAnyResearchHotspotBeingUsed = this.anyResearchHotspotBeingUsed;
        this.anyResearchHotspotBeingUsed = false;
        if (!this.takingResearchTransitionScreenshot)
        {
            if (this.researchTransition > 0f)
            {
                this.researchTransition -= Time.deltaTime;
                ((UnityEngine.Component)this.UI.transform.Find("WorldTransition").Find("img")).GetComponent<CanvasRenderer>().SetAlpha(this.researchTransition);
                this.v3 = Vector3.one * (2f - this.researchTransition);
                this.UI.transform.Find("WorldTransition").Find("img").localScale = this.v3;
                if (this.researchTransition <= 0f)
                {
                    this.UI.transform.Find("WorldTransition").Find("img").gameObject.SetActive(false);
                }
            }
            if (this.inResearchMode)
            {
                this.showBackButton = true;
                this.v3 = this.PC().GO.transform.position - this.ResearchHologram.transform.Find("playerContainer").position;
                this.v3.y = 0f;
                this.ResearchHologram.transform.Find("sphereFloor").Rotate(this.PC().GO.transform.right, this.v3.magnitude * 1.68f, Space.World);
                RackCharacter rackCharacter = this.PC();
                Vector3 position = this.ResearchHologram.transform.Find("playerContainer").position;
                float x = position.x;
                Vector3 position2 = this.PC().GO.transform.position;
                float y = position2.y;
                Vector3 position3 = this.ResearchHologram.transform.Find("playerContainer").position;
                float z = position3.z;
                Vector3 localEulerAngles = this.PC().GO.transform.localEulerAngles;
                rackCharacter.teleport(x, y, z, localEulerAngles.y, true);
                for (int i = 0; i < this.researchHotspots.Count; i++)
                {
                    this.researchHotspots[i].process();
                    if (this.researchHotspots[i].gridInUse)
                    {
                        this.anyResearchHotspotBeingUsed = true;
                    }
                    if (this.researchHotspots[i].taskCompletion == 1f)
                    {
                        for (int j = 0; j < Inventory.data.researchTasks.Count; j++)
                        {
                            if (Inventory.data.researchTasks[j].id == this.researchHotspots[i].taskID)
                            {
                                Inventory.data.researchTasks[j].completionAmount = 1f;
                                Inventory.data.researchTasks[j].completed = true;
                            }
                        }
                        this.researchTaskComplete(this.researchHotspots[i].taskID, this.researchHotspots[i].taskValue, this.researchHotspots[i].taskType);
                        for (int k = 0; k < this.researchHotspots[i].tiles.Length; k++)
                        {
                            UnityEngine.Object.Destroy(this.researchHotspots[i].tiles[k]);
                        }
                        UnityEngine.Object.Destroy(this.researchHotspots[i].beacon);
                        UnityEngine.Object.Destroy(this.researchHotspots[i].pointer.gameObject);
                        UnityEngine.Object.Destroy(this.researchHotspots[i].GO);
                        this.researchHotspots.RemoveAt(i);
                        i--;
                        return;
                    }
                }
                if (this.anyResearchHotspotBeingUsed)
                {
                    this.ResearchHologram.transform.Find("sphereFloor").Find("blacker").gameObject.SetActive(true);
                    if (this.researchHotspotBlackerTransition < 0.7f)
                    {
                        this.researchHotspotBlackerTransition += Time.deltaTime;
                        if (this.researchHotspotBlackerTransition > 0.7f)
                        {
                            this.researchHotspotBlackerTransition = 0.7f;
                        }
                    }
                }
                else if (this.researchHotspotBlackerTransition > 0f)
                {
                    this.researchHotspotBlackerTransition -= Time.deltaTime;
                    if (this.researchHotspotBlackerTransition <= 0f)
                    {
                        this.ResearchHologram.transform.Find("sphereFloor").Find("blacker").gameObject.SetActive(false);
                        this.researchHotspotBlackerTransition = 0f;
                    }
                }
                if (this.anyResearchHotspotBeingUsed != this.lastARHBU)
                {
                    if (this.anyResearchHotspotBeingUsed)
                    {
                        ((UnityEngine.Component)this.ResearchHologram.transform.Find("sphereFloor").Find("Particle System")).GetComponent<ParticleSystem>().Stop();
                    }
                    else
                    {
                        ((UnityEngine.Component)this.ResearchHologram.transform.Find("sphereFloor").Find("Particle System")).GetComponent<ParticleSystem>().Play();
                    }
                    this.lastARHBU = this.anyResearchHotspotBeingUsed;
                }
                if (this.researchHotspotBlackerTransition > 0f)
                {
                    this.col = ((UnityEngine.Component)this.ResearchHologram.transform.Find("sphereFloor").Find("blacker").Find("HologramSphere_panels")).GetComponent<MeshRenderer>().material.color;
                    this.col.a = this.researchHotspotBlackerTransition;
                    ((UnityEngine.Component)this.ResearchHologram.transform.Find("sphereFloor").Find("blacker").Find("HologramSphere_panels")).GetComponent<MeshRenderer>().material.color = this.col;
                    ((UnityEngine.Component)this.ResearchHologram.transform.Find("sphereFloor").Find("blacker").Find("HologramSphere_bars")).GetComponent<MeshRenderer>().material.color = this.col;
                }
                this.UI.transform.Find("ResearchInterface").gameObject.SetActive(this.anyResearchHotspotBeingUsed);
                this.displayedResearchCompletion += (ResearchGrid.curCompletion - this.displayedResearchCompletion) * Game.cap(Time.deltaTime * 6f, 0f, 1f);
                if (this.anyResearchHotspotBeingUsed)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("ResearchInterface").Find("txtID")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(ResearchGrid.curID).displayName, string.Empty);
                    ((UnityEngine.Component)this.UI.transform.Find("ResearchInterface").Find("txtCategory")).GetComponent<Text>().text = Localization.getPhrase(ResearchGrid.curCategory, string.Empty);
                    ((UnityEngine.Component)this.UI.transform.Find("ResearchInterface").Find("txtPercentage")).GetComponent<Text>().text = Mathf.FloorToInt(this.displayedResearchCompletion * 100f) + "%";
                    for (int l = 0; l < 6; l++)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("ResearchInterface").Find("txtNeeded (" + l + ")")).GetComponent<Text>().text = ResearchGrid.curColorsRequired[l].ToString();
                    }
                }
            }
            else
            {
                this.ResearchHologram.SetActive(false);
                this.UI.transform.Find("ResearchInterface").gameObject.SetActive(false);
            }
        }
    }

    public void closeResearch()
    {
        if (this.inResearchMode)
        {
            this.inResearchMode = false;
            this.takingResearchTransitionScreenshot = true;
            this.researchTransition = 1f;
            this.playSound("exit_hologram", 1f, 1f);
            Inventory.updateResearchTasks();
        }
    }

    public void toggleAllSpecies()
    {
        if (this.preferencesMenuOpen && this.preferenceMenuFetishesBuilt)
        {
            int num = 3;
            if (((UnityEngine.Component)this.speciesSliders[0].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value == 3f)
            {
                num = 0;
            }
            for (int i = 0; i < this.speciesSliders.Count; i++)
            {
                ((UnityEngine.Component)this.speciesSliders[i].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value = (float)num;
            }
        }
    }

    public void processPreferencesMenu()
    {
        this.UI.transform.Find("PreferencesMenu").gameObject.SetActive(this.preferencesMenuOpen);
        if (this.preferencesMenuOpen)
        {
            if (!this.preferenceMenuFetishesBuilt)
            {
                GameObject gameObject = this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("FetishArea")
                    .Find("FetishOption")
                    .gameObject;
                this.fetishSliders = new List<GameObject>();
                for (int i = 0; i < Fetishes.fetishes.Count; i++)
                {
                    GameObject gameObject2 = UnityEngine.Object.Instantiate(gameObject);
                    gameObject2.transform.SetParent(gameObject.transform.parent);
                    gameObject2.transform.localScale = gameObject.transform.localScale;
                    gameObject2.transform.localEulerAngles = gameObject.transform.localEulerAngles;
                    gameObject2.transform.Find("sld").gameObject.SetActive(Fetishes.fetishDefaultValues[i] != -1f);
                    gameObject2.transform.Find("txt").gameObject.SetActive(Fetishes.fetishDefaultValues[i] != -1f);
                    gameObject2.transform.Find("header").gameObject.SetActive(Fetishes.fetishDefaultValues[i] == -1f);
                    ((UnityEngine.Component)gameObject2.transform.Find("tooltip").Find("txt")).GetComponent<Text>().text = "FETISHDESCRIPTION_" + Fetishes.fetishDescriptions[i];
                    ((UnityEngine.Component)gameObject2.transform.Find("tooltip").Find("txt")).GetComponent<AutoText>().phrase = "FETISHDESCRIPTION_" + Fetishes.fetishDescriptions[i];
                    gameObject2.transform.Find("tooltip").gameObject.SetActive(Fetishes.fetishDefaultValues[i] != -1f);
                    this.fetishSliders.Add(gameObject2);
                }
                this.fetishOverflow = (float)(Fetishes.fetishes.Count - 11) * 2.245f;
                if (this.fetishOverflow < 0f)
                {
                    this.fetishOverflow = 0f;
                }
                gameObject.SetActive(false);
                GameObject gameObject3 = this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("SpeciesArea")
                    .Find("SpeciesOption")
                    .gameObject;
                this.speciesSliders = new List<GameObject>();
                for (int j = 0; j < RackCharacter.allSpecies.Count; j++)
                {
                    GameObject gameObject4 = UnityEngine.Object.Instantiate(gameObject3);
                    gameObject4.transform.SetParent(gameObject3.transform.parent);
                    gameObject4.transform.localScale = gameObject3.transform.localScale;
                    gameObject4.transform.localEulerAngles = gameObject3.transform.localEulerAngles;
                    this.speciesSliders.Add(gameObject4);
                }
                this.speciesOverflow = (float)(RackCharacter.allSpecies.Count - 9) * 2.245f;
                if (this.speciesOverflow < 0f)
                {
                    this.speciesOverflow = 0f;
                }
                gameObject3.SetActive(false);
                this.preferenceMenuFetishesBuilt = true;
            }
            if (!this.preferencesMenuWasOpen)
            {
                this.fetishScroll = 0f;
                this.speciesScroll = 0f;
                for (int k = 0; k < 7; k++)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("GenderSliders")
                        .Find("sld" + k)).GetComponent<UnityEngine.UI.Slider>().value = UserSettings.data.genderPreferences[k];
                }
                for (int l = 0; l < 4; l++)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("BodySliders")
                        .Find("sld" + l)).GetComponent<UnityEngine.UI.Slider>().value = UserSettings.data.bodyTypePreferences[l];
                }
                ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("sldStyles")).GetComponent<UnityEngine.UI.Slider>().value = UserSettings.data.stylePreference;
                for (int m = 0; m < this.fetishSliders.Count; m++)
                {
                    if (Fetishes.fetishDefaultValues[m] != -1f)
                    {
                        ((UnityEngine.Component)this.fetishSliders[m].transform.Find("txt")).GetComponent<Text>().text = Localization.getPhrase("FETISH_" + Fetishes.fetishes[m], string.Empty);
                        ((UnityEngine.Component)this.fetishSliders[m].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value = 0f;
                        for (int n = 0; n < UserSettings.data.fetishPreference.Count; n++)
                        {
                            if (((UnityEngine.Component)this.fetishSliders[m].transform.Find("txt")).GetComponent<Text>().text == Localization.getPhrase("FETISH_" + UserSettings.data.fetishPreference[n].fetish, string.Empty))
                            {
                                ((UnityEngine.Component)this.fetishSliders[m].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value = UserSettings.data.fetishPreference[n].pref;
                            }
                        }
                    }
                    else
                    {
                        ((UnityEngine.Component)this.fetishSliders[m].transform.Find("header")).GetComponent<Text>().text = Localization.getPhrase("FETISH_" + Fetishes.fetishes[m], string.Empty);
                    }
                }
                for (int num = 0; num < this.speciesSliders.Count; num++)
                {
                    ((UnityEngine.Component)this.speciesSliders[num].transform.Find("txt")).GetComponent<Text>().text = Localization.getPhrase("SPECIES_" + RackCharacter.allSpecies[num], string.Empty);
                    ((UnityEngine.Component)this.speciesSliders[num].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value = 0f;
                    for (int num2 = 0; num2 < UserSettings.data.speciesPreferences.Count; num2++)
                    {
                        if (((UnityEngine.Component)this.speciesSliders[num].transform.Find("txt")).GetComponent<Text>().text == Localization.getPhrase("SPECIES_" + UserSettings.data.speciesPreferences[num2].species, string.Empty))
                        {
                            ((UnityEngine.Component)this.speciesSliders[num].transform.Find("sld")).GetComponent<UnityEngine.UI.Slider>().value = UserSettings.data.speciesPreferences[num2].pref;
                        }
                    }
                }
            }
            float num3 = this.fetishScroll;
            Vector2 mouseScrollDelta = Input.mouseScrollDelta;
            this.fetishScroll = num3 - mouseScrollDelta.y * 5.5f;
            if (this.fetishScroll < 0f)
            {
                this.fetishScroll = 0f;
            }
            if (this.fetishScroll > this.fetishOverflow)
            {
                this.fetishScroll = this.fetishOverflow;
            }
                    ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("scrollIndicatorF")).GetComponent<ScrollIndicator>().val = this.fetishScroll / this.fetishOverflow;
            for (int num4 = 0; num4 < this.fetishSliders.Count; num4++)
            {
                this.v3 = Vector3.zero;
                this.v3.y += 15.45f;
                this.v3.y += -2.245f * (float)num4 + this.fetishScroll;
                this.fetishSliders[num4].transform.localPosition = this.v3;
            }
            float num5 = this.speciesScroll;
            Vector2 mouseScrollDelta2 = Input.mouseScrollDelta;
            this.speciesScroll = num5 - mouseScrollDelta2.y * 5.5f;
            if (this.speciesScroll < 0f)
            {
                this.speciesScroll = 0f;
            }
            if (this.speciesScroll > this.speciesOverflow)
            {
                this.speciesScroll = this.speciesOverflow;
            }
                    ((UnityEngine.Component)this.UI.transform.Find("PreferencesMenu").Find("clipboard").Find("scrollIndicatorS")).GetComponent<ScrollIndicator>().val = this.speciesScroll / this.speciesOverflow;
            for (int num6 = 0; num6 < this.speciesSliders.Count; num6++)
            {
                this.v3 = Vector3.zero;
                this.v3.y += 9.55f;
                this.v3.y += -2.245f * (float)num6 + this.speciesScroll;
                this.speciesSliders[num6].transform.localPosition = this.v3;
            }
            if (this.pauseOpen)
            {
                this.v3.x = -256f;
                this.v3.y = 249f;
                this.v3.z = -591f;
            }
            else
            {
                this.v3.x = -512f;
                this.v3.y = 288f;
                this.v3.z = 0f;
            }
            Transform transform = this.UI.transform.Find("PreferencesMenu");
            transform.localPosition += (this.v3 - this.UI.transform.Find("PreferencesMenu").localPosition) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
        }
        this.preferencesMenuWasOpen = this.preferencesMenuOpen;
    }

    public static Color getUIcolorByName(string col)
    {
        Color result = Color.white;
        if (col != null)
        {
            Dictionary<string, int> dictionary = new Dictionary<string, int>(9);
            dictionary.Add("purple", 0);
            dictionary.Add("pink", 1);
            dictionary.Add("orange", 2);
            dictionary.Add("grey", 3);
            dictionary.Add("green", 4);
            dictionary.Add("blue", 5);
            dictionary.Add("yellow", 6);
            dictionary.Add("white", 7);
            dictionary.Add("red", 8);
            int num = default(int);
            if (dictionary.TryGetValue(col, out num))
            {
                switch (num)
                {
                    case 0:
                        result = ColorPicker.HexToColor("7534cf");
                        break;
                    case 1:
                        result = ColorPicker.HexToColor("e4557d");
                        break;
                    case 2:
                        result = ColorPicker.HexToColor("d1963b");
                        break;
                    case 3:
                        result = ColorPicker.HexToColor("8c8c8c");
                        break;
                    case 4:
                        result = ColorPicker.HexToColor("92c500");
                        break;
                    case 5:
                        result = ColorPicker.HexToColor("4c93f0");
                        break;
                    case 6:
                        result = ColorPicker.HexToColor("d2c63f");
                        break;
                    case 7:
                        result = ColorPicker.HexToColor("d9d9d9");
                        break;
                    case 8:
                        result = ColorPicker.HexToColor("d1543b");
                        break;
                }
            }
        }
        return result;
    }

    public void clothingLabelHoverOn(GameObject label)
    {
        label.GetComponent<Text>().color = Color.white;
        UISFX.playHover();
    }

    public void clothingLabelHoverOff(GameObject label)
    {
        Color white = Color.white;
        white.a = 0.5f;
        label.GetComponent<Text>().color = white;
        UISFX.playHover();
    }

    public void clothingLabelHoverMouseDown(GameObject label)
    {
        int num = int.Parse(label.name.Replace("label", string.Empty));
        string b = this.PC().clothingSlots[num];
        if (this.PC().interactionSubject != null)
        {
            b = this.PC().interactionSubject.clothingSlots[num];
        }
        Bag bagByName = Inventory.getBagByName("CLOTHING");
        if (this.PC().interactionSubject != null)
        {
            bagByName = Inventory.getBagByName(this.PC().interactionSubject.data.uid);
        }
        for (int num2 = bagByName.contents.Count - 1; num2 >= 0; num2--)
        {
            if (bagByName.contents[num2].itemType == b)
            {
                this.playSound("ui_clothingShuffle", 1f, 1f);
                if (this.draggingInventoryItem != string.Empty)
                {
                    this.dropCurrentDraggingInventoryItem();
                }
                this.draggingInventoryItemOriginalBag = bagByName.name;
                this.inventoryTooltipTitle = string.Empty;
                this.inventoryTooltipDescription = string.Empty;
                this.draggingInventoryItem = bagByName.contents[num2].itemType;
                this.draggingInventoryItemProperties = bagByName.contents[num2].properties;
                bagByName.update();
                this.dragItem.SetActive(true);
                for (int num3 = this.dragItem.transform.childCount - 1; num3 >= 0; num3--)
                {
                    UnityEngine.Object.Destroy(this.dragItem.transform.GetChild(num3).gameObject);
                }
                this.playSound("ui_contextopen", 1f, 1f);
                List<Vector2> list = Bag.tilesPossessedByItem(Inventory.getItemDefinition(this.draggingInventoryItem), 0, 0);
                this.BagTemplate.SetActive(true);
                for (int i = 0; i < list.Count; i++)
                {
                    GameObject gameObject = UnityEngine.Object.Instantiate(this.BagTemplate.transform.Find("hex").gameObject);
                    gameObject.transform.SetParent(this.dragItem.transform);
                    gameObject.transform.localScale = Vector3.one;
                    ref Vector3 val = ref this.v3;
                    Vector2 vector = list[i];
                    val.x = vector.x * 58f;
                    Vector2 vector2 = list[i];
                    if (vector2.y % 2f == 1f)
                    {
                        this.v3.x += 29f;
                    }
                    ref Vector3 val2 = ref this.v3;
                    Vector2 vector3 = list[i];
                    val2.y = vector3.y * -49f;
                    this.v3.z = 0f;
                    UnityEngine.Object.Destroy(gameObject.GetComponentInChildren<Collider>());
                    gameObject.transform.Find("hex_" + Inventory.getItemDefinition(this.draggingInventoryItem).bagData.color).gameObject.SetActive(true);
                    gameObject.transform.Find("txtNew").gameObject.SetActive(i == 0);
                    ((UnityEngine.Component)gameObject.transform.Find("txtNew")).GetComponent<Text>().text = Inventory.getItemDefinition(bagByName.contents[num2].itemType).displayName;
                    gameObject.transform.localPosition = this.v3;
                    this.v3 = gameObject.transform.Find("txtNew").localPosition;
                    this.v3.x -= 25.1f;
                    this.v3.y += 43.5f;
                    ((UnityEngine.Component)gameObject.transform.Find("txtNew")).GetComponent<Flash>().speed = 15f;
                    gameObject.transform.Find("txtNew").localPosition = this.v3;
                }
                this.dragItem.transform.localScale = Vector3.one;
                this.BagTemplate.SetActive(false);
                bagByName.contents.RemoveAt(num2);
                if (this.PC().interactionSubject != null)
                {
                    this.PC().interactionSubject.updateClothingBasedOnInventory();
                }
                else
                {
                    this.PC().updateClothingBasedOnInventory();
                }
            }
        }
        if (this.PC().interactionSubject != null)
        {
            this.PC().interactionSubject.updateClothingBasedOnInventory();
        }
        else
        {
            this.PC().updateClothingBasedOnInventory();
        }
        Inventory.saveInventoryData();
        this.fullRefreshInventory();
    }

    public void removeSexToy(string slot)
    {
        Bag bagByName = Inventory.getBagByName("CLOTHING");
        if (this.PC().interactionSubject != null)
        {
            bagByName = Inventory.getBagByName(this.PC().interactionSubject.data.uid);
        }
        int num = 0;
        while (num < bagByName.contents.Count)
        {
            if (!(Inventory.getItemDefinition(bagByName.contents[num].itemType).category == "SEX_TOYS_AND_TOOLS") || !bagByName.contents[num].properties.occupyingSlots.Contains(slot))
            {
                num++;
                continue;
            }
            Inventory.moveItemToDifferentBagByIndex(num, bagByName.name, string.Empty);
            this.playSound("ui_clothingShuffle", 1f, 1f);
            this.playSound("hologram_placement_lead", 1f, 1f);
            break;
        }
        bagByName.update();
        if (this.PC().interactionSubject != null)
        {
            this.PC().interactionSubject.updateClothingBasedOnInventory();
        }
        else
        {
            this.PC().updateClothingBasedOnInventory();
        }
        Inventory.saveInventoryData();
        this.fullRefreshInventory();
    }

    public Vector3 getCursorPosition()
    {
        this.cpos.x = (this.mX - 0.5f) * this.screenWidth;
        this.cpos.y = (this.mY - 0.5f) * (0f - this.screenHeight);
        this.cpos.z = 0f;
        return this.cpos;
    }

    public static int getClosest(Vector3 target, List<Vector3> points, float minimum = 10f, List<bool> pointsActive = null)
    {
        int result = -1;
        for (int i = 0; i < points.Count; i++)
        {
            if (pointsActive == null || pointsActive[i])
            {
                float magnitude = (target - points[i]).magnitude;
                if (magnitude < minimum)
                {
                    minimum = magnitude;
                    result = i;
                }
            }
        }
        return result;
    }

    public void draggingInventoryItemChanged()
    {
        for (int i = 0; i < this.sextoyPickupsEligibleForDrop.Count; i++)
        {
            if (this.draggingInventoryItem == string.Empty)
            {
                this.sextoyPickupsEligibleForDrop[i] = false;
            }
            else
            {
                this.sextoyPickupsEligibleForDrop[i] = Game.validSexToyDropPoint(this.draggingInventoryItem, this.sextoyPickupNames[i]);
            }
        }
    }

    public void processInventory()
    {
        if (this.draggingInventoryItem != this.lastDraggingInventoryItem)
        {
            this.draggingInventoryItemChanged();
            this.lastDraggingInventoryItem = this.draggingInventoryItem;
        }
        this.timePlayedElapsed += Time.deltaTime;
        while (this.timePlayedElapsed >= 1f)
        {
            this.timePlayedElapsed -= 1f;
            Inventory.data.secondsPlayed++;
        }
        Inventory.timeSinceLastInventorySave += Time.deltaTime;
        if (Inventory.timeSinceLastInventorySave >= 60f && this.PC().interactionSubject == null)
        {
            Inventory.saveInventoryData();
            Inventory.timeSinceLastInventorySave = 0f;
        }
        if (this.curDialogue != string.Empty || this.customizingCharacter)
        {
            this.inventoryOpen = false;
        }
        this.UI.transform.Find("InventoryScreen").gameObject.SetActive(this.inventoryOpen);
        for (int i = 0; i < Inventory.data.subjectbags.Count; i++)
        {
            bool flag = false;
            int num = 0;
            while (num < this.currentTestSubjects.Count)
            {
                if (!(this.currentTestSubjects[num].data.uid == Inventory.data.subjectbags[i]))
                {
                    num++;
                    continue;
                }
                flag = true;
                break;
            }
            if (!flag)
            {
                Inventory.emptyBag(Inventory.data.subjectbags[i], string.Empty);
                int num2 = 0;
                while (num2 < Inventory.data.bags.Count)
                {
                    if (!(Inventory.data.bags[num2].uid == Inventory.data.subjectbags[i]))
                    {
                        num2++;
                        continue;
                    }
                    Inventory.data.bags.RemoveAt(num2);
                    break;
                }
                Inventory.data.subjectbags.RemoveAt(i);
                i--;
            }
        }
        if (this.inventoryOpen)
        {
            this.showCurrency = true;
            this.showBackButton = true;
            if ((UnityEngine.Object)this.dragItem == (UnityEngine.Object)null)
            {
                this.dragItem = this.UI.transform.Find("DragItem").gameObject;
                this.dragItem.SetActive(false);
            }
            if ((UnityEngine.Object)this.BagTemplate == (UnityEngine.Object)null)
            {
                this.BagTemplate = this.UI.transform.Find("InventoryScreen").Find("BagTemplate").gameObject;
                this.BagTemplate.SetActive(false);
            }
            if ((UnityEngine.Object)this.inventoryTooltip == (UnityEngine.Object)null)
            {
                this.inventoryTooltip = this.UI.transform.Find("InventoryTooltip").gameObject;
                this.inventoryTooltip.SetActive(false);
            }
            if (this.clothingPickupPoints.Count == 0)
            {
                for (int j = 0; j < this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("pickupPoints")
                    .childCount; j++)
                {
                    this.clothingPickupPoints.Add(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("pickupPoints")
                        .GetChild(j)
                        .position);
                    this.clothingPickupNames.Add(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("pickupPoints")
                        .GetChild(j)
                        .name);
                }
            }
            if (this.sextoyPickupPoints.Count == 0)
            {
                for (int k = 0; k < this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").childCount; k++)
                {
                    this.sextoyPickupPoints.Add(this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(k)
                        .position);
                    this.sextoyPickupNames.Add(this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(k)
                        .name);
                    this.sextoyPickupsActive.Add(false);
                    this.sextoyPickupsEligibleForDrop.Add(false);
                }
            }
            float num3 = 0f;
            float num4 = 0f;
            if (this.selectingComponents)
            {
                num3 += 70f;
                num4 += 70f;
            }
            this.inventoryTooltip.SetActive(this.inventoryTooltipTitle != string.Empty);
            if (this.inventoryTooltipTitle != string.Empty)
            {
                this.v3.x = 0f;
                this.v3.y = this.uiMouseY;
                this.v3.z = 0f;
                if (this.mX > 0.5f)
                {
                    this.v3.x = this.uiMouseX - 130f;
                }
                else
                {
                    this.v3.x = this.uiMouseX + 130f;
                }
                this.inventoryTooltip.transform.localPosition = this.v3;
                string phrase = Localization.getPhrase(this.inventoryTooltipTitle, string.Empty);
                ((UnityEngine.Component)this.inventoryTooltip.transform.Find("txtName")).GetComponent<Text>().text = phrase;
                ((UnityEngine.Component)this.inventoryTooltip.transform.Find("txtName")).GetComponent<Text>().color = Game.getUIcolorByName(this.inventoryTooltipColor);
                ((UnityEngine.Component)this.inventoryTooltip.transform.Find("txtDescription")).GetComponent<Text>().text = Localization.getPhrase(this.inventoryTooltipDescription, string.Empty);
            }
            if (this.selectingComponents)
            {
                if (this.newComponentDropped)
                {
                    List<string> list = new List<string>();
                    List<BagContent> contents = Inventory.getBagByName("COMPONENTS").contents;
                    for (int l = 0; l < this.componentsNeeded.Length; l++)
                    {
                        if (this.componentsNeeded[l] == string.Empty)
                        {
                            this.componentsPicked[l] = true;
                        }
                        else
                        {
                            this.componentsPicked[l] = false;
                            int num5 = 0;
                            while (num5 < contents.Count)
                            {
                                if (!(contents[num5].itemType == this.componentsNeeded[l]))
                                {
                                    num5++;
                                    continue;
                                }
                                this.componentsPicked[num5] = true;
                                break;
                            }
                        }
                    }
                    List<int> list2 = new List<int>();
                    for (int m = 0; m < contents.Count; m++)
                    {
                        bool flag2 = false;
                        int num6 = 0;
                        while (num6 < this.componentsNeeded.Length)
                        {
                            if (list2.Contains(num6) || !(contents[m].itemType == this.componentsNeeded[num6]))
                            {
                                num6++;
                                continue;
                            }
                            list2.Add(num6);
                            flag2 = true;
                            break;
                        }
                        if (!flag2)
                        {
                            list.Add(contents[m].itemType);
                        }
                    }
                    bool flag3 = false;
                    for (int n = 0; n < list.Count; n++)
                    {
                        Inventory.moveItemToDifferentBag(list[n], "COMPONENTS", string.Empty);
                        if (!flag3)
                        {
                            this.playSound("ui_error", 1f, 1f);
                            flag3 = true;
                        }
                    }
                    this.newComponentDropped = false;
                }
                this.UI.transform.Find("InventoryScreen").Find("componentsMenu").gameObject.SetActive(true);
                this.col = Color.white;
                this.col.r = 0.5254902f;
                this.col.g = 0.882352948f;
                this.col.b = 0.2784314f;
                bool flag4 = true;
                for (int num7 = 0; num7 < this.componentsNeeded.Length; num7++)
                {
                    if (!this.componentsPicked[num7])
                    {
                        flag4 = false;
                    }
                    if (this.componentsPicked[num7] && !this.componentsWerePicked[num7] && this.componentsNeeded[num7] != string.Empty)
                    {
                        this.playSound("hologram_placement_good", 1f, 1f);
                    }
                    this.componentsWerePicked[num7] = this.componentsPicked[num7];
                    if (this.componentsNeeded[num7] == string.Empty)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("txtComponent (" + num7 + ")")).GetComponent<Text>().text = string.Empty;
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("txtComponent (" + num7 + ")")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(this.componentsNeeded[num7]).displayName, string.Empty);
                        if (this.componentsPicked[num7])
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("txtComponent (" + num7 + ")")).GetComponent<Text>().color = this.col;
                        }
                        else
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("txtComponent (" + num7 + ")")).GetComponent<Text>().color = Color.white * 0.5f;
                        }
                    }
                }
                this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("cmdConfirm")
                    .gameObject.SetActive(flag4);
                if (flag4)
                {
                    Transform transform = this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("cmdConfirm");
                    transform.localScale += (Vector3.one * 0.61f - this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("cmdConfirm")
                        .localScale) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
                }
                else
                {
                    this.UI.transform.Find("InventoryScreen").Find("componentsMenu").Find("cmdConfirm")
                        .localScale = Vector3.zero;
                }
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("txtComponents")).GetComponent<Text>().text = Localization.getPhrase("PLEASE_SELECT_COMPONENTS", string.Empty) + " " + Localization.getPhrase(Inventory.getItemDefinition(this.componentSelectionTarget).displayName, string.Empty);
            }
            else
            {
                this.UI.transform.Find("InventoryScreen").Find("componentsMenu").gameObject.SetActive(false);
                ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("txtComponents")).GetComponent<Text>().text = string.Empty;
            }
            if (this.interactingWithBags.Contains("CLOTHING"))
            {
                this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").gameObject.SetActive(true);
                this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").gameObject.SetActive(true);
            }
            else
            {
                this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").gameObject.SetActive(false);
                this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").gameObject.SetActive(false);
            }
            for (int num8 = 0; num8 < Inventory.data.bags.Count; num8++)
            {
                bool flag5 = false;
                for (int num9 = 0; num9 < this.displayedBags.Count; num9++)
                {
                    if (this.displayedBags[num9].GetComponent<BagUI>().bagUID == Inventory.data.bags[num8].uid)
                    {
                        flag5 = true;
                    }
                }
                bool flag6 = true;
                if (!Inventory.data.bags[num8].onPerson)
                {
                    if (!this.interactingWithBags.Contains(Inventory.data.bags[num8].uid))
                    {
                        flag6 = false;
                    }
                }
                else if (this.interactingWithBags.Contains("CLOTHING") && Inventory.data.bags[num8].scale != 1)
                {
                    flag6 = false;
                }
                if (Inventory.data.bags[num8].name == "CLOTHING")
                {
                    RackCharacter rackCharacter = this.PC();
                    if (this.PC().interactionSubject != null)
                    {
                        rackCharacter = this.PC().interactionSubject;
                    }
                    this.UI.transform.Find("InventoryScreen").Find("cursor").localPosition = this.getCursorPosition();
                    int num10 = -1;
                    if (this.interactingWithBags.Contains("CLOTHING"))
                    {
                        num10 = Game.getClosest(this.UI.transform.Find("InventoryScreen").Find("cursor").position, this.clothingPickupPoints, 0.15f, null);
                    }
                    if (num10 != this.lastClosestPickupPoint)
                    {
                        if (num10 != -1)
                        {
                            UISFX.playHover();
                        }
                        this.lastClosestPickupPoint = num10;
                    }
                    int num11 = -1;
                    if (this.interactingWithBags.Contains("CLOTHING"))
                    {
                        num11 = Game.getClosest(this.UI.transform.Find("InventoryScreen").Find("cursor").position, this.sextoyPickupPoints, 0.16f, this.sextoyPickupsActive);
                    }
                    if (num11 != this.lastClosestSexToyPoint)
                    {
                        if (num11 != -1)
                        {
                            UISFX.playHover();
                        }
                        this.lastClosestSexToyPoint = num11;
                    }
                    int num12 = 0;
                    int num13 = default(int);
                    while (num12 < this.sextoyPickupPoints.Count)
                    {
                        bool flag7 = false;
                        string text = this.sextoyPickupNames[num12];
                        if (text != null)
                        {
                            Dictionary<string, int> dictionary = new Dictionary<string, int>(9);
                            dictionary.Add("hex_breastLmale", 1);
                            dictionary.Add("hex_breastRmale", 2);
                            dictionary.Add("hex_breastLfemale", 3);
                            dictionary.Add("hex_breastRfemale", 4);
                            dictionary.Add("hex_balls", 5);
                            dictionary.Add("hex_shaft", 6);
                            dictionary.Add("hex_penis", 6);
                            dictionary.Add("hex_clit", 7);
                            dictionary.Add("hex_vagina", 8);
                            if (dictionary.TryGetValue(text, out num13))
                            {
                                switch (num13)
                                {
                                    case 1:
                                        goto IL_1073;
                                    case 2:
                                        goto IL_1093;
                                    case 3:
                                        goto IL_10b3;
                                    case 4:
                                        goto IL_10d6;
                                    case 5:
                                        goto IL_10f9;
                                    case 6:
                                        goto IL_112c;
                                    case 7:
                                        goto IL_1145;
                                    case 8:
                                        goto IL_1170;
                                }
                            }
                        }
                        if (this.sextoyPickupNames[num12].Contains("tool"))
                        {
                            this.updateToolHotkeys();
                            int num14 = int.Parse(this.sextoyPickupNames[num12].Replace("hex_tool_", string.Empty));
                            this.sextoyPickupsActive[num12] = (num14 < 10 - this.anatomyTools && this.PC().interactionSubject == null);
                            flag7 = true;
                        }
                        else
                        {
                            this.sextoyPickupsActive[num12] = true;
                        }
                        goto IL_1189;
                    IL_10d6:
                        this.sextoyPickupsActive[num12] = (rackCharacter.breastSize_act >= RackCharacter.breastThreshhold);
                        goto IL_1189;
                    IL_10f9:
                        this.sextoyPickupsActive[num12] = (rackCharacter.showBalls && rackCharacter.data.ballsType != 2);
                        goto IL_1189;
                    IL_112c:
                        this.sextoyPickupsActive[num12] = rackCharacter.showPenis;
                        goto IL_1189;
                    IL_1189:
                        this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12)
                            .gameObject.SetActive(this.sextoyPickupsActive[num12]);
                        this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12)
                            .Find("fill")
                            .gameObject.SetActive(rackCharacter.sexToySlots[RackCharacter.getSextoySlotByName(this.sextoyPickupNames[num12].ToUpper())] != string.Empty);
                        if (flag7)
                        {
                            if (rackCharacter.sexToySlots[RackCharacter.getSextoySlotByName(this.sextoyPickupNames[num12].ToUpper())] != string.Empty)
                            {
                                ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12)
                                    .Find("txtName")).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(rackCharacter.sexToySlots[RackCharacter.getSextoySlotByName(this.sextoyPickupNames[num12].ToUpper())]).displayName, string.Empty);
                            }
                            else
                            {
                                ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12)
                                    .Find("txtName")).GetComponent<Text>().text = string.Empty;
                            }
                        }
                        this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12)
                            .Find("border")
                            .gameObject.SetActive(num12 == num11 || this.sextoyPickupsEligibleForDrop[num12]);
                        if (num12 == num11)
                        {
                            this.v3 = Vector3.one;
                            if (Input.GetMouseButtonDown(0))
                            {
                                this.removeSexToy(this.sextoyPickupNames[num12].Replace("hex_", string.Empty));
                            }
                        }
                        else
                        {
                            this.v3 = Vector3.one * 0.9f;
                        }
                        if (flag7)
                        {
                            this.v3 *= 0.68f;
                        }
                        Transform child = this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12);
                        child.localScale += (this.v3 - this.UI.transform.Find("InventoryScreen").Find("SubjectMenu").GetChild(num12)
                            .localScale) * Game.cap(Time.deltaTime * 21f, 0f, 1f);
                        num12++;
                        continue;
                    IL_1073:
                        this.sextoyPickupsActive[num12] = (rackCharacter.breastSize_act < RackCharacter.breastThreshhold);
                        goto IL_1189;
                    IL_1170:
                        this.sextoyPickupsActive[num12] = rackCharacter.showVagina;
                        goto IL_1189;
                    IL_1145:
                        this.sextoyPickupsActive[num12] = (rackCharacter.showVagina && !rackCharacter.showPenis);
                        goto IL_1189;
                    IL_1093:
                        this.sextoyPickupsActive[num12] = (rackCharacter.breastSize_act < RackCharacter.breastThreshhold);
                        goto IL_1189;
                    IL_10b3:
                        this.sextoyPickupsActive[num12] = (rackCharacter.breastSize_act >= RackCharacter.breastThreshhold);
                        goto IL_1189;
                    }
                    if (Input.GetMouseButtonDown(0) && num10 != -1)
                    {
                        int num15 = 0;
                        string text2 = this.clothingPickupNames[num10];
                        if (text2 != null)
                        {
                            Dictionary<string, int> dictionary = new Dictionary<string, int>(8);
                            dictionary.Add("head", 0);
                            dictionary.Add("face", 1);
                            dictionary.Add("torso", 2);
                            dictionary.Add("forearms", 3);
                            dictionary.Add("hands", 4);
                            dictionary.Add("crotch", 5);
                            dictionary.Add("legs", 6);
                            dictionary.Add("feet", 7);
                            if (dictionary.TryGetValue(text2, out num13))
                            {
                                switch (num13)
                                {
                                    case 0:
                                        num15 = 0;
                                        break;
                                    case 1:
                                        num15 = 1;
                                        break;
                                    case 2:
                                        num15 = 2;
                                        break;
                                    case 3:
                                        num15 = 3;
                                        break;
                                    case 4:
                                        num15 = 4;
                                        break;
                                    case 5:
                                        num15 = 5;
                                        break;
                                    case 6:
                                        num15 = 6;
                                        break;
                                    case 7:
                                        num15 = 7;
                                        break;
                                }
                            }
                        }
                        this.clothingLabelHoverMouseDown(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("label" + num15)
                            .gameObject);
                    }
                    if (this.clothingMenuSlotNames.Count == 0)
                    {
                        this.clothingMenuSlotNames.Add("crotch");
                        this.clothingMenuSlotNames.Add("face");
                        this.clothingMenuSlotNames.Add("feet");
                        this.clothingMenuSlotNames.Add("forearms");
                        this.clothingMenuSlotNames.Add("hands");
                        this.clothingMenuSlotNames.Add("head");
                        this.clothingMenuSlotNames.Add("legs");
                        this.clothingMenuSlotNames.Add("torso");
                    }
                    for (int num16 = 0; num16 < this.clothingMenuSlotNames.Count; num16++)
                    {
                        string text3 = string.Empty;
                        if (num10 >= 0)
                        {
                            text3 = this.clothingPickupNames[num10];
                        }
                        if (text3 == this.clothingMenuSlotNames[num16] || num10 == -1)
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find(this.clothingMenuSlotNames[num16])).GetComponent<CanvasRenderer>().SetAlpha(1f);
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find(this.clothingMenuSlotNames[num16] + "Full")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                        }
                        else
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find(this.clothingMenuSlotNames[num16])).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find(this.clothingMenuSlotNames[num16] + "Full")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                        }
                    }
                    flag6 = false;
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("crotch")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.CROTCH] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("crotchFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.CROTCH] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("face")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.FACE] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("faceFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.FACE] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("feet")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.FEET] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("feetFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.FEET] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("forearms")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.FOREARMS] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("forearmsFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.FOREARMS] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("hands")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.HANDS] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("handsFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.HANDS] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("head")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.HEAD] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("headFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.HEAD] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("legs")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.LEGS] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("legsFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.LEGS] != string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("torso")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.TORSO] == string.Empty);
                    this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("torsoFull")
                        .gameObject.SetActive(rackCharacter.clothingSlots[ClothingSlots.TORSO] != string.Empty);
                    for (int num17 = 0; num17 < this.clothingUIlines.Count; num17++)
                    {
                        UnityEngine.Object.Destroy(this.clothingUIlines[num17]);
                    }
                    List<string> list3 = new List<string>();
                    for (int num18 = 0; num18 < ClothingSlots.numSlots; num18++)
                    {
                        if (rackCharacter.clothingSlots[num18] == string.Empty)
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("label" + num18)).GetComponent<Text>().text = string.Empty;
                        }
                        else if (!list3.Contains(rackCharacter.clothingSlots[num18]))
                        {
                            ((UnityEngine.Component)this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("label" + num18)).GetComponent<Text>().text = Localization.getPhrase(Inventory.getItemDefinition(rackCharacter.clothingSlots[num18]).displayName, string.Empty);
                        }
                        Vector3 localPosition = this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("dropPoint" + num18)
                            .localPosition;
                        Vector3 localPosition2 = this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("label" + num18)
                            .localPosition;
                        localPosition2.x -= 220f;
                        float x = localPosition2.x;
                        float y = localPosition2.y;
                        float f = localPosition2.y - localPosition.y;
                        float num19 = Mathf.Abs(f);
                        localPosition2.y = localPosition.y;
                        localPosition2.x -= num19;
                        if (localPosition2.x < localPosition.x)
                        {
                            localPosition2.x = x;
                            if (y > localPosition.y)
                            {
                                localPosition2.y = localPosition.y + (localPosition2.x - localPosition.x);
                            }
                            else
                            {
                                localPosition2.y = localPosition.y - (localPosition2.x - localPosition.x);
                            }
                        }
                        Vector3 start = default(Vector3);
                        start.x = localPosition2.x;
                        start.y = localPosition2.y;
                        start.z = localPosition2.z;
                        Vector3 localPosition3 = this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").Find("label" + num18)
                            .localPosition;
                        localPosition3.x -= 220f;
                        if (rackCharacter.clothingSlots[num18] != string.Empty && !list3.Contains(rackCharacter.clothingSlots[num18]))
                        {
                            list3.Add(rackCharacter.clothingSlots[num18]);
                            try
                            {
                                this.clothingUIlines.Add(BagUI.drawLine(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu"), localPosition, localPosition2, Color.black, 3f));
                                this.clothingUIlines.Add(BagUI.drawLine(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu"), start, localPosition3, Color.black, 3f));
                                this.clothingUIlines.Add(BagUI.drawLine(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu"), localPosition, localPosition2, Game.getUIcolorByName(Inventory.getItemDefinition(rackCharacter.clothingSlots[num18]).bagData.color), 1.5f));
                                this.clothingUIlines.Add(BagUI.drawLine(this.UI.transform.Find("InventoryScreen").Find("ClothingMenu"), start, localPosition3, Game.getUIcolorByName(Inventory.getItemDefinition(rackCharacter.clothingSlots[num18]).bagData.color), 1.5f));
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                if (flag6 && !flag5)
                {
                    this.BagTemplate.SetActive(true);
                    GameObject gameObject = UnityEngine.Object.Instantiate(this.BagTemplate);
                    gameObject.transform.SetParent(this.BagTemplate.transform.parent);
                    this.BagTemplate.SetActive(false);
                    switch (Inventory.data.bags[num8].scale)
                    {
                        case 0:
                            gameObject.transform.localScale = Vector3.one * 0.5f;
                            break;
                        case 1:
                            gameObject.transform.localScale = Vector3.one * 0.8f;
                            break;
                        case 2:
                            gameObject.transform.localScale = Vector3.one * 1f;
                            break;
                        case -1:
                            gameObject.transform.localScale = Vector3.one * 0.8f;
                            break;
                    }
                    if (Inventory.data.bags[num8].onPerson || this.interactingWithBags.Contains("CLOTHING"))
                    {
                        ref Vector3 val = ref this.v3;
                        float num20 = ((float)Inventory.data.bags[num8].sizeX + 0.5f) * 58f;
                        Vector3 localScale = gameObject.transform.localScale;
                        val.x = -70f - num20 * localScale.x;
                        this.v3.y = 200f - num3;
                        this.v3.z = 0f;
                        gameObject.transform.localPosition = this.v3;
                        float num21 = num3;
                        float num22 = ((float)Inventory.data.bags[num8].sizeY + 2f) * 49f;
                        Vector3 localScale2 = gameObject.transform.localScale;
                        num3 = num21 + num22 * localScale2.x;
                    }
                    else
                    {
                        this.v3.x = 200f;
                        this.v3.y = 200f - num4;
                        this.v3.z = 0f;
                        gameObject.transform.localPosition = this.v3;
                        float num23 = num4;
                        float num24 = ((float)Inventory.data.bags[num8].sizeY + 2f) * 49f;
                        Vector3 localScale3 = gameObject.transform.localScale;
                        num4 = num23 + num24 * localScale3.x;
                    }
                    gameObject.GetComponent<BagUI>().bagUID = Inventory.data.bags[num8].uid;
                    gameObject.GetComponent<BagUI>().bag = Inventory.data.bags[num8];
                    for (int num25 = 1; num25 < gameObject.GetComponent<BagUI>().tiles.Count; num25++)
                    {
                        UnityEngine.Object.Destroy(gameObject.GetComponent<BagUI>().tiles[num25]);
                    }
                    if (gameObject.GetComponent<BagUI>().tiles.Count == 0)
                    {
                        gameObject.GetComponent<BagUI>().tiles.Add(gameObject.transform.Find("hex").gameObject);
                    }
                    int num26 = Inventory.data.bags[num8].sizeY;
                    if (Inventory.data.bags[num8].unlimited)
                    {
                        num26 = 0;
                        List<Vector2> list4 = new List<Vector2>();
                        for (int num27 = 0; num27 < Inventory.data.bags[num8].contents.Count; num27++)
                        {
                            list4 = list4.Concat(Bag.tilesPossessedByItem(Inventory.getItemDefinition(Inventory.data.bags[num8].contents[num27].itemType), Inventory.data.bags[num8].contents[num27].x, Inventory.data.bags[num8].contents[num27].y)).ToList();
                        }
                        for (int num28 = 0; num28 < list4.Count; num28++)
                        {
                            Vector2 vector = list4[num28];
                            if (vector.y > (float)num26)
                            {
                                Vector2 vector2 = list4[num28];
                                num26 = Mathf.RoundToInt(vector2.y);
                            }
                        }
                        num26 += 4;
                    }
                    for (int num29 = 1; num29 < Inventory.data.bags[num8].sizeX * num26; num29++)
                    {
                        gameObject.GetComponent<BagUI>().tiles.Add(UnityEngine.Object.Instantiate(gameObject.GetComponent<BagUI>().tiles[0]));
                        gameObject.GetComponent<BagUI>().tiles[gameObject.GetComponent<BagUI>().tiles.Count - 1].transform.SetParent(gameObject.GetComponent<BagUI>().tiles[0].transform.parent);
                    }
                    ((UnityEngine.Component)gameObject.transform.Find("header")).GetComponent<Text>().text = Localization.getPhrase(Inventory.data.bags[num8].name, string.Empty);
                    for (int num30 = 0; num30 < Inventory.data.bags[num8].sizeX; num30++)
                    {
                        for (int num31 = 0; num31 < Inventory.data.bags[num8].sizeY; num31++)
                        {
                            this.v3.x = (float)(num30 * 58);
                            if (num31 % 2 == 1)
                            {
                                this.v3.x += 29f;
                            }
                            this.v3.y = (float)(num31 * -49);
                            this.v3.z = 0f;
                            if (num30 + num31 * Inventory.data.bags[num8].sizeX < gameObject.GetComponent<BagUI>().tiles.Count)
                            {
                                gameObject.GetComponent<BagUI>().tiles[num30 + num31 * Inventory.data.bags[num8].sizeX].transform.localPosition = this.v3;
                                gameObject.GetComponent<BagUI>().tiles[num30 + num31 * Inventory.data.bags[num8].sizeX].transform.localScale = Vector3.one;
                                gameObject.GetComponent<BagUI>().tiles[num30 + num31 * Inventory.data.bags[num8].sizeX].GetComponent<BagTile>().xx = num30;
                                gameObject.GetComponent<BagUI>().tiles[num30 + num31 * Inventory.data.bags[num8].sizeX].GetComponent<BagTile>().yy = num31;
                            }
                        }
                    }
                    this.displayedBags.Add(gameObject);
                    gameObject.GetComponent<BagUI>().updateBag();
                }
            }
            this.totalInventoryHeight = 0f;
            for (int num32 = 0; num32 < this.displayedBags.Count; num32++)
            {
                Vector3 localPosition4 = this.displayedBags[num32].transform.localPosition;
                float y2 = localPosition4.y;
                Vector3 localScale4 = this.displayedBags[num32].transform.localScale;
                float y3 = localScale4.y;
                Vector3 localPosition5 = this.displayedBags[num32].GetComponent<BagUI>().tiles[this.displayedBags[num32].GetComponent<BagUI>().tiles.Count - 1].transform.localPosition;
                if (y2 + y3 * localPosition5.y < this.totalInventoryHeight)
                {
                    Vector3 localPosition6 = this.displayedBags[num32].transform.localPosition;
                    float y4 = localPosition6.y;
                    Vector3 localScale5 = this.displayedBags[num32].transform.localScale;
                    float y5 = localScale5.y;
                    Vector3 localPosition7 = this.displayedBags[num32].GetComponent<BagUI>().tiles[this.displayedBags[num32].GetComponent<BagUI>().tiles.Count - 1].transform.localPosition;
                    this.totalInventoryHeight = y4 + y5 * localPosition7.y;
                }
                this.displayedBags[num32].GetComponent<BagUI>().hoveringOverContentID = -1;
            }
            float num33 = Game.cap(0f - this.totalInventoryHeight - 200f, 0f, 1E+14f);
            this.v3.x = 0f;
            this.v3.y = Game.cap(this.mY - 0.2f, 0f, 0.6f) / 0.6f * num33;
            this.v3.z = 0f;
            this.UI.transform.Find("InventoryScreen").localPosition = this.v3;
            this.UI.transform.Find("InventoryScreen").Find("blacker").localPosition = -this.UI.transform.Find("InventoryScreen").localPosition;
            this.v3.y *= -1f;
            this.UI.transform.Find("InventoryScreen").Find("BG").localPosition = this.v3;
            this.v3.x = this.clothingMenuX;
            this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").localPosition = this.v3;
            RaycastHit raycastHit = default(RaycastHit);
            bool flag8 = Physics.Raycast(Game.gameInstance.uiCam.GetComponent<Camera>().ScreenPointToRay(Input.mousePosition), out raycastHit);
            string text4 = this.inventoryTooltipTitle;
            this.inventoryTooltipTitle = string.Empty;
            this.inventoryTooltipDescription = string.Empty;
            if (flag8)
            {
                if (this.draggingInventoryItem != string.Empty)
                {
                    bool flag9 = false;
                    try
                    {
                        if (this.inventoryDragHoverBagUID != ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.uid || this.inventoryDragHoverBagX != ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().xx || this.inventoryDragHoverBagY != ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().yy)
                        {
                            flag9 = true;
                        }
                        this.inventoryDragHoverBagUID = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.uid;
                        this.inventoryDragHoverBag = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag;
                        this.inventoryDragHoverBagX = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().xx;
                        this.inventoryDragHoverBagY = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().yy;
                        if (flag9)
                        {
                            ((UnityEngine.Component)raycastHit.collider.transform.parent.parent).GetComponent<BagUI>().updateBag();
                        }
                    }
                    catch
                    {
                        flag9 = true;
                    }
                }
                else if (((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID != -1)
                {
                    ((UnityEngine.Component)raycastHit.collider.transform.parent.parent).GetComponent<BagUI>().hoveringOverContentID = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID;
                    ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents[((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID].newItem = false;
                    ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().transform.Find("txtNew").gameObject.SetActive(false);
                    this.inventoryTooltipTitle = Inventory.getItemDefinition(((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents[((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID].itemType).displayName;
                    this.inventoryTooltipDescription = Inventory.getItemDefinition(((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents[((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID].itemType).description;
                    this.inventoryTooltipColor = Inventory.getItemDefinition(((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents[((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID].itemType).bagData.color;
                    if (Input.GetMouseButtonDown(0))
                    {
                        if (this.draggingInventoryItem != string.Empty)
                        {
                            this.dropCurrentDraggingInventoryItem();
                        }
                        this.draggingInventoryItemOriginalBag = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.name;
                        string itemType = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents[((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID].itemType;
                        this.draggingInventoryItemProperties = ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents[((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID].properties;
                        if (this.draggingInventoryItemProperties == null)
                        {
                            this.draggingInventoryItemProperties = new LayoutItemSpecialProperties();
                        }
                        ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.contents.RemoveAt(((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bagContentID);
                        string text5 = this.inventoryTooltipTitle;
                        this.inventoryTooltipTitle = string.Empty;
                        this.inventoryTooltipDescription = string.Empty;
                        ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().container.updateBag();
                        this.draggingInventoryItem = itemType;
                        ((UnityEngine.Component)raycastHit.collider.transform.parent).GetComponent<BagTile>().bag.update();
                        this.dragItem.SetActive(true);
                        for (int num34 = this.dragItem.transform.childCount - 1; num34 >= 0; num34--)
                        {
                            UnityEngine.Object.Destroy(this.dragItem.transform.GetChild(num34).gameObject);
                        }
                        this.playSound("ui_contextopen", 1f, 1f);
                        List<Vector2> list5 = Bag.tilesPossessedByItem(Inventory.getItemDefinition(this.draggingInventoryItem), 0, 0);
                        for (int num35 = 0; num35 < list5.Count; num35++)
                        {
                            GameObject gameObject2 = UnityEngine.Object.Instantiate(raycastHit.collider.transform.parent.gameObject);
                            gameObject2.transform.SetParent(this.dragItem.transform);
                            gameObject2.transform.localScale = Vector3.one;
                            ref Vector3 val2 = ref this.v3;
                            Vector2 vector3 = list5[num35];
                            val2.x = vector3.x * 58f;
                            Vector2 vector4 = list5[num35];
                            if (vector4.y % 2f == 1f)
                            {
                                this.v3.x += 29f;
                            }
                            ref Vector3 val3 = ref this.v3;
                            Vector2 vector5 = list5[num35];
                            val3.y = vector5.y * -49f;
                            this.v3.z = 0f;
                            UnityEngine.Object.Destroy(gameObject2.GetComponentInChildren<Collider>());
                            gameObject2.transform.Find("hex_" + Inventory.getItemDefinition(this.draggingInventoryItem).bagData.color).gameObject.SetActive(true);
                            gameObject2.transform.Find("txtNew").gameObject.SetActive(num35 == 0);
                            ((UnityEngine.Component)gameObject2.transform.Find("txtNew")).GetComponent<Text>().text = text5;
                            gameObject2.transform.localPosition = this.v3;
                            this.v3 = gameObject2.transform.Find("txtNew").localPosition;
                            this.v3.x -= 25.1f;
                            this.v3.y += 43.5f;
                            ((UnityEngine.Component)gameObject2.transform.Find("txtNew")).GetComponent<Flash>().speed = 15f;
                            gameObject2.transform.Find("txtNew").localPosition = this.v3;
                        }
                        this.dragItem.transform.localScale = Vector3.one;
                    }
                }
            }
            else
            {
                if (this.inventoryDragHoverBagUID != string.Empty)
                {
                    this.inventoryDragHoverBagUID = string.Empty;
                    this.needInventoryRefresh = true;
                }
                this.newComponentDropped = true;
            }
            if (text4 != this.inventoryTooltipTitle)
            {
                UISFX.playHover();
            }
            if (this.needInventoryRefresh)
            {
                for (int num36 = 0; num36 < this.displayedBags.Count; num36++)
                {
                    this.displayedBags[num36].GetComponent<BagUI>().updateBag();
                }
                this.needInventoryRefresh = false;
            }
        }
        else
        {
            this.inventoryDragHoverBagUID = string.Empty;
            for (int num37 = 0; num37 < this.displayedBags.Count; num37++)
            {
                UnityEngine.Object.Destroy(this.displayedBags[num37]);
            }
            this.displayedBags = new List<GameObject>();
            if ((UnityEngine.Object)this.inventoryTooltip != (UnityEngine.Object)null)
            {
                this.inventoryTooltip.SetActive(false);
            }
            if (this.interactingWithBags.Count > 0)
            {
                this.interactingWithBags = new List<string>();
            }
        }
        if (this.draggingInventoryItem != string.Empty)
        {
            this.dragItem.SetActive(true);
            this.v3.x = this.uiMouseX;
            this.v3.y = this.uiMouseY;
            this.v3.z = 0f;
            this.dragItem.transform.localPosition = this.v3;
            float d = 0.5f;
            if (this.mX > 0.454f && this.interactingWithBags.Contains("CLOTHING"))
            {
                d = 1f;
            }
            Transform transform2 = this.dragItem.transform;
            transform2.localScale += (Vector3.one * d - this.dragItem.transform.localScale) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
            if (!Input.GetMouseButton(0) || !this.inventoryOpen)
            {
                this.dropCurrentDraggingInventoryItem();
            }
        }
        float num38 = 0.469f;
        if (!(this.draggingInventoryItem != string.Empty) || (this.mX > 0.454f && this.interactingWithBags.Contains("CLOTHING")))
        {
            ;
        }
        this.clothingUIscale_act += (num38 - this.clothingUIscale_act) * Game.cap(Time.deltaTime * 12f, 0f, 1f);
        bool flag10 = this.wasHoveringAPieceOfClothingOverTheClothingMenu;
        this.wasHoveringAPieceOfClothingOverTheClothingMenu = (num38 >= 0.48f);
        if (this.wasHoveringAPieceOfClothingOverTheClothingMenu != flag10)
        {
            UISFX.playHover();
        }
        this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").localScale = Vector3.one * this.clothingUIscale_act;
        this.v3 = Vector3.zero;
        this.v3.x = this.clothingMenuX;
        this.v3.x -= 22f * (this.clothingUIscale_act - 0.469f) / 0.051f;
        this.UI.transform.Find("InventoryScreen").Find("ClothingMenu").localPosition = this.v3;
    }

    public static bool validSexToyDropPoint(string itemName, string sextoypoint)
    {
        List<string> sexToySlots = Inventory.getItemDefinition(itemName).sexToySlots;
        for (int i = 0; i < sexToySlots.Count; i++)
        {
            string[] array = sexToySlots[i].Split(',');
            for (int j = 0; j < array.Length; j++)
            {
                if (array[j] == sextoypoint || "hex_" + array[j] == sextoypoint || (array[j] == "tool" && sextoypoint.Contains("tool")))
                {
                    return true;
                }
            }
        }
        return false;
    }

    public static List<string> getAllSlotsThatWillBeOccupiedWhenPuttingASexToyOnASlot(string itemName, string sextoypoint)
    {
        if (sextoypoint.Contains("tool"))
        {
            List<string> list = new List<string>();
            list.Add(sextoypoint.Replace("hex_", string.Empty));
            return list;
        }
        List<string> sexToySlots = Inventory.getItemDefinition(itemName).sexToySlots;
        for (int i = 0; i < sexToySlots.Count; i++)
        {
            string[] array = sexToySlots[i].Split(',');
            for (int j = 0; j < array.Length; j++)
            {
                if (array[j] == sextoypoint || "hex_" + array[j] == sextoypoint)
                {
                    return array.ToList();
                }
            }
        }
        return new List<string>();
    }

    public void fullRefreshInventory()
    {
        for (int i = 0; i < this.displayedBags.Count; i++)
        {
            UnityEngine.Object.Destroy(this.displayedBags[i]);
        }
        this.displayedBags = new List<GameObject>();
    }

    public void dropCurrentDraggingInventoryItem()
    {
        bool flag = false;
        if (this.interactingWithBags.Contains("CLOTHING") && this.mX > 0.454f && this.draggingInventoryItem != string.Empty)
        {
            bool flag2 = false;
            for (int i = 0; i < Inventory.getItemDefinition(this.draggingInventoryItem).equipSlots.Count; i++)
            {
                if (Inventory.getItemDefinition(this.draggingInventoryItem).equipSlots[i].occupies)
                {
                    flag2 = true;
                }
            }
            if (flag2)
            {
                this.playSound("ui_clothingShuffle", 1f, 1f);
                Bag bagByName = Inventory.getBagByName("CLOTHING");
                if (this.PC().interactionSubject != null)
                {
                    bagByName = Inventory.getBagByName(this.PC().interactionSubject.data.uid);
                }
                for (int num = bagByName.contents.Count - 1; num >= 0; num--)
                {
                    bool flag3 = false;
                    for (int j = 0; j < Inventory.getItemDefinition(bagByName.contents[num].itemType).equipSlots.Count; j++)
                    {
                        if (Inventory.getItemDefinition(bagByName.contents[num].itemType).equipSlots[j].occupies)
                        {
                            for (int k = 0; k < Inventory.getItemDefinition(this.draggingInventoryItem).equipSlots.Count; k++)
                            {
                                if (Inventory.getItemDefinition(this.draggingInventoryItem).equipSlots[k].occupies && Inventory.getItemDefinition(this.draggingInventoryItem).equipSlots[k].name == Inventory.getItemDefinition(bagByName.contents[num].itemType).equipSlots[j].name)
                                {
                                    flag3 = true;
                                }
                            }
                        }
                    }
                    if (flag3)
                    {
                        Inventory.giveItem(bagByName.contents[num].itemType, bagByName.contents[num].properties, this.draggingInventoryItemOriginalBag, false, true, 0);
                        bagByName.contents.RemoveAt(num);
                    }
                }
                Inventory.giveItem(this.draggingInventoryItem, this.draggingInventoryItemProperties, bagByName.name, false, true, 0);
                flag = true;
            }
            else if (Inventory.getItemDefinition(this.draggingInventoryItem).category == "SEX_TOYS_AND_TOOLS" && this.lastClosestSexToyPoint >= 0 && Game.validSexToyDropPoint(this.draggingInventoryItem, this.sextoyPickupNames[this.lastClosestSexToyPoint]))
            {
                Bag bagByName2 = Inventory.getBagByName("CLOTHING");
                if (this.PC().interactionSubject != null)
                {
                    bagByName2 = Inventory.getBagByName(this.PC().interactionSubject.data.uid);
                }
                List<string> allSlotsThatWillBeOccupiedWhenPuttingASexToyOnASlot = Game.getAllSlotsThatWillBeOccupiedWhenPuttingASexToyOnASlot(this.draggingInventoryItem, this.sextoyPickupNames[this.lastClosestSexToyPoint]);
                List<int> list = new List<int>();
                this.draggingInventoryItemProperties.occupyingSlots = new List<string>();
                for (int l = 0; l < allSlotsThatWillBeOccupiedWhenPuttingASexToyOnASlot.Count; l++)
                {
                    for (int num2 = bagByName2.contents.Count - 1; num2 >= 0; num2--)
                    {
                        if (Inventory.getItemDefinition(bagByName2.contents[num2].itemType).category == "SEX_TOYS_AND_TOOLS" && bagByName2.contents[num2].properties.occupyingSlots.Contains(allSlotsThatWillBeOccupiedWhenPuttingASexToyOnASlot[l]) && !list.Contains(num2))
                        {
                            list.Add(num2);
                        }
                    }
                    this.draggingInventoryItemProperties.occupyingSlots.Add(allSlotsThatWillBeOccupiedWhenPuttingASexToyOnASlot[l]);
                }
                for (int m = 0; m < list.Count; m++)
                {
                    Inventory.moveItemToDifferentBagByIndex(list[m], bagByName2.name, string.Empty);
                }
                this.playSound("ui_clothingShuffle", 1f, 1f);
                this.playSound("hologram_placement_good", 1f, 1f);
                Inventory.giveItem(this.draggingInventoryItem, this.draggingInventoryItemProperties, bagByName2.name, false, true, 0);
                flag = true;
            }
        }
        if (!flag)
        {
            try
            {
                if (this.inventoryDragHoverBag.eligiblePlacement(Inventory.getItemDefinition(this.draggingInventoryItem), this.inventoryDragHoverBagX, this.inventoryDragHoverBagY))
                {
                    Inventory.putItemInBag(this.draggingInventoryItem, this.draggingInventoryItemProperties, this.inventoryDragHoverBag, this.inventoryDragHoverBagX, this.inventoryDragHoverBagY, false, true);
                }
                else
                {
                    Inventory.giveItem(this.draggingInventoryItem, this.draggingInventoryItemProperties, this.draggingInventoryItemOriginalBag, false, true, 0);
                }
            }
            catch
            {
                Inventory.giveItem(this.draggingInventoryItem, this.draggingInventoryItemProperties, this.draggingInventoryItemOriginalBag, false, true, 0);
            }
        }
        if (this.draggingInventoryItem != string.Empty)
        {
            this.playSound("ui_contextclose", 1f, 1f);
        }
        this.draggingInventoryItem = string.Empty;
        this.draggingInventoryItemProperties = null;
        if (flag)
        {
            Inventory.saveInventoryData();
        }
        for (int n = 0; n < Inventory.data.bags.Count; n++)
        {
            if (Inventory.data.bags[n].waitingForDragToUpdate)
            {
                Inventory.data.bags[n].update();
            }
        }
        this.dragItem.SetActive(true);
        for (int num3 = this.dragItem.transform.childCount - 1; num3 >= 0; num3--)
        {
            UnityEngine.Object.Destroy(this.dragItem.transform.GetChild(num3).gameObject);
        }
        this.dragItem.SetActive(false);
        if (this.PC().interactionSubject != null)
        {
            this.PC().interactionSubject.updateClothingBasedOnInventory();
        }
        if (this.selectingComponents)
        {
            this.newComponentDropped = true;
        }
    }

    public void processBackButton()
    {
        if ((UnityEngine.Object)this.backButton == (UnityEngine.Object)null)
        {
            this.backButton = this.UI.transform.Find("cmdBack").gameObject;
        }
        this.backButton.SetActive(this.showBackButton);
        this.showBackButton = false;
    }

    public void processColorPicker()
    {
        this.colorPicker.SetActive(this.colorPickerOpen);
    }

    public void processVersion()
    {
        this.UI.transform.Find("txtVersion").gameObject.SetActive(this.titleOpen && this.titleTimer >= 4.8f);
    }

    public void customizeCharacter()
    {
        if (this.PC() != null)
        {
            this.originalCharacterDataString = CharacterManager.serializeCharacter(this.PC());
            this.PC().autoWalk(-29.8f, 10.8f, -85.75f, 0f, 0f, 0f, this.beginCustomization, 5f);
        }
    }

    public static void recursiveSetLayer(GameObject go, int layer)
    {
        go.layer = layer;
        for (int i = 0; i < go.transform.childCount; i++)
        {
            Game.recursiveSetLayer(go.transform.GetChild(i).gameObject, layer);
        }
    }

    public void beginCustomization()
    {
        this.customizingCharacter = true;
        Bag bagByName = Inventory.getBagByName("CLOTHING");
        List<int> list = new List<int>();
        for (int num = bagByName.contents.Count - 1; num >= 0; num--)
        {
            if (Inventory.getItemDefinition(bagByName.contents[num].itemType).assetName != "RackChip" && !list.Contains(num))
            {
                list.Add(num);
            }
        }
        for (int i = 0; i < list.Count; i++)
        {
            Inventory.moveItemToDifferentBagByIndex(list[i], bagByName.name, string.Empty);
        }
        bagByName.update();
        this.playSound("ui_clothingShuffle", 1f, 1f);
        this.PC().updateClothingBasedOnInventory();
        EmbellishmentPackageManager.loadPackages();
        if (!((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().showerOn)
        {
            ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().toggleShower();
        }
        List<Dropdown.OptionData> list2 = new List<Dropdown.OptionData>();
        for (int j = 0; j < CharacterBundle.headTypes.Count; j++)
        {
            list2.Add(new Dropdown.OptionData());
            list2[list2.Count - 1].text = CharacterBundle.headTypes[j];
        }
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().options = list2;
        this.customizeCharacterPage = 0;
        if (this.PC().data.customized)
        {
            this.customizeCharacterPage = 1;
        }
        this.justChangedCustomizationPageAndNeedRecenter = false;
    }

    public void changeCharacterCustomizationPage(int by)
    {
        if (this.customizeCharacterPage >= 8)
        {
            this.customizeCharacterPage = this.previousEditorPage;
        }
        else
        {
            this.customizeCharacterPage += by;
            if (this.customizeCharacterPage < 0)
            {
                this.customizeCharacterPage = 0;
            }
            if (this.customizeCharacterPage > 7)
            {
                this.customizeCharacterPage = 7;
            }
        }
        if (this.customizeCharacterPage == 4)
        {
            this.characterRebuildDelay = 2;
        }
        ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = false;
        this.justChangedCustomizationPageAndNeedRecenter = true;
        this.previousEditorPage = this.customizeCharacterPage;
        if (this.customizeCharacterPage > 0)
        {
            this.PC().data.customized = true;
        }
    }

    public void exitCharacterCustomization()
    {
        if (this.PC().interactingWithSelf)
        {
            for (int i = 0; i < this.PC().currentInteractions.Count; i++)
            {
                if (this.PC().currentInteractions[i].selfInteraction)
                {
                    this.PC().currentInteractions[i].alive = false;
                }
            }
        }
        this.waitingOnPostCustomizationSnapshot = true;
        this.customizingCharacter = false;
        this.PC().updateClothingBasedOnInventory();
        this.customizationCamRot = 0f;
        this.customizationCamElevation = 0f;
        this.justChangedCustomizationPageAndNeedRecenter = true;
        this.colorPickerOpen = false;
        this.PC().setPose("Idle");
        if ((UnityEngine.Object)this.embellishmentBrush != (UnityEngine.Object)null)
        {
            this.embellishmentBrush.SetActive(false);
        }
        this.embellishmentGradientColorPicker.SetActive(false);
        ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = false;
        if (((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().showerOn)
        {
            ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().toggleShower();
        }
        CharacterManager.updateCharacter(this.PC().data.uid, this.PC().data);
        CharacterManager.saveCharacterData();
        this.setCurTool(0, true, false, KeyCode.Escape);
    }

    public bool saveCustomization(MenuOption mo)
    {
        if (!this.PC().autoWalking)
        {
            CharacterManager.data.playerCharacter = this.PC().data.uid;
            CharacterManager.saveCharacterData();
            this.createHeadshot(this.PC(), null, 1f);
            this.exitCharacterCustomization();
            if (Inventory.getCharVar("startingStuffGiven") == 0f)
            {
                this.volBGM = 0f;
                this.volWorld = 0f;
                this.volUI = 0f;
                this.needTeleportToHallway = true;
            }
        }
        return true;
    }

    public bool importCharacter(MenuOption mo)
    {
        this.customizeCharacterPage = 41;
        return true;
    }

    public bool exportCharacter(MenuOption mo)
    {
        this.customizeCharacterPage = 42;
        return true;
    }

    public bool cancelCustomization(MenuOption mo)
    {
        CharacterManager.deserializeCharacter(this.originalCharacterDataString, this.PC(), string.Empty);
        this.saveCustomization(mo);
        return true;
    }

    public void checkUndoState()
    {
        if (this.undoingLock <= 0 && !Input.GetMouseButton(0))
        {
            this.maxUndoStates = 25;
            string item = CharacterManager.serializeCharacter(this.PC());
            bool flag = false;
            if (this.characterEditUndoStates.Count > 0)
            {
                flag = (item == this.characterEditUndoStates[this.characterEditUndoStates.Count - 1]);
            }
            if (!flag)
            {
                this.characterEditUndoStates.Add(item);
                this.lastUndoState = Time.time;
                while (this.characterEditUndoStates.Count > this.maxUndoStates)
                {
                    this.characterEditUndoStates.RemoveAt(0);
                }
            }
        }
    }

    public void undo()
    {
        if (this.characterEditUndoStates.Count > 1)
        {
            this.characterEditUndoStates.RemoveAt(this.characterEditUndoStates.Count - 1);
            CharacterManager.deserializeCharacter(this.characterEditUndoStates[this.characterEditUndoStates.Count - 1], this.PC(), string.Empty);
            this.characterCustomizationChangeMade = true;
            this.PC().needTailRecurl = true;
            this.undoingLock = 5;
            this.needInitialValues = true;
            this.sexualCharacteristicsPageWasOpen = false;
            this.sexualPreferencesPageWasOpen = false;
            this.closeColorPicker();
        }
    }

    public bool characterCustomizePenisTypeChanged()
    {
        this.penisTypeChangedTime = Time.time;
        UserSettings.dirtyCharacterTexture(this.PC());
        this.characterCustomizationChangeMade = true;
        this.characterRebuildDelay = 2;
        this.characterRedrawDelay = 2;
        return true;
    }

    public bool characterCustomizeSomethingChanged()
    {
        this.characterCustomizationChangeMade = true;
        return true;
    }

    public bool characterCustomizeTailFurSliderChanged()
    {
        this.characterCustomizeTailFurChanged();
        return true;
    }

    public void characterCustomizeTailFurChanged()
    {
        this.characterCustomizePhysiologyChanged();
    }

    public bool characterCustomizePhysiologyChanged()
    {
        this.characterCustomizationChangeMade = true;
        this.characterRebuildDelay = 25;
        this.characterRedrawDelay = 25;
        this.PC().needTailRecurl = true;
        return true;
    }

    public void setAlphaRecursive(Transform thing, float val)
    {
        this.recursiveAlphaRenderers = ((UnityEngine.Component)thing).GetComponentsInChildren<CanvasRenderer>();
        for (int i = 0; i < this.recursiveAlphaRenderers.Length; i++)
        {
            this.recursiveAlphaRenderers[i].SetAlpha(val);
        }
    }

    public bool confirmImport(MenuOption mo)
    {
        CharacterManager.importCharacter(this.PC(), this.importFiles[this.selectedImportFile].GetComponent<FileHex>().filename, true, true);
        this.PC().data.customized = true;
        this.PC().data.name = Inventory.data.characterName;
        this.PC().data.uid = this.PC().data.name + "." + Guid.NewGuid();
        this.needInitialValues = true;
        this.changeCharacterCustomizationPage(0);
        return true;
    }

    public bool confirmExport(MenuOption mo)
    {
        if (!this.waitingOnSnapshotForExport)
        {
            this.createHeadshot(this.PC(), null, 1f);
            this.waitingOnSnapshotForExport = true;
        }
        return true;
    }

    public void checkExportSnapshot()
    {
        if (!Game.gameInstance.renderingHeadshot && (UnityEngine.Object)this.mostRecentSnapshot != (UnityEngine.Object)null)
        {
            this.waitingOnSnapshotForExport = false;
            TextureScale.Bilinear(this.mostRecentSnapshot, 128, 128);
            this.PC().data.avatarPixels = Convert.ToBase64String(this.mostRecentSnapshot.EncodeToPNG());
            this.mostRecentSnapshot = null;
            this.exportFilename = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("ExportWindow").Find("txtName")).GetComponent<InputField>().text;
            CharacterManager.exportCharacter(this.PC(), this.exportFilename);
            this.PC().data.avatarPixels = string.Empty;
            this.changeCharacterCustomizationPage(0);
            this.popup("EXPORT_SUCCESS", false, false);
        }
    }

    public void checkExportFilename()
    {
        bool flag = this.exportFileAlreadyExists;
        if (this.exportFilename != ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("ExportWindow").Find("txtName")).GetComponent<InputField>().text)
        {
            this.exportFilename = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("ExportWindow").Find("txtName")).GetComponent<InputField>().text;
            new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
            this.exportFileAlreadyExists = File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty + this.exportFilename + ".rack2character");
            if (this.exportFileAlreadyExists && !flag)
            {
                this.playSound("ui_warning", 1f, 1f);
            }
        }
    }

    public void customizationShowerOn()
    {
        if (!((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().showerOn)
        {
            ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().toggleShower();
        }
    }

    public void customizationShowerOff()
    {
        if (((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().showerOn)
        {
            ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().toggleShower();
        }
    }

    public void processCustomizationMenu()
    {
        if (this.characterRedrawDelay > 0)
        {
            this.characterRedrawDelay--;
            if (this.characterRedrawDelay <= 0)
            {
                this.PC().buildTexture();
            }
        }
        if (this.characterRebuildDelay > 0)
        {
            if (this.characterRebuildDelay > 1000 && !this.PC().animationPaused)
            {
                this.characterRebuildDelay = 2;
            }
            this.characterRebuildDelay--;
            if (this.characterRebuildDelay <= 0)
            {
                this.PC().rebuildCharacter();
                this.editingExistingEmbellishment = false;
            }
        }
        if (this.customizingCharacter && (this.customizeCharacterPage == 21 || this.customizeCharacterPage == 31 || this.customizeCharacterPage == 51 || this.customizeCharacterPage == 42 || this.customizeCharacterPage == 41))
        {
            this.showBackButton = true;
        }
        if (this.customizingCharacter && !this.PC().autoWalking)
        {
            if (Input.anyKey)
            {
                this.anyInputSinceLastUndoStateCheck = true;
            }
            if (this.anyInputSinceLastUndoStateCheck)
            {
                this.undoStateCheckDelay -= Time.deltaTime;
            }
            if (this.undoStateCheckDelay <= 0f)
            {
                this.anyInputSinceLastUndoStateCheck = false;
                this.checkUndoState();
                this.undoStateCheckDelay += 1f;
            }
            if (this.undoingLock > 0)
            {
                this.undoingLock--;
            }
            if (Input.GetKeyDown(KeyCode.Z) && (Input.GetKey(KeyCode.LeftAlt) || Input.GetKey(KeyCode.LeftControl)))
            {
                this.undo();
            }
            this.UI.transform.Find("CustomizationCamControls").gameObject.SetActive(!this.texturePatternMenuOpen && !this.embellishmentMenuOpen);
            ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("ddPose")).GetComponent<Dropdown>().options[0].text = Localization.getPhrase("DEFAULT", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("ddPose")).GetComponent<Dropdown>().options[1].text = Localization.getPhrase("OPEN_MOUTH", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("ddPose")).GetComponent<Dropdown>().options[2].text = Localization.getPhrase("LIFT_LEG", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("ddPose")).GetComponent<Dropdown>().options[3].text = Localization.getPhrase("SPREAD", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("ddPose")).GetComponent<Dropdown>().options[4].text = Localization.getPhrase("ARMS_OUT", string.Empty);
            if (((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().showerOn)
            {
                ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("cmdShowerOn")).GetComponent<Image>().color = Color.white;
                ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("cmdShowerOff")).GetComponent<Image>().color = Game.fadedCol;
            }
            else
            {
                ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("cmdShowerOn")).GetComponent<Image>().color = Game.fadedCol;
                ((UnityEngine.Component)this.UI.transform.Find("CustomizationCamControls").Find("cmdShowerOff")).GetComponent<Image>().color = Color.white;
            }
            if (this.PC().showPenis)
            {
                this.setAlphaRecursive(this.UI.transform.Find("CustomizationCamControls").Find("previewArousal"), 1f);
            }
            else
            {
                this.setAlphaRecursive(this.UI.transform.Find("CustomizationCamControls").Find("previewArousal"), 0.2f);
            }
            if (this.needInitialValues)
            {
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")).GetComponent<HexOptionSystem>().clearAll();
                switch (this.PC().data.genitalType)
                {
                    case 0:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                            .Find("PENIS")).GetComponent<hexOption>().selected = true;
                        break;
                    case 1:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                            .Find("VAGINA")).GetComponent<hexOption>().selected = true;
                        break;
                    case 2:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                            .Find("NEUTER")).GetComponent<hexOption>().selected = true;
                        break;
                    case 3:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                            .Find("HERMAPHRODITE")).GetComponent<hexOption>().selected = true;
                        break;
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")).GetComponent<HexOptionSystem>().clearAll();
                switch (this.PC().data.ballsType)
                {
                    case 0:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")
                            .Find("NO_SHEATH")).GetComponent<hexOption>().selected = true;
                        break;
                    case 1:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")
                            .Find("SHEATH")).GetComponent<hexOption>().selected = true;
                        break;
                    case 2:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")
                            .Find("SLIT")).GetComponent<hexOption>().selected = true;
                        break;
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions")).GetComponent<HexOptionSystem>().clearAll();
                switch (this.PC().data.hasKnot)
                {
                    case false:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions")
                            .Find("NO_KNOT")).GetComponent<hexOption>().selected = true;
                        break;
                    case true:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions")
                            .Find("KNOTTED")).GetComponent<hexOption>().selected = true;
                        break;
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")).GetComponent<HexOptionSystem>().clearAll();
                switch (this.PC().data.identifiesMale)
                {
                    case false:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ddIdentity")).GetComponent<Dropdown>().value = 1;
                        break;
                    case true:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ddIdentity")).GetComponent<Dropdown>().value = 0;
                        break;
                }
                switch (this.PC().data.penisType)
                {
                    case 0:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                            .Find("HUMANOID")).GetComponent<hexOption>().selected = true;
                        break;
                    case 1:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                            .Find("HUMANOID_UNCUT")).GetComponent<hexOption>().selected = true;
                        break;
                    case 2:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                            .Find("CANINE")).GetComponent<hexOption>().selected = true;
                        break;
                    case 3:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                            .Find("TAPERED")).GetComponent<hexOption>().selected = true;
                        break;
                    case 4:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                            .Find("EQUINE")).GetComponent<hexOption>().selected = true;
                        break;
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BreastSlider")).GetComponent<Slider>().val = this.PC().data.breastSize / Game.maxBreastSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BreastPerkSlider")).GetComponent<Slider>().val = this.PC().data.breastPerk;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisGrowerShowerSlider")).GetComponent<Slider>().val = this.PC().data.growerShower;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeSlider")).GetComponent<Slider>().val = this.PC().data.penisSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ClitSlider")).GetComponent<Slider>().val = this.PC().data.clitSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid")).GetComponent<UIGrid>().valX = this.PC().data.penisLength;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid")).GetComponent<UIGrid>().valY = this.PC().data.penisGirth;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid")).GetComponent<UIGrid>().valX = this.PC().data.vaginaShape;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid")).GetComponent<UIGrid>().valY = this.PC().data.vaginaPlumpness;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid")).GetComponent<UIGrid>().valX = this.PC().data.penisCurveX;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid")).GetComponent<UIGrid>().valY = this.PC().data.penisCurveY;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallSlider")).GetComponent<Slider>().val = this.PC().data.ballSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ScrotumSlider")).GetComponent<Slider>().val = this.PC().data.scrotumLength;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("NippleSlider")).GetComponent<Slider>().val = this.PC().data.nippleSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("SizeGrid")).GetComponent<UIGrid>().valX = this.PC().data.bodyMass;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("SizeGrid")).GetComponent<UIGrid>().valY = this.PC().data.height;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FeminitySlider")).GetComponent<Slider>().val = this.PC().data.bodyFemininity;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FaceFeminitySlider")).GetComponent<Slider>().val = this.PC().data.headFemininity;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("MuscleSlider")).GetComponent<Slider>().val = this.PC().data.muscle;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FatSlider")).GetComponent<Slider>().val = this.PC().data.adiposity;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("BellySlider")).GetComponent<Slider>().val = this.PC().data.belly;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("HipSlider")).GetComponent<Slider>().val = this.PC().data.hipWidth;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("ButtSlider")).GetComponent<Slider>().val = this.PC().data.buttSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")).GetComponent<HexOptionSystem>().clearAll();
                if (this.PC().data.specialFoot == "hooved")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("DIGITIGRADE_HOOVED")).GetComponent<hexOption>().selected = true;
                }
                else if (this.PC().data.specialFoot == "slender")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("DIGITIGRADE_SLENDER")).GetComponent<hexOption>().selected = true;
                }
                else if (this.PC().data.specialFoot == "meaty_d")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("DIGITIGRADE_MEATY")).GetComponent<hexOption>().selected = true;
                }
                else if (this.PC().data.specialFoot == "meaty_p")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("PLANTIGRADE_MEATY")).GetComponent<hexOption>().selected = true;
                }
                else if (this.PC().data.specialFoot == "webbed")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("DIGITIGRADE_WEBBED")).GetComponent<hexOption>().selected = true;
                }
                else
                {
                    switch (this.PC().data.legType)
                    {
                        case 0:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                                .Find("DIGITIGRADE_" + this.PC().data.numToes + "TOE")).GetComponent<hexOption>().selected = true;
                            break;
                        case 1:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                                .Find("PLANTIGRADE_" + this.PC().data.numToes + "TOE")).GetComponent<hexOption>().selected = true;
                            break;
                    }
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")).GetComponent<HexOptionSystem>().clearAll();
                if (this.PC().data.specialHands == "webbed")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                        .Find("HAND_WEBBED")).GetComponent<hexOption>().selected = true;
                }
                else if (this.PC().data.specialHands == "meaty")
                {
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                        .Find("HAND_MEATY")).GetComponent<hexOption>().selected = true;
                }
                else
                {
                    switch (this.PC().data.numFingers)
                    {
                        case 3:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                                .Find("HAND_3FINGER")).GetComponent<hexOption>().selected = true;
                            break;
                        case 4:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                                .Find("HAND_4FINGER")).GetComponent<hexOption>().selected = true;
                            break;
                        case 5:
                            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                                .Find("HAND_5FINGER")).GetComponent<hexOption>().selected = true;
                            break;
                    }
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")).GetComponent<HexOptionSystem>().clearAll();
                switch (this.PC().data.wingType)
                {
                    case 0:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")
                            .Find("WING_NONE")).GetComponent<hexOption>().selected = true;
                        break;
                    case 1:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")
                            .Find("WING_FEATHERY")).GetComponent<hexOption>().selected = true;
                        break;
                    case 2:
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")
                            .Find("WING_LEATHERY")).GetComponent<hexOption>().selected = true;
                        break;
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("chkWag")).GetComponent<Toggle>().isOn = this.PC().data.tailWag;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("chkTwitch")).GetComponent<Toggle>().isOn = this.PC().data.tailFlick;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("chkCurl")).GetComponent<Toggle>().isOn = this.PC().data.tailTuck;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailCurlGrid")).GetComponent<UIGrid>().valX = this.PC().data.tailCurlX;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailCurlGrid")).GetComponent<UIGrid>().valY = this.PC().data.tailCurlY;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailShapeGrid")).GetComponent<UIGrid>().valX = this.PC().data.tailTaper;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailShapeGrid")).GetComponent<UIGrid>().valY = this.PC().data.tailThickness;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailLengthSlider")).GetComponent<Slider>().val = this.PC().data.tailLength;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailStiffnessSlider")).GetComponent<Slider>().val = this.PC().data.tailStiffness;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailSizeSlider")).GetComponent<Slider>().val = this.PC().data.tailSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingSizeSlider")).GetComponent<Slider>().val = this.PC().data.wingSize;
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailLiftSlider")).GetComponent<Slider>().val = this.PC().data.tailLift;
                for (int i = 0; i < ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().options.Count; i++)
                {
                    if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().options[i].text == this.PC().data.headType)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().value = i;
                    }
                }
                this.needInitialValues = false;
            }
            this.UI.transform.Find("CharacterCustomizationUI").gameObject.SetActive(!this.texturePatternMenuOpen && !this.embellishmentMenuOpen);
            this.UI.transform.Find("CharacterCustomizationSaveCancel").gameObject.SetActive(!this.texturePatternMenuOpen && !this.embellishmentMenuOpen && !this.showBackButton && this.blackAmount <= 0.3f && !this.PC().interactingWithSelf);
            this.UI.transform.Find("CustomizationCamControls").gameObject.SetActive(this.blackAmount <= 0.3f);
            this.UI.transform.Find("CharacterCustomizationSaveCancel").Find("cmdCancel").gameObject.SetActive(Inventory.getCharVar("startingStuffGiven") == 1f);
            this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").gameObject.SetActive(this.customizeCharacterPage != 0);
            switch (this.customizeCharacterPage)
            {
                case 0:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("QUICK_START", string.Empty);
                    break;
                case 1:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("SEX_ORGANS", string.Empty);
                    break;
                case 2:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("BODY_TYPE", string.Empty);
                    break;
                case 3:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("PHYSIOLOGY", string.Empty);
                    break;
                case 4:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("EMBELLISHMENTS", string.Empty);
                    break;
                case 31:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("EMBELLISHMENT_COLORS", string.Empty);
                    break;
                case 21:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("TAIL_FUR", string.Empty);
                    break;
                case 5:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("COLOR_AND_MARKINGS", string.Empty);
                    break;
                case 42:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("EXPORT", string.Empty);
                    break;
                case 41:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("IMPORT", string.Empty);
                    break;
                case 51:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("DECALS", string.Empty);
                    break;
                case 6:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("SEXUAL_CHARACTERISTICS", string.Empty);
                    break;
                case 7:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("categoryMenu").Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("SEXUAL_PREFERENCES", string.Empty);
                    break;
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").gameObject.SetActive(this.customizeCharacterPage == 1);
            if (this.customizeCharacterPage == 1)
            {
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ddIdentity")).GetComponent<Dropdown>().options[0].text = Localization.getPhrase("MALE", string.Empty);
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ddIdentity")).GetComponent<Dropdown>().options[1].text = Localization.getPhrase("FEMALE", string.Empty);
                this.PC().data.identifiesMale = (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ddIdentity")).GetComponent<Dropdown>().value == 0);
                if (this.PC().showPenis)
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions"), 1f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeSlider"), 1f);
                    if (!this.PC().data.hasSheath)
                    {
                        this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisGrowerShowerSlider"), 1f);
                    }
                    else
                    {
                        this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisGrowerShowerSlider"), 0.25f);
                    }
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid"), 1f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid"), 1f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions"), 1f);
                }
                else
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions"), 0.25f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisGrowerShowerSlider"), 0.25f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeSlider"), 0.25f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid"), 0.25f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid"), 0.25f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions"), 0.25f);
                }
                if (this.PC().showBalls)
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallSlider"), 1f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions"), 1f);
                }
                else
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallSlider"), 0.25f);
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions"), 0.25f);
                }
                if (this.PC().showVagina)
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid"), 1f);
                }
                else
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid"), 0.25f);
                }
                if (this.PC().showVagina && !this.PC().showPenis)
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ClitSlider"), 1f);
                }
                else
                {
                    this.setAlphaRecursive(this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid"), 0.25f);
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions")
                    .Find("NO_KNOT")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.hasKnot = false;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("KnotOptions")
                    .Find("KNOTTED")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.hasKnot = true;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")
                    .Find("NO_SHEATH")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.ballsType = 0;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")
                    .Find("SHEATH")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.ballsType = 1;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallOptions")
                    .Find("SLIT")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.ballsType = 2;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                    .Find("PENIS")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.genitalType = 0;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                    .Find("VAGINA")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.genitalType = 1;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                    .Find("NEUTER")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.genitalType = 2;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("GenitalOptions")
                    .Find("HERMAPHRODITE")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.genitalType = 3;
                    this.PC().data.ballsType = 0;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                    .Find("HUMANOID")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.penisType = 0;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                    .Find("HUMANOID_UNCUT")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.penisType = 1;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                    .Find("CANINE")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.penisType = 2;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                    .Find("TAPERED")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.penisType = 3;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisOptions")
                    .Find("EQUINE")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.penisType = 4;
                }
                this.PC().data.breastSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BreastSlider")).GetComponent<Slider>().val * Game.maxBreastSize;
                this.PC().data.breastPerk = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BreastPerkSlider")).GetComponent<Slider>().val;
                this.PC().data.growerShower = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisGrowerShowerSlider")).GetComponent<Slider>().val;
                this.PC().data.penisSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeSlider")).GetComponent<Slider>().val;
                this.PC().data.clitSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ClitSlider")).GetComponent<Slider>().val;
                this.PC().data.ballSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("BallSlider")).GetComponent<Slider>().val;
                this.PC().data.scrotumLength = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("ScrotumSlider")).GetComponent<Slider>().val;
                this.PC().data.penisLength = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid")).GetComponent<UIGrid>().valX;
                this.PC().data.penisGirth = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisSizeGrid")).GetComponent<UIGrid>().valY;
                this.PC().data.penisCurveX = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid")).GetComponent<UIGrid>().valX;
                this.PC().data.penisCurveY = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("PenisCurveGrid")).GetComponent<UIGrid>().valY;
                this.PC().data.nippleSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("NippleSlider")).GetComponent<Slider>().val;
                this.PC().data.vaginaShape = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid")).GetComponent<UIGrid>().valX;
                this.PC().data.vaginaPlumpness = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Genitals").Find("VaginaGrid")).GetComponent<UIGrid>().valY;
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("QuickStart").gameObject.SetActive(this.customizeCharacterPage == 0);
            this.processQuickStart();
            this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").gameObject.SetActive(this.customizeCharacterPage == 2);
            if (this.customizeCharacterPage == 2)
            {
                this.PC().data.bodyMass = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("SizeGrid")).GetComponent<UIGrid>().valX;
                this.PC().data.height = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("SizeGrid")).GetComponent<UIGrid>().valY;
                this.PC().data.bodyFemininity = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FeminitySlider")).GetComponent<Slider>().val;
                this.PC().data.headFemininity = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FaceFeminitySlider")).GetComponent<Slider>().val;
                this.PC().data.muscle = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("MuscleSlider")).GetComponent<Slider>().val;
                this.PC().data.adiposity = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("FatSlider")).GetComponent<Slider>().val;
                this.PC().data.belly = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("BellySlider")).GetComponent<Slider>().val;
                this.PC().data.hipWidth = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("HipSlider")).GetComponent<Slider>().val;
                this.PC().data.buttSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("BodyType").Find("ButtSlider")).GetComponent<Slider>().val;
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").gameObject.SetActive(this.customizeCharacterPage == 3);
            if (this.customizeCharacterPage == 3)
            {
                this.PC().data.specialFoot = string.Empty;
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                    .Find("DIGITIGRADE_HOOVED")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.legType = 0;
                    this.PC().data.specialFoot = "hooved";
                }
                else if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                    .Find("DIGITIGRADE_SLENDER")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.legType = 0;
                    this.PC().data.specialFoot = "slender";
                }
                else if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                    .Find("DIGITIGRADE_MEATY")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.legType = 0;
                    this.PC().data.specialFoot = "meaty_d";
                }
                else if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                    .Find("PLANTIGRADE_MEATY")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.legType = 1;
                    this.PC().data.specialFoot = "meaty_p";
                }
                else if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                    .Find("DIGITIGRADE_WEBBED")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.legType = 0;
                    this.PC().data.specialFoot = "webbed";
                }
                for (int j = 3; j <= 5; j++)
                {
                    if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("DIGITIGRADE_" + j + "TOE")).GetComponent<hexOption>().selected)
                    {
                        this.PC().data.legType = 0;
                        this.PC().data.numToes = j;
                    }
                    if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("FootOptions")
                        .Find("PLANTIGRADE_" + j + "TOE")).GetComponent<hexOption>().selected)
                    {
                        this.PC().data.legType = 1;
                        this.PC().data.numToes = j;
                    }
                }
                this.PC().data.specialHands = string.Empty;
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                    .Find("HAND_MEATY")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.numFingers = 5;
                    this.PC().data.specialHands = "meaty";
                }
                else if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                    .Find("HAND_WEBBED")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.numFingers = 5;
                    this.PC().data.specialHands = "webbed";
                }
                else
                {
                    for (int k = 3; k <= 5; k++)
                    {
                        if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HandOptions")
                            .Find("HAND_" + k + "FINGER")).GetComponent<hexOption>().selected)
                        {
                            this.PC().data.numFingers = k;
                        }
                    }
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")
                    .Find("WING_NONE")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.wingType = 0;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")
                    .Find("WING_FEATHERY")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.wingType = 1;
                }
                if (((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingOptions")
                    .Find("WING_LEATHERY")).GetComponent<hexOption>().selected)
                {
                    this.PC().data.wingType = 2;
                }
                this.PC().data.tailWag = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("chkWag")).GetComponent<Toggle>().isOn;
                this.PC().data.tailFlick = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("chkTwitch")).GetComponent<Toggle>().isOn;
                this.PC().data.tailTuck = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("chkCurl")).GetComponent<Toggle>().isOn;
                this.PC().data.tailCurlX = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailCurlGrid")).GetComponent<UIGrid>().valX;
                this.PC().data.tailCurlY = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailCurlGrid")).GetComponent<UIGrid>().valY;
                this.PC().data.tailTaper = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailShapeGrid")).GetComponent<UIGrid>().valX;
                this.PC().data.tailThickness = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailShapeGrid")).GetComponent<UIGrid>().valY;
                this.PC().data.tailLength = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailLengthSlider")).GetComponent<Slider>().val;
                this.PC().data.tailStiffness = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailStiffnessSlider")).GetComponent<Slider>().val;
                this.PC().data.tailSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailSizeSlider")).GetComponent<Slider>().val;
                this.PC().data.wingSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("WingSizeSlider")).GetComponent<Slider>().val;
                this.PC().data.tailLift = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("TailLiftSlider")).GetComponent<Slider>().val;
                if (this.PC().data.headType != ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().value].text)
                {
                    this.PC().data.hairstyle = "none";
                    this.PC().data.hairvariant = 0;
                    this.PC().data.hairAddons = new List<HairLayer>();
                    this.PC().data.headType = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("ddHeads")).GetComponent<Dropdown>().value].text;
                }
                if ((UnityEngine.Object)this.PC().headPiece != (UnityEngine.Object)null && this.PC().headPiece.name != this.lastLoadedHeadPiece)
                {
                    if ((UnityEngine.Object)this.headBlendSliderTemplate == (UnityEngine.Object)null)
                    {
                        this.headBlendSliderTemplate = GameObject.Find("HeadBlendTemplate");
                        this.headBlendSliderTemplate.transform.SetParent(this.UI.transform);
                        this.headBlendSliderTemplate.SetActive(false);
                    }
                    for (int num = this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
                        .childCount - 1; num >= 0; num--)
                    {
                        UnityEngine.Object.Destroy(this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
                            .GetChild(num)
                            .gameObject);
                    }
                    this.headBlendSliderTemplate.SetActive(true);
                    int num2 = 0;
                    int num3 = 6;
                    if (this.PC().data.headType == "human" || this.PC().data.headType == "bird" || this.PC().data.headType == "lizard")
                    {
                        num3 -= 3;
                    }
                    for (int l = 0; l < num3; l++)
                    {
                        GameObject gameObject = UnityEngine.Object.Instantiate(this.headBlendSliderTemplate);
                        switch (l)
                        {
                            case 0:
                                ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text = "Head Size";
                                ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = 0.5f;
                                break;
                            case 1:
                                ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text = "Eye Size";
                                ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = 0.5f;
                                break;
                            case 2:
                                ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text = "Tongue Length";
                                ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = 0.5f;
                                break;
                            case 3:
                                ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text = "Floppy Ears";
                                break;
                            case 4:
                                ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text = "Forward-Leaning Ears";
                                ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = 0.5f;
                                break;
                            case 5:
                                ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text = "Centered Ears";
                                ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = 0f;
                                break;
                        }
                        gameObject.transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends"));
                        this.v3 = Vector3.zero;
                        this.v3.y = 8f - 17f * (float)num2;
                        for (int m = 0; m < this.PC().data.headMorphs.Count; m++)
                        {
                            if (this.PC().data.headMorphs[m].key == ((UnityEngine.Component)gameObject.transform.Find("Text")).GetComponent<Text>().text)
                            {
                                ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = this.PC().data.headMorphs[m].val;
                            }
                        }
                        gameObject.transform.localPosition = this.v3;
                        gameObject.transform.localScale = Vector3.one;
                        num2++;
                    }
                    for (int n = 0; n < ((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.blendShapeCount; n++)
                    {
                        if (((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.GetBlendShapeName(n) != "Ghost" && ((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.GetBlendShapeName(n) != "Big Eyes" && ((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.GetBlendShapeName(n) != "Small Eyes" && ((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.GetBlendShapeName(n) != "Masculine" && ((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.GetBlendShapeName(n) != "Feminine")
                        {
                            GameObject gameObject2 = UnityEngine.Object.Instantiate(this.headBlendSliderTemplate);
                            ((UnityEngine.Component)gameObject2.transform.Find("Text")).GetComponent<Text>().text = ((UnityEngine.Component)this.PC().headPiece).GetComponent<SkinnedMeshRenderer>().sharedMesh.GetBlendShapeName(n);
                            gameObject2.transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends"));
                            this.v3 = Vector3.zero;
                            this.v3.y = 8f - 17f * (float)num2;
                            for (int num4 = 0; num4 < this.PC().data.headMorphs.Count; num4++)
                            {
                                if (this.PC().data.headMorphs[num4].key == ((UnityEngine.Component)gameObject2.transform.Find("Text")).GetComponent<Text>().text)
                                {
                                    ((UnityEngine.Component)gameObject2.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value = this.PC().data.headMorphs[num4].val;
                                }
                            }
                            gameObject2.transform.localPosition = this.v3;
                            gameObject2.transform.localScale = Vector3.one;
                            num2++;
                        }
                    }
                    this.headBlendSliderTemplate.SetActive(false);
                    this.lastLoadedHeadPiece = this.PC().headPiece.name;
                }
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").gameObject.SetActive(this.customizeCharacterPage == 4);
            if (this.customizeCharacterPage == 4)
            {
                this.colorPickerOpen = false;
                this.processEmbellishmentEditing();
            }
            else
            {
                if ((UnityEngine.Object)this.embellishmentBrush != (UnityEngine.Object)null)
                {
                    this.embellishmentBrush.SetActive(false);
                }
                Game.needEmbellishmentPackageMenuRebuild = true;
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").gameObject.SetActive(this.customizeCharacterPage == 31);
            if (this.customizeCharacterPage == 31)
            {
                this.processEmbellishmentColorMenu();
            }
            else
            {
                this.embellishmentGradientColorPicker.SetActive(false);
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("DecalPainter").gameObject.SetActive(this.customizeCharacterPage == 51);
            this.processDecalPainting();
            this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").gameObject.SetActive(this.customizeCharacterPage == 6);
            this.processSexualCharacteristics();
            this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").gameObject.SetActive(this.customizeCharacterPage == 7);
            this.processSexualPreferences();
            this.UI.transform.Find("CharacterCustomizationUI").Find("ExportWindow").gameObject.SetActive(this.customizeCharacterPage == 42);
            if (this.customizeCharacterPage == 42)
            {
                this.UI.transform.Find("CharacterCustomizationUI").Find("ExportWindow").Find("warning")
                    .gameObject.SetActive(this.exportFileAlreadyExists);
                if (this.waitingOnSnapshotForExport)
                {
                    this.checkExportSnapshot();
                }
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").gameObject.SetActive(this.customizeCharacterPage == 41);
            if (this.customizeCharacterPage == 41)
            {
                if (this.needImportPageRebuild)
                {
                    if ((UnityEngine.Object)this.importFileTemplate == (UnityEngine.Object)null)
                    {
                        this.importFileTemplate = this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("Files")
                            .Find("FileTemplate")
                            .gameObject;
                        this.importTooltip = this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("tooltip")
                            .gameObject;
                        this.importWarning = this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("warning")
                            .gameObject;
                        this.importCmdOkay = this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("cmdOkay")
                            .gameObject;
                    }
                    this.importFileTemplate.SetActive(true);
                    new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
                    string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characters" + Game.PathDirectorySeparatorChar + string.Empty, "*.rack2character");
                    List<string> list = files.ToList();
                    for (int num5 = list.Count - 1; num5 >= 0; num5--)
                    {
                        if (list[num5].IndexOf("NPC.") != -1)
                        {
                            list.RemoveAt(num5);
                        }
                    }
                    files = list.ToArray();
                    int num6 = files.Length;
                    this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("EmptyWarning")
                        .gameObject.SetActive(num6 == 0);
                    float num7 = 1f;
                    if (num6 > 432)
                    {
                        num7 = 0.125f;
                    }
                    else if (num6 > 108)
                    {
                        num7 = 0.25f;
                    }
                    else if (num6 > 27)
                    {
                        num7 = 0.5f;
                    }
                    int num8 = 7 * Mathf.RoundToInt(1f / num7);
                    float num9 = 64f * num7;
                    float num10 = 75f * num7;
                    for (int num11 = 0; num11 < num6; num11++)
                    {
                        GameObject gameObject3 = UnityEngine.Object.Instantiate(this.importFileTemplate);
                        gameObject3.GetComponent<FileHex>().id = num11;
                        gameObject3.GetComponent<FileHex>().filename = files[num11];
                        gameObject3.GetComponent<FileHex>().shortname = files[num11].Split(Game.PathDirectorySeparatorChar)[files[num11].Split(Game.PathDirectorySeparatorChar).Length - 1].Split('.')[0];
                        gameObject3.transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("ImportWindow").Find("Files"));
                        gameObject3.transform.localScale = Vector3.one * num7;
                        this.v3 = Vector3.zero;
                        int num12 = num11 % num8;
                        int num13 = Mathf.FloorToInt((float)(num11 / num8));
                        this.v3.x = num9 * (float)num12;
                        this.v3.y = num10 * (float)(-num13);
                        if (num12 % 2 == 0)
                        {
                            this.v3.y -= num10 * 0.5f;
                        }
                        this.v3.z = 0f;
                        gameObject3.transform.localPosition = this.v3;
                        this.importFiles.Add(gameObject3);
                    }
                    this.importFileTemplate.SetActive(false);
                    this.needImportPageRebuild = false;
                    this.curImportFileToLoad = 0;
                    this.selectedImportFile = -1;
                    this.hoverImportFile = -1;
                }
                if (this.curImportFileToLoad < this.importFiles.Count)
                {
                    Texture2D texture2D = new Texture2D(2, 2);
                    texture2D.LoadImage(CharacterManager.getAvatarFromCharacterFile(this.importFiles[this.curImportFileToLoad].GetComponent<FileHex>().filename));
                    Texture2D tex = texture2D;
                    Vector3 localScale = this.importFiles[this.curImportFileToLoad].transform.localScale;
                    int newWidth = Mathf.RoundToInt(128f * localScale.x);
                    Vector3 localScale2 = this.importFiles[this.curImportFileToLoad].transform.localScale;
                    TextureScale.Bilinear(tex, newWidth, Mathf.RoundToInt(128f * localScale2.x));
                    ((UnityEngine.Component)this.importFiles[this.curImportFileToLoad].transform.Find("mask").Find("avatar")).GetComponent<RawImage>().texture = texture2D;
                    this.curImportFileToLoad++;
                }
                for (int num14 = 0; num14 < this.importFiles.Count; num14++)
                {
                    if (num14 == this.selectedImportFile || num14 == this.hoverImportFile)
                    {
                        ((UnityEngine.Component)this.importFiles[num14].transform.Find("border")).GetComponent<Image>().color = Color.white;
                    }
                    else
                    {
                        ((UnityEngine.Component)this.importFiles[num14].transform.Find("border")).GetComponent<Image>().color = Color.black;
                    }
                }
                this.importTooltip.SetActive(this.hoverImportFile != -1);
                this.importWarning.SetActive(this.selectedImportFile != -1);
                this.importCmdOkay.SetActive(this.selectedImportFile != -1);
                if (this.hoverImportFile != -1)
                {
                    this.importTooltip.transform.position = this.importFiles[this.hoverImportFile].transform.position;
                    ((UnityEngine.Component)this.importTooltip.transform.Find("txt")).GetComponent<Text>().text = this.importFiles[this.hoverImportFile].GetComponent<FileHex>().shortname;
                }
            }
            else
            {
                if (this.importFiles.Count > 0)
                {
                    for (int num15 = 0; num15 < this.importFiles.Count; num15++)
                    {
                        UnityEngine.Object.Destroy(this.importFiles[num15]);
                    }
                    this.importFiles = new List<GameObject>();
                }
                this.needImportPageRebuild = true;
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").gameObject.SetActive(this.customizeCharacterPage == 21);
            if (this.customizeCharacterPage == 21)
            {
                this.processTailFurEditor();
            }
            else
            {
                this.tailFurEditorWasOpen = false;
            }
            this.UI.transform.Find("CharacterCustomizationUI").Find("ColorAndMarkings").gameObject.SetActive(this.customizeCharacterPage == 5);
            if (this.customizeCharacterPage == 5)
            {
                this.processTextureEditor();
            }
            if (this.characterCustomizationChangeMade)
            {
                this.PC().applyCustomization();
                this.characterCustomizationChangeMade = false;
            }
        }
        else
        {
            this.needInitialValues = true;
            this.UI.transform.Find("CharacterCustomizationUI").gameObject.SetActive(false);
            this.UI.transform.Find("CharacterCustomizationSaveCancel").gameObject.SetActive(false);
            this.UI.transform.Find("CustomizationCamControls").gameObject.SetActive(false);
        }
    }

    public void sexualPreferenceSliderChanged()
    {
        if (this.sexualPreferencesPageWasOpen)
        {
            foreach (string item in this.sexualPreferenceSliders.Keys.ToList())
            {
                if (!item.ToLower().Contains("category"))
                {
                    this.PC().preferences[item] = this.sexualPreferenceSliders[item].value;
                    for (int i = 0; i < this.PC().data.preferences.Count; i++)
                    {
                        if (this.PC().data.preferences[i].preference == item)
                        {
                            this.PC().data.preferences[i].value = this.sexualPreferenceSliders[item].value;
                        }
                    }
                }
            }
            this.updateSexualPreferenceSliderColors();
        }
    }

    public void processSexualPreferences()
    {
        this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").gameObject.SetActive(this.customizeCharacterPage == 7);
        if (this.customizeCharacterPage == 7)
        {
            if (!this.sexualPreferencesPageBuilt)
            {
                if ((UnityEngine.Object)this.sexualPreferenceSliderTemplate == (UnityEngine.Object)null)
                {
                    this.sexualPreferencesContainer = this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                        .Find("container");
                    this.sexualPreferenceSliderTemplate = this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                        .Find("container")
                        .Find("PreferenceTemplate")
                        .gameObject;
                    this.sexualPreferenceSliderTemplate.transform.SetParent(this.UI.transform);
                    this.sexualPreferenceSliderTemplate.SetActive(false);
                }
                for (int num = this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                    .Find("container")
                    .childCount - 1; num >= 0; num--)
                {
                    UnityEngine.Object.Destroy(this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                        .Find("container")
                        .GetChild(num)
                        .gameObject);
                }
                this.sexualPreferenceSliders = new Dictionary<string, UnityEngine.UI.Slider>();
                this.sexualPreferenceSliderTemplate.SetActive(true);
                this.sexualPreferenceSliderY = 0f;
                foreach (string item in SexualPreferences.preferences.Keys.ToList())
                {
                    if (!item.ToLower().Contains("category"))
                    {
                        this.addSexualPreferenceSlider(SexualPreferences.preferences[item].id, -1f, 2f);
                    }
                }
                this.sexualPreferenceSliderTemplate.SetActive(false);
                this.sexualPreferencesPageBuilt = true;
            }
            if (!this.sexualPreferencesPageWasOpen)
            {
                foreach (string item2 in this.sexualPreferenceSliders.Keys.ToList())
                {
                    if (!item2.ToLower().Contains("category"))
                    {
                        this.sexualPreferenceSliders[item2].value = this.PC().preferences[item2];
                        if (SexualPreferences.getPreference(item2).hideFromPreview == 2 && !this.PC().showPenis)
                        {
                            goto IL_02ed;
                        }
                        if (SexualPreferences.getPreference(item2).hideFromPreview == 3 && !this.PC().showVagina)
                        {
                            goto IL_02ed;
                        }
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                            .Find("container")
                            .Find(item2)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 1f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                            .Find("container")
                            .Find(item2)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 1f;
                    }
                    continue;
                IL_02ed:
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                        .Find("container")
                        .Find(item2)
                        .Find("txtLabel")).GetComponent<Text>().color = Color.white * 0.5f;
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
                        .Find("container")
                        .Find(item2)
                        .Find("txtDescription")).GetComponent<Text>().color = Color.white * 0.5f;
                }
                this.updateSexualPreferenceSliderColors();
            }
            if (this.mX < 0.5f)
            {
                float num2 = this.sexualPreferenceScroll;
                Vector2 mouseScrollDelta = Input.mouseScrollDelta;
                this.sexualPreferenceScroll = num2 - mouseScrollDelta.y * 70f;
                if (this.sexualPreferenceScroll < 0f)
                {
                    this.sexualPreferenceScroll = 0f;
                }
                if (this.sexualPreferenceScroll > -350f + this.sexualPreferenceSliderY * 40f)
                {
                    this.sexualPreferenceScroll = -350f + this.sexualPreferenceSliderY * 40f;
                }
                this.v3.x = 0f;
                this.v3.y = this.sexualPreferenceScroll;
                this.v3.z = 0f;
                Transform transform = this.sexualPreferencesContainer;
                transform.localPosition += (this.v3 - this.sexualPreferencesContainer.localPosition) * Game.cap(Time.deltaTime * 15f, 0f, 1f);
            }
            this.sexualPreferencesPageWasOpen = true;
        }
        else
        {
            this.sexualPreferencesPageWasOpen = false;
        }
    }

    public void updateSexualPreferenceSliderColors()
    {
        ColorBlock colors = default(ColorBlock);
        foreach (string item in this.sexualPreferenceSliders.Keys.ToList())
        {
            float num = 1f;
            float num2 = 1f;
            float num3 = (this.sexualPreferenceSliders[item].value - this.sexualPreferenceSliders[item].minValue) / (this.sexualPreferenceSliders[item].maxValue - this.sexualPreferenceSliders[item].minValue);
            num -= Game.cap((num3 - 0.5f) * 3f, 0f, 1f);
            num2 -= Game.cap((0.5f - num3) * 3f, 0f, 1f);
            colors.normalColor = new Color(num, num2, 0.25f);
            colors.highlightedColor = colors.normalColor;
            colors.pressedColor = colors.normalColor;
            colors.disabledColor = colors.normalColor * 0.5f;
            colors.colorMultiplier = 1f;
            this.sexualPreferenceSliders[item].colors = colors;
            ((UnityEngine.Component)this.sexualPreferenceSliders[item].transform.Find("Fill Area").Find("Fill")).GetComponent<Image>().color = colors.normalColor;
        }
    }

    public void addSexualPreferenceSlider(string name, float min, float max)
    {
        GameObject gameObject = UnityEngine.Object.Instantiate(this.sexualPreferenceSliderTemplate);
        gameObject.name = name;
        ((UnityEngine.Component)gameObject.transform.Find("txtLabel")).GetComponent<Text>().text = Localization.getPhrase("PREFERENCE_" + name, string.Empty);
        ((UnityEngine.Component)gameObject.transform.Find("txtDescription")).GetComponent<Text>().text = Localization.getPhrase("PREFERENCE_DESCRIPTION_" + name, string.Empty);
        gameObject.transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("SexualPreferences").Find("Preferences")
            .Find("container"));
        ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().minValue = min;
        ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().maxValue = max;
        this.v3 = Vector3.zero;
        this.v3.x = -220f;
        this.v3.z = 0f;
        this.v3.y = 155f - 40f * this.sexualPreferenceSliderY;
        gameObject.transform.localPosition = this.v3;
        gameObject.transform.localScale = Vector3.one;
        this.sexualPreferenceSliderY += 1f;
        this.sexualPreferenceSliders.Add(name, ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>());
    }

    public void sexualCharacteristicSliderChanged()
    {
        if (this.sexualCharacteristicsPageWasOpen)
        {
            Type type = this.PC().data.GetType();
            FieldInfo[] fields = type.GetFields();
            foreach (string item in this.sexualCharacteristicSliders.Keys.ToList())
            {
                FieldInfo[] array = fields;
                foreach (FieldInfo fieldInfo in array)
                {
                    if (fieldInfo.Name == item)
                    {
                        fieldInfo.SetValue(this.PC().data, this.sexualCharacteristicSliders[item].value);
                    }
                }
            }
        }
    }

    public void updateSexualCharacteristicSliderColors()
    {
        ColorBlock colors = default(ColorBlock);
        foreach (string item in this.sexualCharacteristicSliders.Keys.ToList())
        {
            float num = 1f;
            float num2 = 1f;
            float num3 = (this.sexualCharacteristicSliders[item].value - this.sexualCharacteristicSliders[item].minValue) / (this.sexualCharacteristicSliders[item].maxValue - this.sexualCharacteristicSliders[item].minValue);
            num -= Game.cap(num3 - 0.5f, 0f, 1f) * 2f;
            num2 -= Game.cap(0.5f - num3, 0f, 1f) * 2f;
            colors.normalColor = new Color(num, num2, 0.5f);
            colors.colorMultiplier = 1f;
            this.sexualCharacteristicSliders[item].colors = colors;
            ((UnityEngine.Component)this.sexualCharacteristicSliders[item].transform.Find("Fill Area").Find("Fill")).GetComponent<Image>().color = colors.normalColor;
        }
    }

    public void processSexualCharacteristics()
    {
        this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").gameObject.SetActive(this.customizeCharacterPage == 6);
        if (this.customizeCharacterPage == 6)
        {
            if (!this.sexualCharacteristicsPageBuilt)
            {
                if ((UnityEngine.Object)this.sexualCharacteristicSliderTemplate == (UnityEngine.Object)null)
                {
                    this.sexualCharacteristicsContainer = this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                        .Find("container");
                    this.sexualCharacteristicSliderTemplate = this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                        .Find("container")
                        .Find("CharacteristicTemplate")
                        .gameObject;
                    this.sexualCharacteristicSliderTemplate.transform.SetParent(this.UI.transform);
                    this.sexualCharacteristicSliderTemplate.SetActive(false);
                }
                for (int num = this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                    .Find("container")
                    .childCount - 1; num >= 0; num--)
                {
                    UnityEngine.Object.Destroy(this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                        .Find("container")
                        .GetChild(num)
                        .gameObject);
                }
                this.sexualCharacteristicSliders = new Dictionary<string, UnityEngine.UI.Slider>();
                this.sexualCharacteristicSliderTemplate.SetActive(true);
                this.sexualCharacteristicSliderY = 0f;
                this.addSexualCharacteristicSlider("stamina", 0.3f, 1.7f);
                this.addSexualCharacteristicSlider("sensitivity", 0.2f, 2f);
                this.addSexualCharacteristicSlider("proximitySensitivity", 0.1f, 1.5f);
                this.addSexualCharacteristicSlider("orgasmSensitivity", 0.1f, 2f);
                this.addSexualCharacteristicSlider("refractorySensitivity", 0.2f, 5f);
                this.addSexualCharacteristicSlider("wetnessThreshold", 0.1f, 0.9f);
                this.addSexualCharacteristicSlider("precumThreshold", 0.1f, 0.9f);
                this.addSexualCharacteristicSlider("orgasmDuration", 0.5f, 2f);
                this.addSexualCharacteristicSlider("orgasmAnticipationFactor", 0f, 0.9f);
                this.addSexualCharacteristicSlider("refractoryDuration", 0.1f, 2f);
                this.addSexualCharacteristicSlider("analPleasure", 0f, 2f);
                this.addSexualCharacteristicSlider("squirtAmount", 0f, 2f);
                this.addSexualCharacteristicSlider("cumVolume", 0.1f, 2f);
                this.addSexualCharacteristicSlider("cumSpurtStrength", 0.1f, 2f);
                this.addSexualCharacteristicSlider("cumSpurtFrequency", 0.5f, 2f);
                this.addSexualCharacteristicSlider("negativeExperienceModifier", 0f, 10f);
                this.addSexualCharacteristicSlider("tailholeTightness", 0.1f, 0.9f);
                this.addSexualCharacteristicSlider("vaginalTightness", 0.1f, 0.9f);
                this.sexualCharacteristicSliderTemplate.SetActive(false);
                this.sexualCharacteristicsPageBuilt = true;
            }
            if (!this.sexualCharacteristicsPageWasOpen)
            {
                Type type = this.PC().data.GetType();
                FieldInfo[] fields = type.GetFields();
                foreach (string item in this.sexualCharacteristicSliders.Keys.ToList())
                {
                    FieldInfo[] array = fields;
                    foreach (FieldInfo fieldInfo in array)
                    {
                        if (fieldInfo.Name == item)
                        {
                            this.sexualCharacteristicSliders[item].value = (float)fieldInfo.GetValue(this.PC().data);
                        }
                    }
                    if (item != null)
                    {
                        Dictionary<string, int> dictionary = new Dictionary<string, int>(7);
                        dictionary.Add("cumVolume", 1);
                        dictionary.Add("cumSpurtStrength", 1);
                        dictionary.Add("cumSpurtFrequency", 1);
                        dictionary.Add("wetnessThreshold", 2);
                        dictionary.Add("squirtAmount", 2);
                        dictionary.Add("vaginalTightness", 2);
                        dictionary.Add("precumThreshold", 3);
                        int num2 = default(int);
                        if (dictionary.TryGetValue(item, out num2))
                        {
                            switch (num2)
                            {
                                case 1:
                                    goto IL_0548;
                                case 2:
                                    goto IL_06e2;
                                case 3:
                                    goto IL_086c;
                            }
                        }
                    }
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                        .Find("container")
                        .Find(item)
                        .Find("txtLabel")).GetComponent<Text>().color = Color.white * 1f;
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                        .Find("container")
                        .Find(item)
                        .Find("txtDescription")).GetComponent<Text>().color = Color.white * 1f;
                    continue;
                IL_086c:
                    if (this.PC().showPenis)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 1f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 1f;
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 0.5f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 0.5f;
                    }
                    continue;
                IL_06e2:
                    if (this.PC().showVagina)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 1f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 1f;
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 0.5f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 0.5f;
                    }
                    continue;
                IL_0548:
                    if (this.PC().showVagina || this.PC().showPenis)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 1f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 1f;
                    }
                    else
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtLabel")).GetComponent<Text>().color = Color.white * 0.5f;
                        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
                            .Find("container")
                            .Find(item)
                            .Find("txtDescription")).GetComponent<Text>().color = Color.white * 0.5f;
                    }
                }
            }
            if (this.mX < 0.5f)
            {
                float num3 = this.sexualCharacteristicScroll;
                Vector2 mouseScrollDelta = Input.mouseScrollDelta;
                this.sexualCharacteristicScroll = num3 - mouseScrollDelta.y * 70f;
                if (this.sexualCharacteristicScroll < 0f)
                {
                    this.sexualCharacteristicScroll = 0f;
                }
                if (this.sexualCharacteristicScroll > -350f + this.sexualCharacteristicSliderY * 40f)
                {
                    this.sexualCharacteristicScroll = -350f + this.sexualCharacteristicSliderY * 40f;
                }
                this.v3.x = 0f;
                this.v3.y = this.sexualCharacteristicScroll;
                this.v3.z = 0f;
                Transform transform = this.sexualCharacteristicsContainer;
                transform.localPosition += (this.v3 - this.sexualCharacteristicsContainer.localPosition) * Game.cap(Time.deltaTime * 15f, 0f, 1f);
            }
            this.sexualCharacteristicsPageWasOpen = true;
        }
        else
        {
            this.sexualCharacteristicsPageWasOpen = false;
        }
    }

    public void addSexualCharacteristicSlider(string name, float min, float max)
    {
        GameObject gameObject = UnityEngine.Object.Instantiate(this.sexualCharacteristicSliderTemplate);
        gameObject.name = name;
        ((UnityEngine.Component)gameObject.transform.Find("txtLabel")).GetComponent<Text>().text = Localization.getPhrase("sexualCharacteristic_" + name, string.Empty);
        ((UnityEngine.Component)gameObject.transform.Find("txtDescription")).GetComponent<Text>().text = Localization.getPhrase("sexualCharacteristicDescription_" + name, string.Empty);
        gameObject.transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("SexualCharacteristics").Find("Characteristics")
            .Find("container"));
        ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().minValue = min;
        ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>().maxValue = max;
        this.v3 = Vector3.zero;
        this.v3.x = -240f;
        this.v3.z = 0f;
        this.v3.y = 155f - 40f * this.sexualCharacteristicSliderY;
        gameObject.transform.localPosition = this.v3;
        gameObject.transform.localScale = Vector3.one;
        this.sexualCharacteristicSliderY += 1f;
        this.sexualCharacteristicSliders.Add(name, ((UnityEngine.Component)gameObject.transform.Find("Slider")).GetComponent<UnityEngine.UI.Slider>());
    }

    public void selectDecal(int d)
    {
        if (this.curDecalDisplayed != d)
        {
            if (File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty + this.decalList[d] + ".png"))
            {
                byte[] data = File.ReadAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty + this.decalList[d] + ".png");
                Texture2D texture2D = new Texture2D(256, 256);
                texture2D.LoadImage(data);
                TextureScale.Bilinear(texture2D, 256, 256);
                texture2D.wrapMode = TextureWrapMode.Clamp;
                this.decalBrush.GetComponent<Renderer>().material.mainTexture = texture2D;
                Color[] pixels = texture2D.GetPixels();
                for (int i = 0; i < pixels.Length; i++)
                {
                    pixels[i].r = 1f - pixels[i].a;
                    pixels[i].g = 1f - pixels[i].a;
                    pixels[i].b = 1f - pixels[i].a;
                }
                Texture2D texture2D2 = new Texture2D(256, 256, TextureFormat.ARGB32, false);
                texture2D2.SetPixels(pixels);
                texture2D2.Apply();
                texture2D2.wrapMode = TextureWrapMode.Clamp;
                ((UnityEngine.Component)this.decalBrush.transform.Find("proj")).GetComponent<Projector>().material.SetTexture("_ShadowTex", texture2D2);
            }
            if (File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty + this.decalList[d] + "_FX.png"))
            {
                byte[] data2 = File.ReadAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty + this.decalList[d] + "_FX.png");
                this.decalFXtex = new Texture2D(256, 256);
                this.decalFXtex.LoadImage(data2);
                TextureScale.Bilinear(this.decalFXtex, 256, 256);
                this.decalFXtex.wrapMode = TextureWrapMode.Clamp;
            }
            else
            {
                this.decalFXtex = null;
            }
        }
        this.selectedDecal = d;
        for (int j = 0; j < this.decalOptionButtons.Count; j++)
        {
            int num = this.curDecalPage * this.decalsPerPage + j;
            this.decalOptionButtons[j].transform.Find("selectionBorder").gameObject.SetActive(num == this.selectedDecal);
        }
    }

    public void decalButtonOver(GameObject button)
    {
        button.transform.parent.parent.Find("hoverBorder").gameObject.SetActive(true);
        UISFX.playHover();
    }

    public void decalButtonOut(GameObject button)
    {
        button.transform.parent.parent.Find("hoverBorder").gameObject.SetActive(false);
    }

    public void decalClick(GameObject button)
    {
        int num = this.decalsPerPage * this.curDecalPage;
        Vector3 localPosition = button.transform.Find("ID").localPosition;
        int d = num + Mathf.RoundToInt(localPosition.x);
        this.selectDecal(d);
    }

    public void decalPageLeft()
    {
        if (this.curDecalPage > 0)
        {
            this.setDecalPage(this.curDecalPage - 1);
        }
    }

    public void decalPageRight()
    {
        int num = Mathf.CeilToInt((float)this.decalList.Count / (float)this.decalsPerPage);
        if (this.curDecalPage < num - 1)
        {
            this.setDecalPage(this.curDecalPage + 1);
        }
    }

    public void setDecalPage(int p)
    {
        int num = Mathf.CeilToInt((float)this.decalList.Count / (float)this.decalsPerPage);
        if (this.curDecalPage != p)
        {
            this.curDecalPage = p;
            for (int i = 0; i < this.decalOptionButtons.Count; i++)
            {
                int num2 = this.curDecalPage * this.decalsPerPage + i;
                if (num2 < this.decalList.Count)
                {
                    this.decalOptionButtons[i].transform.Find("bg").Find("decalImage").gameObject.SetActive(true);
                    byte[] data = File.ReadAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty + this.decalList[num2] + ".png");
                    Texture2D texture2D = new Texture2D(128, 128);
                    texture2D.LoadImage(data);
                    TextureScale.Bilinear(texture2D, 128, 128);
                    texture2D.Apply();
                    ((UnityEngine.Component)this.decalOptionButtons[i].transform.Find("bg").Find("decalImage")).GetComponent<RawImage>().texture = texture2D;
                }
                else
                {
                    this.decalOptionButtons[i].transform.Find("bg").Find("decalImage").gameObject.SetActive(false);
                }
                this.decalOptionButtons[i].transform.Find("hoverBorder").gameObject.SetActive(false);
                this.decalOptionButtons[i].transform.Find("selectionBorder").gameObject.SetActive(false);
            }
        }
        ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("DecalPainter").Find("pageMenu")
            .Find("txtHeader")).GetComponent<Text>().text = Localization.getPhrase("PAGE", string.Empty) + " " + (this.curDecalPage + 1) + "/" + num;
    }

    public void processDecalPainting()
    {
        this.decalsPerPage = 24;
        if ((UnityEngine.Object)this.decalBrush == (UnityEngine.Object)null)
        {
            this.decalBrush = this.UI.transform.Find("CharacterCustomizationUI").Find("DecalPainter").Find("DecalBrush")
                .gameObject;
            this.decalBrush.transform.SetParent(this.World.transform);
            this.decalBrush.transform.localPosition = Vector3.zero;
            this.decalBrush.transform.localEulerAngles = Vector3.zero;
            this.decalBrush.transform.localScale = Vector3.one;
            this.decalOptionButtons.Add(this.UI.transform.Find("CharacterCustomizationUI").Find("DecalPainter").Find("DecalOption")
                .gameObject);
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 6; j++)
                {
                    if (j != 0 || i != 0)
                    {
                        this.decalOptionButtons.Add(UnityEngine.Object.Instantiate(this.decalOptionButtons[0]));
                        this.decalOptionButtons[this.decalOptionButtons.Count - 1].transform.SetParent(this.decalOptionButtons[0].transform.parent);
                        this.decalOptionButtons[this.decalOptionButtons.Count - 1].transform.localScale = Vector3.one;
                        this.decalOptionButtons[this.decalOptionButtons.Count - 1].transform.localRotation = Quaternion.identity;
                        this.v3 = Vector3.zero;
                        this.v3.x = (float)(this.decalOptionButtons.Count - 1);
                        this.decalOptionButtons[this.decalOptionButtons.Count - 1].transform.Find("bg").Find("decalImage").Find("ID")
                            .localPosition = this.v3;
                        this.v3 = this.decalOptionButtons[0].transform.localPosition;
                        this.v3.x += (float)(j * 65);
                        float num = 0f;
                        if (j % 2 == 1)
                        {
                            num = 38f;
                        }
                        this.v3.y -= (float)(i * 76) + num;
                        this.decalOptionButtons[this.decalOptionButtons.Count - 1].transform.localPosition = this.v3;
                    }
                }
            }
        }
        this.UI.transform.Find("CharacterCustomizationUI").Find("DecalControls").gameObject.SetActive(this.customizeCharacterPage == 51);
        if (this.customizeCharacterPage == 51)
        {
            if (!this.decalMenuWasOpen)
            {
                new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
                string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "decals" + Game.PathDirectorySeparatorChar + string.Empty, "*.png");
                this.decalList = new List<string>();
                for (int k = 0; k < files.Length; k++)
                {
                    string text = files[k].Split(Game.PathDirectorySeparatorChar)[files[k].Split(Game.PathDirectorySeparatorChar).Length - 1].Split('.')[0];
                    if (text.IndexOf("_FX") == -1)
                    {
                        this.decalList.Add(text);
                    }
                }
                this.selectDecal(0);
                this.setDecalPage(0);
            }
            this.decalPPMrebuildDelay -= Time.deltaTime;
            if (this.decalPPMrebuildDelay <= 0f)
            {
                for (int l = 0; l < this.PC().preciseMousePickingCollider.Count; l++)
                {
                    ((UnityEngine.Component)this.PC().preciseMousePickingCollider[l].transform.parent).GetComponent<SkinnedMeshRenderer>().BakeMesh(this.PC().preciseMousePickingCollider[l].GetComponent<MeshCollider>().sharedMesh);
                    this.PC().preciseMousePickingCollider[l].GetComponent<MeshCollider>().enabled = true;
                    this.PC().preciseMousePickingCollider[l].GetComponent<MeshCollider>().enabled = false;
                }
                this.decalPPMrebuildDelay = 0.5f;
            }
            if (this.mX > 0.5f)
            {
                this.PC().pauseAnimation();
                this.decalPickDelay -= Time.deltaTime;
                ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = true;
                if (this.decalPickDelay <= 0f)
                {
                    this.decalHitPoint = Vector3.zero;
                    for (int m = 0; m < this.PC().preciseMousePickingCollider.Count; m++)
                    {
                        this.PC().preciseMousePickingCollider[m].GetComponent<MeshCollider>().enabled = true;
                    }
                    if (Physics.Raycast(this.mainCam.GetComponent<Camera>().ScreenPointToRay(Input.mousePosition), out this.precisePickHitInfo, float.PositiveInfinity, LayerMask.GetMask("PreciseRaycasting")))
                    {
                        this.decalHitPoint = this.precisePickHitInfo.point + this.precisePickHitInfo.normal * 0.2f;
                        this.decalHitNormal = this.precisePickHitInfo.normal;
                    }
                    for (int n = 0; n < this.PC().preciseMousePickingCollider.Count; n++)
                    {
                        this.PC().preciseMousePickingCollider[n].GetComponent<MeshCollider>().enabled = false;
                    }
                    this.decalPickDelay = 0.1f;
                }
            }
            else
            {
                this.decalHitPoint = Vector3.zero;
                ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = false;
            }
            if (this.decalHitPoint == Vector3.zero)
            {
                this.decalBrush.SetActive(false);
            }
            else
            {
                this.decalBrush.SetActive(true);
                if ((this.decalHitPoint - this.decalBrush.transform.position).magnitude > 1f)
                {
                    this.decalBrush.transform.position = this.decalHitPoint;
                }
                else
                {
                    Transform transform = this.decalBrush.transform;
                    transform.position += (this.decalHitPoint - this.decalBrush.transform.position) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
                }
                this.decalHitNormal_act += (this.decalHitNormal - this.decalHitNormal_act) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
                this.decalBrush.transform.rotation = Quaternion.FromToRotation(Vector3.forward, this.decalHitNormal_act);
                if (Input.GetKey(KeyCode.Alpha1) || Input.GetKey(KeyCode.Keypad1))
                {
                    this.dbrVel += Time.deltaTime * 3f;
                    if (this.dbrVel > 90f)
                    {
                        this.dbrVel = 90f;
                    }
                    this.decalBrushRotation -= Time.deltaTime * this.dbrVel * 40f;
                }
                else if (Input.GetKey(KeyCode.Alpha2) || Input.GetKey(KeyCode.Keypad2))
                {
                    this.dbrVel += Time.deltaTime * 3f;
                    if (this.dbrVel > 90f)
                    {
                        this.dbrVel = 90f;
                    }
                    this.decalBrushRotation += Time.deltaTime * this.dbrVel * 40f;
                }
                else
                {
                    this.dbrVel = 0f;
                }
                if (Input.GetKey(KeyCode.Alpha3) || Input.GetKey(KeyCode.Keypad3))
                {
                    this.dbsVel += Time.deltaTime * 3f;
                    if (this.dbsVel > 90f)
                    {
                        this.dbrVel = 90f;
                    }
                    this.decalBrushScale -= Game.cap(this.decalBrushScale * Time.deltaTime * this.dbsVel, 0f, 1f);
                }
                else if (Input.GetKey(KeyCode.Alpha4) || Input.GetKey(KeyCode.Keypad4))
                {
                    this.dbsVel += Time.deltaTime * 3f;
                    if (this.dbsVel > 90f)
                    {
                        this.dbsVel = 90f;
                    }
                    this.decalBrushScale += Game.cap(this.decalBrushScale * Time.deltaTime * this.dbsVel, 0f, 1f);
                }
                else
                {
                    this.dbsVel = 0f;
                }
                if (Input.GetKeyUp(KeyCode.Alpha5) || Input.GetKeyUp(KeyCode.Keypad5))
                {
                    Texture2D texture2D = new Texture2D(this.decalBrush.GetComponent<Renderer>().material.mainTexture.width, this.decalBrush.GetComponent<Renderer>().material.mainTexture.height);
                    this.decalFXtex = new Texture2D(this.decalBrush.GetComponent<Renderer>().material.mainTexture.width, this.decalBrush.GetComponent<Renderer>().material.mainTexture.height);
                    Texture2D texture2D2 = this.decalBrush.GetComponent<Renderer>().material.mainTexture as Texture2D;
                    for (int num2 = 0; num2 < texture2D.width; num2++)
                    {
                        for (int num3 = 0; num3 < texture2D.height; num3++)
                        {
                            texture2D.SetPixel(texture2D.width - 1 - num2, num3, texture2D2.GetPixel(num2, num3));
                        }
                    }
                    texture2D.Apply();
                    texture2D.wrapMode = TextureWrapMode.Clamp;
                    this.decalBrush.GetComponent<Renderer>().material.mainTexture = texture2D;
                    Color[] pixels = texture2D.GetPixels();
                    for (int num4 = 0; num4 < pixels.Length; num4++)
                    {
                        pixels[num4].r = 1f - pixels[num4].a;
                        pixels[num4].g = 1f - pixels[num4].a;
                        pixels[num4].b = 1f - pixels[num4].a;
                    }
                    Texture2D texture2D3 = new Texture2D(256, 256, TextureFormat.ARGB32, false);
                    texture2D3.SetPixels(pixels);
                    texture2D3.Apply();
                    texture2D3.wrapMode = TextureWrapMode.Clamp;
                    ((UnityEngine.Component)this.decalBrush.transform.Find("proj")).GetComponent<Projector>().material.SetTexture("_ShadowTex", texture2D3);
                    Texture2D texture2D4 = new Texture2D(this.decalBrush.GetComponent<Renderer>().material.mainTexture.width, this.decalBrush.GetComponent<Renderer>().material.mainTexture.height);
                    for (int num5 = 0; num5 < texture2D4.width; num5++)
                    {
                        for (int num6 = 0; num6 < texture2D4.height; num6++)
                        {
                            texture2D4.SetPixel(texture2D.width - 1 - num5, num6, this.decalFXtex.GetPixel(num5, num6));
                        }
                    }
                    texture2D4.Apply();
                    this.decalFXtex = texture2D4;
                }
                this.decalBrushRotation %= 360f;
                this.decalBrushScale = Game.cap(this.decalBrushScale, 0.5f, 4f);
                this.decalBrush.transform.Rotate(0f, 0f, this.decalBrushRotation);
                this.v3 = Vector3.one * this.decalBrushScale * 10f;
                this.decalBrush.transform.localScale = this.v3;
                ((UnityEngine.Component)this.decalBrush.transform.Find("proj")).GetComponent<Projector>().orthographicSize = 0.1f * this.decalBrushScale;
                if (Input.GetMouseButtonUp(0))
                {
                    this.drawDecal(this.PC(), this.decalBrush, null, this.decalFXtex);
                    this.stillSafeToUseDecalRaytracingData = true;
                }
            }
        }
        else
        {
            this.decalBrush.SetActive(false);
            this.curDecalDisplayed = -1;
            this.curDecalPage = -1;
            this.decalPPMrebuildDelay = 0.25f;
            this.stillSafeToUseDecalRaytracingData = false;
        }
        this.decalMenuWasOpen = (this.customizeCharacterPage == 51);
    }

    public void drawDecal(RackCharacter character, GameObject decalBrush, Texture2D decalTex = null, Texture2D fxTex = null)
    {
        bool activeSelf = decalBrush.activeSelf;
        decalBrush.SetActive(true);
        UnityEngine.Debug.DrawLine(decalBrush.transform.position, decalBrush.transform.forward * 0.1f, Color.green, 999f);
        bool flag = false;
        bool flag2 = false;
        bool flag3 = false;
        Texture2D texture2D = new Texture2D(1024, 1024, TextureFormat.RGBA32, false);
        Texture2D texture2D2 = new Texture2D(2048, 2048, TextureFormat.RGBA32, false);
        Texture2D texture2D3 = new Texture2D(1024, 1024, TextureFormat.RGBA32, false);
        Texture2D texture2D4 = new Texture2D(1024, 1024, TextureFormat.RGBA32, false);
        Texture2D texture2D5 = new Texture2D(2048, 2048, TextureFormat.RGBA32, false);
        Texture2D texture2D6 = new Texture2D(1024, 1024, TextureFormat.RGBA32, false);
        Color white = Color.white;
        white.a = 0f;
        Color[] pixels = texture2D.GetPixels();
        for (int i = 0; i < pixels.Length; i++)
        {
            pixels[i] = white;
        }
        texture2D.SetPixels(pixels);
        texture2D3.SetPixels(pixels);
        texture2D4.SetPixels(pixels);
        texture2D6.SetPixels(pixels);
        pixels = texture2D2.GetPixels();
        for (int j = 0; j < pixels.Length; j++)
        {
            pixels[j] = white;
        }
        texture2D2.SetPixels(pixels);
        texture2D5.SetPixels(pixels);
        if ((UnityEngine.Object)decalTex == (UnityEngine.Object)null)
        {
            decalTex = (decalBrush.GetComponent<Renderer>().material.mainTexture as Texture2D);
        }
        float num = (float)decalTex.width;
        float num2 = (float)decalTex.height;
        int num3 = 0;
        int num4 = 0;
        int num5 = 0;
        int num6 = 0;
        int num7 = 0;
        int num8 = 0;
        int num9 = 0;
        for (int k = 0; k < character.parts.Count; k++)
        {
            this.decalDrawingBakedMesh[k] = new Mesh();
            character.parts[k].GetComponent<SkinnedMeshRenderer>().BakeMesh(this.decalDrawingBakedMesh[k]);
            Texture2D texture2D7 = texture2D2;
            if (k == character.headPieceIndex)
            {
                texture2D7 = texture2D;
            }
            if (k == character.wingPieceIndex)
            {
                texture2D7 = texture2D3;
            }
            Texture2D texture2D8 = texture2D5;
            if (k == character.headPieceIndex)
            {
                texture2D8 = texture2D4;
            }
            if (k == character.wingPieceIndex)
            {
                texture2D8 = texture2D6;
            }
            this.decalDrawingTris[k] = this.decalDrawingBakedMesh[k].triangles;
            this.decalDrawingUVs[k] = this.decalDrawingBakedMesh[k].uv;
            this.decalDrawingVerts[k] = this.decalDrawingBakedMesh[k].vertices;
            this.decalDrawingPixelsInTriangle[k] = new Vector2[this.decalDrawingTris[k].Length][];
            this.decalDrawingP3DInvalid[k] = new bool[this.decalDrawingTris[k].Length][];
            this.decalDrawingP3D[k] = new Vector3[this.decalDrawingTris[k].Length][];
            for (int l = 0; l < this.decalDrawingTris[k].Length; l += 3)
            {
                Vector2 vector = this.decalDrawingUVs[k][this.decalDrawingTris[k][l]];
                Vector2 b = this.decalDrawingUVs[k][this.decalDrawingTris[k][l + 1]];
                Vector2 b2 = this.decalDrawingUVs[k][this.decalDrawingTris[k][l + 2]];
                Vector2 b3 = (vector + b + b2) / 3f;
                vector = b3 + (vector - b3).normalized * (0.0045f + (vector - b3).magnitude);
                float d = (0.005f + (vector - b3).magnitude) / (vector - b3).magnitude;
                b = b3 + (b - b3).normalized * (0.0045f + (b - b3).magnitude);
                float d2 = (0.005f + (b - b3).magnitude) / (b - b3).magnitude;
                b2 = b3 + (b2 - b3).normalized * (0.0045f + (b2 - b3).magnitude);
                float d3 = (0.005f + (b2 - b3).magnitude) / (b2 - b3).magnitude;
                int num10 = texture2D7.width - 1;
                int num11 = texture2D7.height - 1;
                int num12 = 0;
                int num13 = 0;
                bool flag4 = true;
                Vector3 point = this.decalDrawingBakedMesh[k].vertices[this.decalDrawingTris[k][l]];
                point = Quaternion.Euler(-90f, 0f, 0f) * point;
                Vector3 point2 = this.decalDrawingBakedMesh[k].normals[this.decalDrawingTris[k][l]];
                point2 = Quaternion.Euler(-90f, 0f, 0f) * point2;
                if ((point - decalBrush.transform.position).magnitude < 0.75f && Vector3.Angle(point2, decalBrush.transform.forward) < 90f)
                {
                    for (int m = 0; m < 3; m++)
                    {
                        if (Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].x * (float)texture2D7.width) > num12)
                        {
                            num12 = Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].x * (float)texture2D7.width);
                        }
                        if (Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].x * (float)texture2D7.width) < num10)
                        {
                            num10 = Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].x * (float)texture2D7.width);
                        }
                        if (Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].y * (float)texture2D7.height) > num13)
                        {
                            num13 = Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].y * (float)texture2D7.height);
                        }
                        if (Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].y * (float)texture2D7.height) < num11)
                        {
                            num11 = Mathf.RoundToInt(this.decalDrawingUVs[k][this.decalDrawingTris[k][l + m]].y * (float)texture2D7.height);
                        }
                    }
                    this.decalDrawingPixelsInTriangle[k][l] = new Vector2[(num12 + 1 - num10) * (num13 + 1 - num11)];
                    int num14 = 0;
                    for (int n = num10; n <= num12; n++)
                    {
                        for (int num15 = num11; num15 <= num13; num15++)
                        {
                            this.decalDrawingPixelsInTriangle[k][l][num14].x = (float)n;
                            this.decalDrawingPixelsInTriangle[k][l][num14].y = (float)num15;
                            num14++;
                        }
                    }
                    Vector2 vector2 = default(Vector2);
                    Vector3 vector3 = this.decalDrawingVerts[k][this.decalDrawingTris[k][l]];
                    Vector3 b4 = this.decalDrawingVerts[k][this.decalDrawingTris[k][l + 1]];
                    Vector3 b5 = this.decalDrawingVerts[k][this.decalDrawingTris[k][l + 2]];
                    Vector3 b6 = (vector3 + b4 + b5) / 3f;
                    vector3 = b6 + (vector3 - b6) * d;
                    b4 = b6 + (b4 - b6) * d2;
                    b5 = b6 + (b5 - b6) * d3;
                    this.decalDrawingP3DInvalid[k][l] = new bool[this.decalDrawingPixelsInTriangle[k][l].Length];
                    this.decalDrawingP3D[k][l] = new Vector3[this.decalDrawingPixelsInTriangle[k][l].Length];
                    num5++;
                    for (int num16 = 0; num16 < this.decalDrawingPixelsInTriangle[k][l].Length; num16++)
                    {
                        this.decalDrawingP3D[k][l][num16] = Vector3.zero;
                        vector2 = this.decalDrawingPixelsInTriangle[k][l][num16] / (float)texture2D7.width;
                        this.decalDrawingP3DInvalid[k][l][num16] = false;
                        float num17 = Game.Area(vector, b, b2);
                        if (num17 == 0f)
                        {
                            this.decalDrawingP3DInvalid[k][l][num16] = true;
                            num6++;
                        }
                        float num18 = Game.Area(b, b2, vector2) / num17;
                        if (num18 < 0f)
                        {
                            this.decalDrawingP3DInvalid[k][l][num16] = true;
                            num7++;
                        }
                        float num19 = Game.Area(b2, vector, vector2) / num17;
                        if (num19 < 0f)
                        {
                            this.decalDrawingP3DInvalid[k][l][num16] = true;
                            num8++;
                        }
                        float num20 = Game.Area(vector, b, vector2) / num17;
                        if (num20 < 0f)
                        {
                            this.decalDrawingP3DInvalid[k][l][num16] = true;
                            num9++;
                        }
                        num4++;
                        if (!this.decalDrawingP3DInvalid[k][l][num16])
                        {
                            this.decalDrawingP3D[k][l][num16] = num18 * vector3 + num19 * b4 + num20 * b5;
                            this.decalDrawingP3D[k][l][num16] = Quaternion.Euler(-90f, 0f, 0f) * this.decalDrawingP3D[k][l][num16];
                            num3++;
                            if (Physics.Raycast(this.decalDrawingP3D[k][l][num16] + decalBrush.transform.forward * 10f, -decalBrush.transform.forward, out this.precisePickHitInfo, 11f, LayerMask.GetMask("DecalBrush")) && (this.decalDrawingP3D[k][l][num16] - this.precisePickHitInfo.point).magnitude < 0.45f)
                            {
                                Texture2D texture2D9 = decalTex;
                                Vector2 textureCoord = this.precisePickHitInfo.textureCoord;
                                int x = Mathf.RoundToInt(textureCoord.x * num);
                                Vector2 textureCoord2 = this.precisePickHitInfo.textureCoord;
                                Color color = texture2D9.GetPixel(x, Mathf.RoundToInt(textureCoord2.y * num2));
                                if (color.a > 0f)
                                {
                                    Color pixel = texture2D7.GetPixel((int)this.decalDrawingPixelsInTriangle[k][l][num16].x, (int)this.decalDrawingPixelsInTriangle[k][l][num16].y);
                                    if (pixel.a > 0f)
                                    {
                                        float num21 = color.a;
                                        color = (color + pixel) / 2f;
                                        color.a = num21 + pixel.a;
                                        texture2D7.SetPixel((int)this.decalDrawingPixelsInTriangle[k][l][num16].x, (int)this.decalDrawingPixelsInTriangle[k][l][num16].y, color);
                                    }
                                    else
                                    {
                                        texture2D7.SetPixel((int)this.decalDrawingPixelsInTriangle[k][l][num16].x, (int)this.decalDrawingPixelsInTriangle[k][l][num16].y, color);
                                    }
                                    if (k == character.headPieceIndex)
                                    {
                                        flag = true;
                                    }
                                    else if (k == character.wingPieceIndex)
                                    {
                                        flag3 = true;
                                    }
                                    else
                                    {
                                        flag2 = true;
                                    }
                                }
                                if ((UnityEngine.Object)fxTex != (UnityEngine.Object)null)
                                {
                                    Vector2 textureCoord3 = this.precisePickHitInfo.textureCoord;
                                    int x2 = Mathf.RoundToInt(textureCoord3.x * num);
                                    Vector2 textureCoord4 = this.precisePickHitInfo.textureCoord;
                                    color = fxTex.GetPixel(x2, Mathf.RoundToInt(textureCoord4.y * num2));
                                    if (color.a > 0f)
                                    {
                                        Color pixel2 = texture2D8.GetPixel((int)this.decalDrawingPixelsInTriangle[k][l][num16].x, (int)this.decalDrawingPixelsInTriangle[k][l][num16].y);
                                        if (pixel2.a > 0f)
                                        {
                                            float num22 = color.a;
                                            color = (color + pixel2) / 2f;
                                            color.a = num22 + pixel2.a;
                                            texture2D8.SetPixel((int)this.decalDrawingPixelsInTriangle[k][l][num16].x, (int)this.decalDrawingPixelsInTriangle[k][l][num16].y, color);
                                        }
                                        else
                                        {
                                            texture2D8.SetPixel((int)this.decalDrawingPixelsInTriangle[k][l][num16].x, (int)this.decalDrawingPixelsInTriangle[k][l][num16].y, color);
                                        }
                                        if (k == character.headPieceIndex)
                                        {
                                            flag = true;
                                        }
                                        else if (k == character.wingPieceIndex)
                                        {
                                            flag3 = true;
                                        }
                                        else
                                        {
                                            flag2 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        texture2D.Apply();
        texture2D2.Apply();
        texture2D3.Apply();
        texture2D4.Apply();
        texture2D5.Apply();
        texture2D6.Apply();
        string text = "decal-" + Guid.NewGuid();
        new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
        new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "racknet_cache" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
        if (flag)
        {
            Game.saveTexToFile(texture2D, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_head.png");
            TextureScale.Bilinear(texture2D, Mathf.RoundToInt((float)texture2D.width * UserSettings.data.characterTextureQuality), Mathf.RoundToInt((float)texture2D.height * UserSettings.data.characterTextureQuality));
            Game.saveTexToFile(texture2D, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(UserSettings.data.characterTextureQuality * 100f) + string.Empty + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_head.png");
            if ((UnityEngine.Object)fxTex != (UnityEngine.Object)null)
            {
                Game.saveTexToFile(texture2D4, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_headfx.png");
                TextureScale.Bilinear(texture2D4, Mathf.RoundToInt((float)texture2D4.width * UserSettings.data.characterTextureQuality), Mathf.RoundToInt((float)texture2D4.height * UserSettings.data.characterTextureQuality));
                Game.saveTexToFile(texture2D4, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(UserSettings.data.characterTextureQuality * 100f) + string.Empty + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_headfx.png");
            }
        }
        if (flag2)
        {
            Game.saveTexToFile(texture2D2, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_body.png");
            TextureScale.Bilinear(texture2D2, Mathf.RoundToInt((float)texture2D2.width * UserSettings.data.characterTextureQuality), Mathf.RoundToInt((float)texture2D2.height * UserSettings.data.characterTextureQuality));
            Game.saveTexToFile(texture2D2, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(UserSettings.data.characterTextureQuality * 100f) + string.Empty + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_body.png");
            if ((UnityEngine.Object)fxTex != (UnityEngine.Object)null)
            {
                Game.saveTexToFile(texture2D5, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_bodyfx.png");
                TextureScale.Bilinear(texture2D5, Mathf.RoundToInt((float)texture2D5.width * UserSettings.data.characterTextureQuality), Mathf.RoundToInt((float)texture2D5.height * UserSettings.data.characterTextureQuality));
                Game.saveTexToFile(texture2D5, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(UserSettings.data.characterTextureQuality * 100f) + string.Empty + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_bodyfx.png");
            }
        }
        if (flag3)
        {
            Game.saveTexToFile(texture2D3, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_wings.png");
            TextureScale.Bilinear(texture2D3, Mathf.RoundToInt((float)texture2D3.width * UserSettings.data.characterTextureQuality), Mathf.RoundToInt((float)texture2D3.height * UserSettings.data.characterTextureQuality));
            Game.saveTexToFile(texture2D3, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(UserSettings.data.characterTextureQuality * 100f) + string.Empty + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_wings.png");
            if ((UnityEngine.Object)fxTex != (UnityEngine.Object)null)
            {
                Game.saveTexToFile(texture2D6, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_wingsfx.png");
                TextureScale.Bilinear(texture2D6, Mathf.RoundToInt((float)texture2D6.width * UserSettings.data.characterTextureQuality), Mathf.RoundToInt((float)texture2D6.height * UserSettings.data.characterTextureQuality));
                Game.saveTexToFile(texture2D6, Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty + Mathf.RoundToInt(UserSettings.data.characterTextureQuality * 100f) + string.Empty + Game.PathDirectorySeparatorChar + "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text + "_wingsfx.png");
            }
        }
        if (flag || flag2 || flag3)
        {
            character.data.textureLayers.Add(new TextureLayer());
            character.data.textureLayers[character.data.textureLayers.Count - 1].texture = "decal_cache" + Game.PathDirectorySeparatorChar + string.Empty + text;
            character.data.textureLayers[character.data.textureLayers.Count - 1].color = Color.white;
            character.data.textureLayers[character.data.textureLayers.Count - 1].color.r = 0.992156863f;
            character.data.textureLayers[character.data.textureLayers.Count - 1].color.g = 0.992156863f;
            character.data.textureLayers[character.data.textureLayers.Count - 1].color.b = 0.992156863f;
            character.data.textureLayers[character.data.textureLayers.Count - 1].isDecal = true;
            this.characterRedrawDelay = 1;
        }
        decalBrush.SetActive(activeSelf);
    }

    public static void saveTexToFile(Texture2D tex, string filename)
    {
        File.WriteAllBytes(filename, tex.EncodeToPNG());
        FileInfo fileInfo = new FileInfo(filename);
        float num = 0f;
        while (!fileInfo.Exists && num < 10f)
        {
            Thread.Sleep(25);
            num += 0.025f;
            fileInfo.Refresh();
        }
    }

    public static float Area(Vector2 p1, Vector2 p2, Vector2 p3)
    {
        Vector2 vector = p1 - p3;
        Vector2 vector2 = p2 - p3;
        return (vector.x * vector2.y - vector.y * vector2.x) / 2f;
    }

    public static float sign(Vector2 p1, Vector2 p2, Vector2 p3)
    {
        return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
    }

    public bool PointInTriangle(Vector2 pt, Vector2 v1, Vector2 v2, Vector2 v3)
    {
        bool flag = Game.sign(pt, v1, v2) < 0f;
        bool flag2 = Game.sign(pt, v2, v3) < 0f;
        bool flag3 = Game.sign(pt, v3, v1) < 0f;
        return flag == flag2 && flag2 == flag3;
    }

    public void quickStartBodyTypeSelected(Toggle toggle)
    {
        if (!this.justToggledQSBT)
        {
            this.justToggledQSBT = true;
            for (int i = 0; i < ((UnityEngine.Component)this.quickStartClipboard.transform.Find("BodyTypes")).GetComponentsInChildren<Toggle>().Length; i++)
            {
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("BodyTypes")).GetComponentsInChildren<Toggle>()[i].isOn = false;
            }
            toggle.isOn = true;
            this.justToggledQSBT = false;
        }
    }

    public static bool basicallyTheSameColor(Color col1, Color col2)
    {
        if (Mathf.Abs(col1.r - col2.r) < 0.001f && Mathf.Abs(col1.g - col2.g) < 0.001f && Mathf.Abs(col1.b - col2.b) < 0.001f)
        {
            return true;
        }
        return false;
    }

    public static string randPick(string[] options)
    {
        int num = Mathf.FloorToInt(UnityEngine.Random.value * (float)options.Length);
        return options[num];
    }

    public static void characterDataFromParameters(CharacterData cData, string species, bool hasBoobs, int genitalType, string bodyType)
    {
        cData.genitalType = genitalType;
        if (!hasBoobs)
        {
            cData.breastSize = 0f;
        }
        if (!hasBoobs)
        {
            for (int i = 0; i < cData.textureLayers.Count; i++)
            {
                if (cData.textureLayers[i].texture.IndexOf("nipple") != -1)
                {
                    cData.textureLayers[i].opacity = 0.1f;
                }
            }
        }
        string text = bodyType.ToUpper();
        if (text != null)
        {
            Dictionary<string, int> dictionary = new Dictionary<string, int>(12);
            dictionary.Add("AVERAGE", 0);
            dictionary.Add("ATHLETE", 1);
            dictionary.Add("BODYBUILDER", 2);
            dictionary.Add("SWIMMER", 3);
            dictionary.Add("STURDY", 4);
            dictionary.Add("BEAR", 5);
            dictionary.Add("OBESE", 6);
            dictionary.Add("CHUBBY", 7);
            dictionary.Add("SCRAWNY", 8);
            dictionary.Add("LANKY", 9);
            dictionary.Add("AMAZONIAN", 10);
            dictionary.Add("HOURGLASS", 11);
            int num = default(int);
            if (dictionary.TryGetValue(text, out num))
            {
                switch (num)
                {
                    case 0:
                        break;
                    case 1:
                        cData.muscle = Game.cap(cData.muscle + 0.2f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.1f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.1f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity - 0.1f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity - 0.1f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize + 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 0.9f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.1f, 0f, 1f);
                        break;
                    case 2:
                        cData.muscle = Game.cap(cData.muscle + 0.4f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.4f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.4f, 0f, 1f);
                        cData.height = Game.cap(cData.height + 0.2f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass + 0.4f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize - 0.2f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth - 0.1f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity - 0.3f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity - 0.3f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize + 0.3f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 0.7f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.2f, 0f, 1f);
                        break;
                    case 3:
                        cData.muscle = Game.cap(cData.muscle + 0.1f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.1f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.1f, 0f, 1f);
                        cData.height = Game.cap(cData.height - 0.05f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass - 0.2f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.1f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize - 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 0.8f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.1f, 0f, 1f);
                        break;
                    case 4:
                        cData.muscle = Game.cap(cData.muscle + 0.1f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity + 0.1f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly + 0.1f, 0f, 1f);
                        cData.height = Game.cap(cData.height - 0.05f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass + 0.1f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.1f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth + 0.1f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity - 0.2f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity - 0.2f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize + 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 1.1f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk - 0.1f, 0f, 1f);
                        break;
                    case 5:
                        cData.muscle = Game.cap(cData.muscle + 0.25f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity + 0.3f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly + 0.3f, 0f, 1f);
                        cData.height = Game.cap(cData.height + 0.15f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass + 0.25f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.3f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth + 0.1f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity - 0.3f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity - 0.3f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize + 0.2f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 1.3f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk - 0.1f, 0f, 1f);
                        break;
                    case 6:
                        cData.muscle = Game.cap(cData.muscle - 0.4f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity + 0.5f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly + 0.5f, 0f, 1f);
                        cData.height = Game.cap(cData.height + 0.1f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass + 0.4f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.4f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth + 0.3f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize - 0.2f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 1.4f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk - 0.2f, 0f, 1f);
                        break;
                    case 7:
                        cData.muscle = Game.cap(cData.muscle - 0.1f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity + 0.2f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly + 0.2f, 0f, 1f);
                        cData.height = Game.cap(cData.height, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.2f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth + 0.1f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity + 0.1f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity + 0.1f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize - 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 1.3f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk - 0.1f, 0f, 1f);
                        break;
                    case 8:
                        cData.muscle = Game.cap(cData.muscle - 0.2f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.2f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.2f, 0f, 1f);
                        cData.height = Game.cap(cData.height - 0.1f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass - 0.25f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth - 0.2f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize - 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 0.7f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.2f, 0f, 1f);
                        break;
                    case 9:
                        cData.muscle = Game.cap(cData.muscle - 0.3f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.3f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.3f, 0f, 1f);
                        cData.height = Game.cap(cData.height + 0.2f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass - 0.3f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth - 0.3f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize - 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 0.7f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.2f, 0f, 1f);
                        break;
                    case 10:
                        cData.muscle = Game.cap(cData.muscle + 0.2f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.2f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.2f, 0f, 1f);
                        cData.height = Game.cap(cData.height + 0.2f, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass - 0.1f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth - 0.1f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.1f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity - 0.1f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity - 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 1.15f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.1f, 0f, 1f);
                        break;
                    case 11:
                        cData.muscle = Game.cap(cData.muscle - 0.05f, 0f, 1f);
                        cData.adiposity = Game.cap(cData.adiposity - 0.05f, 0f, 1f);
                        cData.belly = Game.cap(cData.belly - 0.05f, 0f, 1f);
                        cData.height = Game.cap(cData.height, 0f, 1f);
                        cData.bodyMass = Game.cap(cData.bodyMass - 0.05f, 0f, 1f);
                        cData.hipWidth = Game.cap(cData.hipWidth + 0.3f, 0f, 1f);
                        cData.buttSize = Game.cap(cData.buttSize + 0.3f, 0f, 1f);
                        cData.bodyFemininity = Game.cap(cData.bodyFemininity + 0.2f, 0f, 1f);
                        cData.headFemininity = Game.cap(cData.headFemininity + 0.2f, 0f, 1f);
                        cData.penisSize = Game.cap(cData.penisSize - 0.1f, 0f, 1f);
                        cData.breastSize = Game.cap(cData.breastSize * 1.3f, 0f, Game.maxBreastSize);
                        cData.breastPerk = Game.cap(cData.breastPerk + 0.2f, 0f, 1f);
                        break;
                }
            }
        }
    }

    public static CharacterData buildCharacterDataFromParameters(string species, bool hasBoobs, int genitalType, string bodyType)
    {
        CharacterData characterData = CharacterManager.importCharacterData(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "speciesDefinitions" + Game.PathDirectorySeparatorChar + string.Empty + species + ".rack2species", true);
        Game.characterDataFromParameters(characterData, species, hasBoobs, genitalType, bodyType);
        characterData.uid = species + "." + Guid.NewGuid();
        return characterData;
    }

    public static void updateCharacterFromParameters(RackCharacter character, string species, bool hasBoobs, int genitalType, string bodyType)
    {
        character.data = Game.buildCharacterDataFromParameters(species, hasBoobs, genitalType, bodyType);
        character.rebuildCharacter();
    }

    public void copyColorAlts()
    {
        TextEditor textEditor = new TextEditor();
        string text = string.Empty;
        for (int i = 0; i < Game.speciesDefinitionColorNames.Count; i++)
        {
            if (Game.speciesDefinitionColorNames[i] != string.Empty && Game.speciesDefinitionColorReplacements[i] != Game.speciesDefinitionColors[i])
            {
                object[] obj = new object[10]
                {
text,
r\n\t<colorDefinitionAlt alt=\"AAAAAAAAAAAAAA\" oddity=\"OOOOOOOOOOOO\"><name>",
ame.speciesDefinitionColorNames[i],
name><autoBase></autoBase><r>",
null,
null,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    null,
null,
null,
null
                };
                Color color = Game.speciesDefinitionColorReplacements[i];
                obj[4] = color.r;
                obj[5] = "</r><g>";
                Color color2 = Game.speciesDefinitionColorReplacements[i];
                obj[6] = color2.g;
                obj[7] = "</g><b>";
                Color color3 = Game.speciesDefinitionColorReplacements[i];
                obj[8] = color3.b;
                obj[9] = "</b></colorDefinitionAlt>";
                text = string.Concat(obj);
            }
        }
        textEditor.text = text;
        textEditor.SelectAll();
        textEditor.Copy();
    }

    public void makeQuickStartCharacter()
    {
        this.UI.transform.Find("blacker").Find("txtQS").gameObject.SetActive(false);
        bool isOn = ((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkBreasts")).GetComponent<Toggle>().isOn;
        int genitalType = (!((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkPenis")).GetComponent<Toggle>().isOn || !((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkVagina")).GetComponent<Toggle>().isOn) ? ((!((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkPenis")).GetComponent<Toggle>().isOn) ? (((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkVagina")).GetComponent<Toggle>().isOn ? 1 : 2) : 0) : 3;
        string bodyType = string.Empty;
        for (int i = 0; i < this.quickstartBodyTypeTexts.Count; i++)
        {
            if (((UnityEngine.Component)this.quickstartBodyTypeTexts[i].transform.parent).GetComponent<Toggle>().isOn)
            {
                bodyType = this.quickstartBodyTypeNames[i];
            }
        }
        Game.updateCharacterFromParameters(this.PC(), this.speciesDefinitionPhrases[((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddSpecies")).GetComponent<Dropdown>().value], isOn, genitalType, bodyType);
        this.PC().data.created = true;
        this.PC().data.customized = true;
        this.PC().data.name = Inventory.data.characterName;
        this.PC().data.uid = this.PC().data.name + "." + Guid.NewGuid();
        this.PC().data.identifiesMale = (((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddIdentity")).GetComponent<Dropdown>().value == 0);
        for (int j = 0; j < Game.speciesDefinitionColors.Count; j++)
        {
            if (Game.basicallyTheSameColor(this.PC().data.baseColor, Game.speciesDefinitionColors[j]))
            {
                this.PC().data.baseColor = Game.speciesDefinitionColorReplacements[j];
            }
            for (int k = 0; k < this.PC().data.textureLayers.Count; k++)
            {
                if (Game.basicallyTheSameColor(this.PC().data.textureLayers[k].color, Game.speciesDefinitionColors[j]))
                {
                    this.PC().data.textureLayers[k].color = Game.speciesDefinitionColorReplacements[j];
                }
            }
            for (int l = 0; l < this.PC().data.embellishmentColors.Count; l++)
            {
                if (Game.basicallyTheSameColor(this.PC().data.embellishmentColors[l], Game.speciesDefinitionColors[j] * 255f))
                {
                    this.PC().data.embellishmentColors[l] = Game.speciesDefinitionColorReplacements[j] * 255f;
                }
            }
            for (int m = 0; m < this.PC().data.embellishmentColorGradientPoints.Count; m++)
            {
                if (Game.basicallyTheSameColor(this.PC().data.embellishmentColorGradientPoints[m].color, Game.speciesDefinitionColors[j] * 255f))
                {
                    this.PC().data.embellishmentColorGradientPoints[m].color = Game.speciesDefinitionColorReplacements[j] * 255f;
                }
            }
        }
        if (((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkRandomize")).GetComponent<Toggle>().isOn)
        {
            RandomCharacterGenerator.randomizeColors(this.PC(), (int)((UnityEngine.Component)this.quickStartClipboard.transform.Find("randomizeMenu").Find("sldStyles")).GetComponent<UnityEngine.UI.Slider>().value);
            this.lastQSSpeciesSelected = -1;
            this.PC().buildTexture();
        }
        else
        {
            this.PC().buildTexture();
        }
        this.needInitialValues = true;
        if (this.firstCustomizationSpeciesSelection)
        {
            this.stillThinkingAfterFirstSpeciesSelection = true;
        }
        this.firstCustomizationSpeciesSelection = false;
    }

    public void colorQSpicked(int ci)
    {
        if (ci < Game.speciesDefinitionColorReplacements.Count)
        {
            Vector3 localScale = this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + ci).localScale;
            if (!(localScale.x < 0.99f))
            {
                this.selectedQScolor = ci;
                this.colorPickerOpen = true;
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkRandomize")).GetComponent<Toggle>().isOn = false;
                List<Color> existingColors = new List<Color>();
                this.colorPicker.GetComponent<ColorPicker>().setExistingColors(existingColors);
                this.originalEditColor = Game.speciesDefinitionColorReplacements[this.selectedQScolor];
                ((UnityEngine.Component)this.devConsole.transform.Find("txtIn")).GetComponent<InputField>().text = "<colorDefinition><name></name><autoBase></autoBase><r>" + this.originalEditColor.r + "</r><g>" + this.originalEditColor.g + "</g><b>" + this.originalEditColor.b + "</b></colorDefinition>";
                this.colorPicker.GetComponent<ColorPicker>().color = Game.speciesDefinitionColorReplacements[this.selectedQScolor];
                this.colorPicker.GetComponent<ColorPicker>().updateHSV();
                this.colorPicker.GetComponent<ColorPicker>().render();
                Color color = Color.white;
                for (int i = 0; i < 30; i++)
                {
                    if (i >= Game.speciesDefinitionColors.Count)
                    {
                        color.a = 0f;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + i).Find("Image")).GetComponent<Image>().color = color;
                        color.r = 0.75f;
                        color.g = 0.75f;
                        color.b = 0.75f;
                        color.a = 1f;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + i)).GetComponent<Image>().color = color;
                    }
                    else
                    {
                        color = Game.speciesDefinitionColorReplacements[i];
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + i).Find("Image")).GetComponent<Image>().color = color;
                        color.r = 0f;
                        color.g = 0f;
                        color.b = 0f;
                        if (i == this.selectedQScolor)
                        {
                            color = Color.white;
                        }
                        color.a = 1f;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + i)).GetComponent<Image>().color = color;
                    }
                }
            }
        }
    }

    public void showGenderIdentityExplanation()
    {
        this.quickStartClipboard.transform.Find("idExplainBubble").gameObject.SetActive(true);
    }

    public void hideGenderIdentityExplanation()
    {
        this.quickStartClipboard.transform.Find("idExplainBubble").gameObject.SetActive(false);
    }

    public void processQuickStart()
    {
        CharacterData characterData = new CharacterData();
        RackCharacter.createDefaultEmbellishmentColors(characterData);
        if ((UnityEngine.Object)this.quickStartClipboard == (UnityEngine.Object)null)
        {
            this.quickStartClipboard = this.UI.transform.Find("CharacterCustomizationUI").Find("QuickStart").Find("clipboard")
                .gameObject;
            this.originalQSClipboardPosition = this.quickStartClipboard.transform.localPosition;
            this.originalQSClipboardRotation = this.quickStartClipboard.transform.localEulerAngles;
            this.v3 = this.originalQSClipboardPosition;
            this.v3.x -= 500f;
            this.quickStartClipboard.transform.localPosition = this.v3;
            this.v3 = this.originalQSClipboardRotation;
            this.v3.y -= 90f;
            this.quickStartClipboard.transform.localEulerAngles = this.v3;
            this.quickstartBodyTypeNames = new List<string>();
            this.quickstartBodyTypeTexts = new List<Text>();
            for (int i = 0; i < ((UnityEngine.Component)this.quickStartClipboard.transform.Find("BodyTypes")).GetComponentsInChildren<Text>().Length; i++)
            {
                this.quickstartBodyTypeNames.Add(((UnityEngine.Component)this.quickStartClipboard.transform.Find("BodyTypes")).GetComponentsInChildren<Text>()[i].text);
                this.quickstartBodyTypeTexts.Add(((UnityEngine.Component)this.quickStartClipboard.transform.Find("BodyTypes")).GetComponentsInChildren<Text>()[i]);
            }
            this.hideGenderIdentityExplanation();
        }
        if (this.customizeCharacterPage == 0)
        {
            this.quickStartClipboard.transform.Find("cmdAdvanced").gameObject.SetActive(this.blackAmount <= 0.3f);
            if (this.needQuickStartSpeciesRebuild)
            {
                new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "speciesDefinitions" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
                string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "speciesDefinitions" + Game.PathDirectorySeparatorChar + string.Empty, "*.rack2species");
                List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
                this.speciesDefinitionPhrases = new List<string>();
                int value = 0;
                for (int j = 0; j < files.Length; j++)
                {
                    list.Add(new Dropdown.OptionData());
                    string text = files[j].Split(Game.PathDirectorySeparatorChar)[files[j].Split(Game.PathDirectorySeparatorChar).Length - 1].Split('.')[0];
                    list[j].text = Localization.getPhrase("SPECIES_" + text.ToLower(), string.Empty);
                    this.speciesDefinitionPhrases.Add(text);
                    if (text == this.PC().data.species || (text == "mouse" && !this.PC().data.customized))
                    {
                        value = j;
                    }
                }
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddSpecies")).GetComponent<Dropdown>().options = list;
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddSpecies")).GetComponent<Dropdown>().value = value;
                this.needQuickStartSpeciesRebuild = false;
            }
            ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddIdentity")).GetComponent<Dropdown>().options[0].text = Localization.getPhrase("MALE", string.Empty);
            ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddIdentity")).GetComponent<Dropdown>().options[1].text = Localization.getPhrase("FEMALE", string.Empty);
            if (!this.startingGenderIdentityDDpicked)
            {
                this.startingGenderIdentityDDpicked = true;
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddIdentity")).GetComponent<Dropdown>().value = 1;
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddIdentity")).GetComponent<Dropdown>().value = 0;
            }
            if (this.QSClipboardTransition < 1f && !this.anythingLoading && this.recentThinking <= 0f)
            {
                this.QSClipboardTransition += (1f - this.QSClipboardTransition) * Time.deltaTime * 7.5f;
                if (this.QSClipboardTransition > 0.999f)
                {
                    this.QSClipboardTransition = 1f;
                    if (this.blackAmount > 0.9f)
                    {
                        ((UnityEngine.Component)this.UI.transform.Find("blacker").Find("txtQS")).GetComponent<ScienceTextAnimator>().setText(Localization.getPhrase("QUICKSTART_INSTRUCTIONS", string.Empty), 40f, 1f, false);
                    }
                }
            }
            this.v3 = this.originalQSClipboardPosition;
            this.v3.x -= 500f * (1f - this.QSClipboardTransition);
            this.v3.x += this.mX * 10f;
            this.quickStartClipboard.transform.localPosition = this.v3;
            this.v3 = this.originalQSClipboardRotation;
            this.v3.y -= 90f * (1f - this.QSClipboardTransition);
            this.v3.y += this.mX * 10f;
            this.v3.x += (this.mY - 0.5f) * 10f;
            this.quickStartClipboard.transform.localEulerAngles = this.v3;
            for (int k = 0; k < this.quickstartBodyTypeTexts.Count; k++)
            {
                this.quickstartBodyTypeTexts[k].text = Localization.getPhrase(this.quickstartBodyTypeNames[k], string.Empty);
            }
            if (((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddSpecies")).GetComponent<Dropdown>().value != this.lastQSSpeciesSelected)
            {
                this.selectedQScolor = -1;
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("txtColorSelected")).GetComponent<Text>().text = string.Empty;
                string text2 = Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "speciesDefinitions" + Game.PathDirectorySeparatorChar + string.Empty + this.speciesDefinitionPhrases[((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddSpecies")).GetComponent<Dropdown>().value] + ".rack2species";
                if (File.Exists(text2))
                {
                    XmlSerializer xmlSerializer = new XmlSerializer(typeof(CharacterData));
                    FileStream fileStream = new FileStream(text2, FileMode.Open);
                    try
                    {
                        this.speciesDefinitionData = (xmlSerializer.Deserialize(fileStream) as CharacterData);
                    }
                    catch
                    {
                        CharacterManager.corruptCharacterFiles.Add(text2);
                        this.speciesDefinitionData = new CharacterData();
                    }
                    fileStream.Close();
                }
                this.lastQSSpeciesSelected = ((UnityEngine.Component)this.quickStartClipboard.transform.Find("ddSpecies")).GetComponent<Dropdown>().value;
                Game.speciesDefinitionColors = new List<Color>();
                Game.speciesDefinitionColorNames = new List<string>();
                Game.speciesDefinitionColorReplacements = new List<Color>();
                Game.speciesDefinitionColorRefs = new List<int>();
                Game.speciesDefinitionColorRefOffsets_hue = new List<float>();
                Game.speciesDefinitionColorRefOffsets_sat = new List<float>();
                Game.speciesDefinitionColorRefOffsets_val = new List<float>();
                for (int l = 0; l < this.speciesDefinitionData.textureLayers.Count; l++)
                {
                    if (!Game.containsColor(Game.speciesDefinitionColors, this.speciesDefinitionData.textureLayers[l].color))
                    {
                        Game.speciesDefinitionColors.Add(this.speciesDefinitionData.textureLayers[l].color);
                        Game.speciesDefinitionColorReplacements.Add(this.speciesDefinitionData.textureLayers[l].color);
                    }
                }
                if (!Game.containsColor(Game.speciesDefinitionColors, this.speciesDefinitionData.baseColor))
                {
                    Game.speciesDefinitionColors.Add(this.speciesDefinitionData.baseColor);
                    Game.speciesDefinitionColorReplacements.Add(this.speciesDefinitionData.baseColor);
                }
                for (int m = 0; m < this.speciesDefinitionData.embellishmentColors.Count; m++)
                {
                    if (!(this.speciesDefinitionData.embellishmentColors[m] == characterData.embellishmentColors[m]) && !Game.containsColor(Game.speciesDefinitionColors, this.speciesDefinitionData.embellishmentColors[m] / 255f))
                    {
                        Game.speciesDefinitionColors.Add(this.speciesDefinitionData.embellishmentColors[m] / 255f);
                        Game.speciesDefinitionColorReplacements.Add(this.speciesDefinitionData.embellishmentColors[m] / 255f);
                    }
                }
                for (int n = 0; n < this.speciesDefinitionData.embellishmentColorGradientPoints.Count; n++)
                {
                    bool flag = false;
                    for (int num = 0; num < characterData.embellishmentColorGradientPoints.Count; num++)
                    {
                        flag = (flag || this.speciesDefinitionData.embellishmentColorGradientPoints[n].color == characterData.embellishmentColorGradientPoints[num].color);
                    }
                    if (!flag && !Game.containsColor(Game.speciesDefinitionColors, this.speciesDefinitionData.embellishmentColorGradientPoints[n].color / 255f))
                    {
                        Game.speciesDefinitionColors.Add(this.speciesDefinitionData.embellishmentColorGradientPoints[n].color / 255f);
                        Game.speciesDefinitionColorReplacements.Add(this.speciesDefinitionData.embellishmentColorGradientPoints[n].color / 255f);
                    }
                }
                for (int num2 = 0; num2 < Game.speciesDefinitionColorReplacements.Count; num2++)
                {
                    Game.speciesDefinitionColorRefs.Add(-1);
                    Game.speciesDefinitionColorNames.Add(string.Empty);
                    Game.speciesDefinitionColorRefOffsets_hue.Add(0f);
                    Game.speciesDefinitionColorRefOffsets_sat.Add(0f);
                    Game.speciesDefinitionColorRefOffsets_val.Add(1f);
                }
                for (int num3 = 0; num3 < Game.speciesDefinitionColors.Count; num3++)
                {
                    this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num3).localScale = Vector3.one;
                    for (int num4 = 0; num4 < this.speciesDefinitionData.colorDefinitions.Count; num4++)
                    {
                        Color color = Game.speciesDefinitionColors[num3];
                        if (Mathf.Abs(color.r - this.speciesDefinitionData.colorDefinitions[num4].r) < 0.001f)
                        {
                            Color color2 = Game.speciesDefinitionColors[num3];
                            if (Mathf.Abs(color2.g - this.speciesDefinitionData.colorDefinitions[num4].g) < 0.001f)
                            {
                                Color color3 = Game.speciesDefinitionColors[num3];
                                if (Mathf.Abs(color3.b - this.speciesDefinitionData.colorDefinitions[num4].b) < 0.001f)
                                {
                                    Game.speciesDefinitionColorNames[num3] = this.speciesDefinitionData.colorDefinitions[num4].name;
                                    if (this.speciesDefinitionData.colorDefinitions[num4].autoBase != string.Empty)
                                    {
                                        this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num3).localScale = Vector3.one * 0.5f;
                                        for (int num5 = 0; num5 < this.speciesDefinitionData.colorDefinitions.Count; num5++)
                                        {
                                            if (this.speciesDefinitionData.colorDefinitions[num5].name == this.speciesDefinitionData.colorDefinitions[num4].autoBase)
                                            {
                                                Game.speciesDefinitionColorRefs[num3] = num5;
                                                Color white = Color.white;
                                                white.r = this.speciesDefinitionData.colorDefinitions[num4].r;
                                                white.g = this.speciesDefinitionData.colorDefinitions[num4].g;
                                                white.b = this.speciesDefinitionData.colorDefinitions[num4].b;
                                                float num6 = default(float);
                                                float num7 = default(float);
                                                float num8 = default(float);
                                                ColorPicker.ColorToHSV(white, out num6, out num7, out num8);
                                                Color white2 = Color.white;
                                                white2.r = this.speciesDefinitionData.colorDefinitions[num5].r;
                                                white2.g = this.speciesDefinitionData.colorDefinitions[num5].g;
                                                white2.b = this.speciesDefinitionData.colorDefinitions[num5].b;
                                                float num9 = default(float);
                                                float num10 = default(float);
                                                float num11 = default(float);
                                                ColorPicker.ColorToHSV(white2, out num9, out num10, out num11);
                                                Game.speciesDefinitionColorRefOffsets_hue[num3] = num9 - num6;
                                                Game.speciesDefinitionColorRefOffsets_sat[num3] = num10 - num7;
                                                Game.speciesDefinitionColorRefOffsets_val[num3] = num11 / num8;
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                Color color4 = Color.white;
                for (int num12 = 0; num12 < 30; num12++)
                {
                    if (num12 >= Game.speciesDefinitionColors.Count)
                    {
                        color4.a = 0f;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num12).Find("Image")).GetComponent<Image>().color = color4;
                        color4.r = 0.75f;
                        color4.g = 0.75f;
                        color4.b = 0.75f;
                        color4.a = 1f;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num12)).GetComponent<Image>().color = color4;
                    }
                    else
                    {
                        color4 = Game.speciesDefinitionColorReplacements[num12];
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num12).Find("Image")).GetComponent<Image>().color = color4;
                        color4.r = 0f;
                        color4.g = 0f;
                        color4.b = 0f;
                        if (num12 == this.selectedQScolor)
                        {
                            color4 = Color.white;
                        }
                        color4.a = 1f;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num12)).GetComponent<Image>().color = color4;
                    }
                }
            }
            this.quickStartClipboard.transform.Find("randomizeMenu").gameObject.SetActive(((UnityEngine.Component)this.quickStartClipboard.transform.Find("chkRandomize")).GetComponent<Toggle>().isOn);
            if (this.colorPickerOpen && this.selectedQScolor > -1)
            {
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("txtColorSelected")).GetComponent<Text>().text = Game.speciesDefinitionColorNames[this.selectedQScolor];
                Game.speciesDefinitionColorReplacements[this.selectedQScolor] = this.colorPicker.GetComponent<ColorPicker>().color;
                ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + this.selectedQScolor).Find("Image")).GetComponent<Image>().color = Game.speciesDefinitionColorReplacements[this.selectedQScolor];
                for (int num13 = 0; num13 < Game.speciesDefinitionColorRefs.Count; num13++)
                {
                    if (Game.speciesDefinitionColorRefs[num13] != -1)
                    {
                        float num14 = default(float);
                        float num15 = default(float);
                        float num16 = default(float);
                        ColorPicker.ColorToHSV(Game.speciesDefinitionColorReplacements[Game.speciesDefinitionColorRefs[num13]], out num14, out num15, out num16);
                        num14 = (num14 - Game.speciesDefinitionColorRefOffsets_hue[num13] + 360f) % 360f;
                        num15 = Game.cap(num15 - Game.speciesDefinitionColorRefOffsets_sat[num13], 0f, 1f);
                        num16 = Game.cap(num16 / Game.speciesDefinitionColorRefOffsets_val[num13], 0f, 1f);
                        float r = default(float);
                        float g = default(float);
                        float b = default(float);
                        ColorPicker.HsvToRgb(num14, num15, num16, out r, out g, out b);
                        Color white3 = Color.white;
                        white3.r = r;
                        white3.g = g;
                        white3.b = b;
                        Game.speciesDefinitionColorReplacements[num13] = white3;
                        ((UnityEngine.Component)this.quickStartClipboard.transform.Find("colors").Find("cmdColor" + num13).Find("Image")).GetComponent<Image>().color = Game.speciesDefinitionColorReplacements[num13];
                    }
                }
            }
        }
        else
        {
            this.needQuickStartSpeciesRebuild = true;
            this.QSClipboardTransition = 0f;
            this.v3 = this.originalQSClipboardPosition;
            this.v3.x -= 500f;
            this.quickStartClipboard.transform.localPosition = this.v3;
            this.v3 = this.originalQSClipboardRotation;
            this.v3.y -= 90f;
            this.quickStartClipboard.transform.localEulerAngles = this.v3;
        }
    }

    public static bool containsColor(List<Color> existingColors, Color newCol)
    {
        bool result = false;
        for (int i = 0; i < existingColors.Count; i++)
        {
            float r = newCol.r;
            Color color = existingColors[i];
            if (Mathf.Abs(r - color.r) < 0.001f)
            {
                float g = newCol.g;
                Color color2 = existingColors[i];
                if (Mathf.Abs(g - color2.g) < 0.001f)
                {
                    float b = newCol.b;
                    Color color3 = existingColors[i];
                    if (Mathf.Abs(b - color3.b) < 0.001f)
                    {
                        return true;
                    }
                }
            }
        }
        return result;
    }

    public void headMorphSliderChanged()
    {
        for (int i = 0; i < this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
            .childCount; i++)
        {
            bool flag = false;
            for (int j = 0; j < this.PC().data.headMorphs.Count; j++)
            {
                if (this.PC().data.headMorphs[j].key == ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
                    .GetChild(i)
                    .transform.Find("Text")).GetComponent<Text>().text)
                {
                    this.PC().data.headMorphs[j].val = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
                        .GetChild(i)
                        .Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value;
                    flag = true;
                }
            }
            if (!flag)
            {
                this.PC().data.headMorphs.Add(new CharacterDataFloatProperty());
                this.PC().data.headMorphs[this.PC().data.headMorphs.Count - 1].key = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
                    .GetChild(i)
                    .transform.Find("Text")).GetComponent<Text>().text;
                this.PC().data.headMorphs[this.PC().data.headMorphs.Count - 1].val = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("PhysiologicalFeatures").Find("HeadBlends")
                    .GetChild(i)
                    .Find("Slider")).GetComponent<UnityEngine.UI.Slider>().value;
            }
        }
        this.PC().applyReferenceModifications();
    }

    public void processTailFurEditor()
    {
        if (!this.tailFurEditorWasOpen)
        {
            for (int i = 0; i < 5; i++)
            {
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("sldTailFur" + i)).GetComponent<UnityEngine.UI.Slider>().value = this.PC().data.tailFurSizes[i];
            }
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("DensitySlider")).GetComponent<Slider>().val = this.PC().data.tailFurDensity;
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("LengthSlider")).GetComponent<Slider>().val = this.PC().data.tailFurLength;
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("TipSizeSlider")).GetComponent<Slider>().val = this.PC().data.tailTipSize;
            List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
            for (int j = 0; j < Game.embellishmentBrushMeshes.Length; j++)
            {
                if (Game.embellishmentBrushMeshes[j].name.IndexOf("TAILFUR_") != -1)
                {
                    list.Add(new Dropdown.OptionData());
                    list[list.Count - 1].text = Game.embellishmentBrushMeshes[j].name;
                }
            }
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("ddFurTypes")).GetComponent<Dropdown>().options = list;
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("ddFurTypes")).GetComponent<Dropdown>().value = this.PC().data.tailFurType;
        }
        else
        {
            for (int k = 0; k < 5; k++)
            {
                this.PC().data.tailFurSizes[k] = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("sldTailFur" + k)).GetComponent<UnityEngine.UI.Slider>().value;
            }
            this.PC().data.tailFurDensity = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("DensitySlider")).GetComponent<Slider>().val;
            this.PC().data.tailFurLength = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("LengthSlider")).GetComponent<Slider>().val;
            this.PC().data.tailTipSize = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("TipSizeSlider")).GetComponent<Slider>().val;
            this.PC().data.tailFurType = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("TailFurEditor").Find("ddFurTypes")).GetComponent<Dropdown>().value;
        }
        this.tailFurEditorWasOpen = true;
    }

    public void initEmbellishmentBrush()
    {
        this.embellishmentBrush = GameObject.Find("paintables");
        Shader shader = Shader.Find("Particles/Additive");
        Color value = default(Color);
        value.r = 0.054f;
        value.g = 0.443f;
        value.b = 0.572f;
        value.a = 0.5f;
        Game.embellishmentBrushMeshes = this.embellishmentBrush.GetComponentsInChildren<SkinnedMeshRenderer>();
        for (int i = 0; i < Game.embellishmentBrushMeshes.Length; i++)
        {
            Material[] materials = Game.embellishmentBrushMeshes[i].materials;
            for (int j = 0; j < materials.Length; j++)
            {
                Game.embellishmentBrushMeshes[i].materials[j].shader = shader;
                Game.embellishmentBrushMeshes[i].materials[j].SetColor("_TintColor", value);
            }
        }
        this.embellishmentBrush.SetActive(false);
    }

    public void processEmbellishmentColorMenu()
    {
        if (this.firstEmbellishmentColorMenuBuild)
        {
            this.embellishmentGradientDotTemplate = this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").Find("Dot")
                .gameObject;
            this.embellishmentGradientDotTemplate.SetActive(false);
            this.needEmbellishmentColorRedraw = true;
            this.needEmbellishmentColorRebuildDots = true;
            this.firstEmbellishmentColorMenuBuild = false;
        }
        if (this.needEmbellishmentColorRebuildDots)
        {
            if (this.embellishmentGradientDots != null)
            {
                for (int i = 0; i < this.embellishmentGradientDots.Count; i++)
                {
                    for (int j = 0; j < this.embellishmentGradientDots[i].Count; j++)
                    {
                        UnityEngine.Object.Destroy(this.embellishmentGradientDots[i][j]);
                    }
                }
            }
            this.selectedEmbellishmentGradientDotC = -1;
            this.selectedEmbellishmentGradientDot = -1;
            this.embellishmentGradientDots = new List<List<GameObject>>();
            this.embellishmentGradientDotTemplate.SetActive(true);
            for (int k = 0; k < 12; k++)
            {
                this.embellishmentGradientDots.Add(new List<GameObject>());
                for (int l = 0; l < this.PC().data.embellishmentColorGradientPoints.Count; l++)
                {
                    if (this.PC().data.embellishmentColorGradientPoints[l].embellishmentID == k)
                    {
                        this.embellishmentGradientDots[k].Add(UnityEngine.Object.Instantiate(this.embellishmentGradientDotTemplate));
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").Find("GradientEditor" + k)
                            .Find("Fill"));
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.localScale = Vector3.one;
                        this.v3.x = -128f + this.PC().data.embellishmentColorGradientPoints[l].position * 256f;
                        this.v3.y = 0f;
                        this.v3.z = 0f;
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.localPosition = this.v3;
                        ((UnityEngine.Component)this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.Find("Fill")).GetComponent<Image>().color = this.PC().data.embellishmentColorGradientPoints[l].color / 255f;
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().system = this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").gameObject;
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().pointID = l;
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().cid = k;
                        this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().id = this.embellishmentGradientDots[k].Count - 1;
                    }
                }
                this.embellishmentGradientDots[k].Add(UnityEngine.Object.Instantiate(this.embellishmentGradientDotTemplate));
                this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").Find("GradientEditor" + k)
                    .Find("Fill"));
                this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.localScale = Vector3.one;
                this.v3.x = -128f;
                this.v3.y = 0f;
                this.v3.z = 0f;
                this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.localPosition = this.v3;
                ((UnityEngine.Component)this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].transform.Find("Fill")).GetComponent<Image>().color = this.PC().data.embellishmentColors[k] / 255f;
                this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().system = this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").gameObject;
                this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().cid = k;
                this.embellishmentGradientDots[k][this.embellishmentGradientDots[k].Count - 1].GetComponent<GradientEditorDot>().id = -2;
            }
            this.embellishmentGradientDotTemplate.SetActive(false);
            this.needEmbellishmentColorRebuildDots = false;
        }
        if (this.needEmbellishmentColorRedraw)
        {
            for (int m = 0; m < 12; m++)
            {
                if (m == this.needEmbellishmentColorRedrawSpecific || this.needEmbellishmentColorRedrawSpecific == -1)
                {
                    Texture2D texture2D = new Texture2D(256, 32, TextureFormat.RGBA32, false);
                    Color color = Color.white;
                    for (int n = 0; n < texture2D.width; n++)
                    {
                        for (int num = 0; num < texture2D.height; num++)
                        {
                            if (num == 0)
                            {
                                color = Game.determineEmbellishmentColorAtPoint(this.PC(), m, (float)n / (float)texture2D.width) / 256f;
                            }
                            texture2D.SetPixel(n, num, color);
                        }
                    }
                    texture2D.Apply();
                    ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("EmbellishmentColors").Find("GradientEditor" + m)
                        .Find("Fill")).GetComponent<RawImage>().texture = texture2D;
                }
            }
            this.needEmbellishmentColorRedrawSpecific = -1;
            this.needEmbellishmentColorRedraw = false;
        }
        if (this.selectedEmbellishmentGradientDotC != -1 && this.selectedEmbellishmentGradientDot != -1)
        {
            if (!this.embellishmentGradientColorPickerWasOpen)
            {
                List<Color> existingColors = new List<Color>();
                this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().setExistingColors(existingColors);
                if (this.selectedEmbellishmentGradientDot == -2)
                {
                    this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color = this.PC().data.embellishmentColors[this.selectedEmbellishmentGradientDotC] / 255f;
                }
                else
                {
                    this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color = ((UnityEngine.Component)this.embellishmentGradientDots[this.selectedEmbellishmentGradientDotC][this.selectedEmbellishmentGradientDot].transform.Find("Fill")).GetComponent<Image>().color;
                }
                this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().updateHSV();
                this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().render();
            }
            this.embellishmentGradientColorPicker.SetActive(true);
            if (this.selectedEmbellishmentGradientDot == -2)
            {
                if (this.PC().data.embellishmentColors[this.selectedEmbellishmentGradientDotC] != this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color * 255f)
                {
                    this.PC().data.embellishmentColors[this.selectedEmbellishmentGradientDotC] = this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color * 255f;
                    ((UnityEngine.Component)this.embellishmentGradientDots[this.selectedEmbellishmentGradientDotC][this.embellishmentGradientDots[this.selectedEmbellishmentGradientDotC].Count - 1].transform.Find("Fill")).GetComponent<Image>().color = this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color;
                    this.needEmbellishmentColorRedraw = true;
                    this.needEmbellishmentColorRedrawSpecific = this.selectedEmbellishmentGradientDotC;
                    this.characterRedrawDelay = 10;
                }
            }
            else if (((UnityEngine.Component)this.embellishmentGradientDots[this.selectedEmbellishmentGradientDotC][this.selectedEmbellishmentGradientDot].transform.Find("Fill")).GetComponent<Image>().color != this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color)
            {
                ((UnityEngine.Component)this.embellishmentGradientDots[this.selectedEmbellishmentGradientDotC][this.selectedEmbellishmentGradientDot].transform.Find("Fill")).GetComponent<Image>().color = this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color;
                this.needEmbellishmentColorRedraw = true;
                this.needEmbellishmentColorRedrawSpecific = this.selectedEmbellishmentGradientDotC;
                this.characterRedrawDelay = 10;
                this.PC().data.embellishmentColorGradientPoints[this.embellishmentGradientDots[this.selectedEmbellishmentGradientDotC][this.selectedEmbellishmentGradientDot].GetComponent<GradientEditorDot>().pointID].color = this.embellishmentGradientColorPicker.GetComponent<ColorPicker>().color * 255f;
            }
            this.embellishmentGradientColorPickerWasOpen = true;
        }
        else
        {
            this.embellishmentGradientColorPicker.SetActive(false);
            this.embellishmentGradientColorPickerWasOpen = false;
        }
    }

    public static Color determineEmbellishmentColorAtPoint(RackCharacter character, int c, float point)
    {
        if (point < 0f)
        {
            point = 0f;
        }
        if (point > 1f)
        {
            point = 1f;
        }
        Color color = character.data.embellishmentColors[c];
        int num = -1;
        int num2 = -1;
        float num3 = 1f;
        float num4 = 1f;
        for (int i = 0; i < character.data.embellishmentColorGradientPoints.Count; i++)
        {
            if (character.data.embellishmentColorGradientPoints[i].embellishmentID == c)
            {
                if (character.data.embellishmentColorGradientPoints[i].position == point)
                {
                    return character.data.embellishmentColorGradientPoints[i].color;
                }
                if (character.data.embellishmentColorGradientPoints[i].position > point)
                {
                    if (Math.Abs(character.data.embellishmentColorGradientPoints[i].position - point) < num4)
                    {
                        num4 = Math.Abs(character.data.embellishmentColorGradientPoints[i].position - point);
                        num2 = i;
                    }
                }
                else if (Math.Abs(character.data.embellishmentColorGradientPoints[i].position - point) < num3)
                {
                    num3 = Math.Abs(character.data.embellishmentColorGradientPoints[i].position - point);
                    num = i;
                }
            }
        }
        if (num != -1 && num2 == -1)
        {
            num2 = num;
        }
        Color color2 = color;
        Color b = color;
        if (num != -1)
        {
            color2 = character.data.embellishmentColorGradientPoints[num].color;
        }
        if (num2 != -1)
        {
            b = character.data.embellishmentColorGradientPoints[num2].color;
        }
        float num5 = 0f;
        float num6 = 1f;
        if (num != -1)
        {
            num5 = character.data.embellishmentColorGradientPoints[num].position;
        }
        if (num2 != -1)
        {
            num6 = character.data.embellishmentColorGradientPoints[num2].position;
        }
        color = Color.Lerp(color2, b, (point - num5) / (num6 - num5));
        color.a = 256f;
        return color;
    }

    public static Bounds GetMaxBounds(GameObject g)
    {
        Bounds result = new Bounds(g.transform.position, Vector3.zero);
        Renderer[] componentsInChildren = g.GetComponentsInChildren<Renderer>();
        foreach (Renderer renderer in componentsInChildren)
        {
            Bounds bounds = renderer.bounds;
            result.Encapsulate(bounds);
        }
        return result;
    }

    public void processEmbellishmentEditing()
    {
        CharacterData data;
        if (!this.embellishmentMenuOpen)
        {
            if ((UnityEngine.Object)this.embellishmentLayerContainer == (UnityEngine.Object)null)
            {
                this.embellishmentLayerContainer = this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                    .Find("EmbellishmentLayers")
                    .gameObject;
                this.embellishmentContainer = this.UI.transform.Find("EmbellishmentSelectionMenu").Find("Embellishments").gameObject;
                this.embellishmentLayerTemplate = this.embellishmentLayerContainer.transform.Find("EmbellishmentLayer").gameObject;
                this.embellishmentLayerTemplate.SetActive(false);
            }
            if ((UnityEngine.Object)this.hairAddonTemplate == (UnityEngine.Object)null)
            {
                this.hairAddonTemplate = this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                    .Find("EmbellishmentLayers")
                    .Find("EmbellishmentMenu")
                    .Find("hairMenu")
                    .Find("hairAddon")
                    .gameObject;
                this.hairAddonTemplate.SetActive(false);
            }
            data = this.PC().data;
            this.selectedEmbellishment = this.embellishmentBrushSetting_embellishment;
            if (this.editingExistingEmbellishment)
            {
                this.selectedEmbellishment = data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment;
                if (this.embellishmentSliderMeshRebuildDelay > 0)
                {
                    this.embellishmentSliderMeshRebuildDelay--;
                    if (this.embellishmentSliderMeshRebuildDelay <= 0)
                    {
                        for (int i = 0; i < this.PC().preciseMousePickingCollider.Count; i++)
                        {
                            ((UnityEngine.Component)this.PC().preciseMousePickingCollider[i].transform.parent).GetComponent<SkinnedMeshRenderer>().BakeMesh(this.PC().preciseMousePickingCollider[i].GetComponent<MeshCollider>().sharedMesh);
                            this.PC().preciseMousePickingCollider[i].GetComponent<MeshCollider>().enabled = true;
                            this.PC().preciseMousePickingCollider[i].GetComponent<MeshCollider>().enabled = false;
                        }
                    }
                }
            }
            else
            {
                this.embellishmentSliderMeshRebuildDelay = 3;
            }
            this.embellishmentBrush.SetActive(true);
            for (int j = 0; j < Game.embellishmentBrushMeshes.Length; j++)
            {
                Game.embellishmentBrushMeshes[j].gameObject.SetActive(Game.embellishmentBrushMeshes[j].name == this.selectedEmbellishment);
                if (Game.embellishmentBrushMeshes[j].name == this.selectedEmbellishment)
                {
                    Game.curEmbellishmentBrushMesh = j;
                }
            }
            this.previousSelectedEmbellishment = this.selectedEmbellishment;
            if ((UnityEngine.Object)this.embellishmentBrush != (UnityEngine.Object)null)
            {
                this.embellishmentBrush.SetActive((this.somethingPicked && this.placingEmbellishment) || this.editingExistingEmbellishment);
            }
            if (this.somethingPicked && this.placingEmbellishment)
            {
                goto IL_030a;
            }
            if (this.editingExistingEmbellishment)
            {
                goto IL_030a;
            }
            goto IL_05d5;
        }
        return;
    IL_030a:
        if ((this.precisePickPoint - this.embellishmentBrush.transform.position).magnitude > 0.5f)
        {
            Transform transform = this.embellishmentBrush.transform;
            transform.position += this.precisePickPoint - this.embellishmentBrush.transform.position;
        }
        else
        {
            Transform transform2 = this.embellishmentBrush.transform;
            transform2.position += (this.precisePickPoint - this.embellishmentBrush.transform.position) * Time.deltaTime * 8f;
        }
        if (this.editingExistingEmbellishment)
        {
            this.embellishmentBrush.transform.rotation = Quaternion.FromToRotation(Vector3.up, this.precisePickNormal);
            this.embellishmentBrush.transform.Rotate(0f, (data.embellishmentLayers[this.editingEmbellishmentLayer].turn - 0.5f) * 360f, 0f, Space.Self);
            this.embellishmentBrush.transform.Rotate((data.embellishmentLayers[this.editingEmbellishmentLayer].bend - 0.5f) * 360f, 0f, 0f, Space.Self);
            this.embellishmentBrush.transform.Rotate(0f, (data.embellishmentLayers[this.editingEmbellishmentLayer].twist - 0.5f) * 360f, 0f, Space.Self);
        }
        else
        {
            this.embellishmentBrush.transform.rotation = Quaternion.FromToRotation(Vector3.up, this.precisePickNormal);
            this.embellishmentBrush.transform.Rotate(0f, (this.embellishmentBrushSetting_turn - 0.5f) * 360f, 0f, Space.Self);
            this.embellishmentBrush.transform.Rotate((this.embellishmentBrushSetting_bend - 0.5f) * 360f, 0f, 0f, Space.Self);
            this.embellishmentBrush.transform.Rotate(0f, (this.embellishmentBrushSetting_twist - 0.5f) * 360f, 0f, Space.Self);
        }
        float size = this.embellishmentBrushSetting_size;
        if (this.editingExistingEmbellishment)
        {
            size = data.embellishmentLayers[this.editingEmbellishmentLayer].size;
        }
        Transform transform3 = this.embellishmentBrush.transform;
        transform3.localScale += (Vector3.one * this.PC().height_act * size - this.embellishmentBrush.transform.localScale) * Time.deltaTime * 4f;
        goto IL_05d5;
    IL_1df3:
        float num4;
        int num5;
        int index;
        if ((Input.GetMouseButton(0) || Input.GetMouseButtonUp(0)) && this.mX > 0.5f)
        {
            this.somethingPicked = false;
            if (Physics.Raycast(this.mainCam.GetComponent<Camera>().ScreenPointToRay(Input.mousePosition), out this.precisePickHitInfo, float.PositiveInfinity, LayerMask.GetMask("PreciseRaycasting")))
            {
                if ((this.lastPrecisePickMousePosition - Input.mousePosition).magnitude > 5f)
                {
                    this.lastPrecisePickMousePosition = Input.mousePosition;
                    this.recentPrecisePickMouseMovement = 0.5f;
                    if (this.precisePickPickDelay > 0.1f)
                    {
                        this.precisePickPickDelay = 0.1f;
                    }
                }
                this.somethingPicked = true;
                this.precisePickPoint = this.precisePickHitInfo.point;
                this.precisePickNormal = this.precisePickHitInfo.normal;
                if (Input.GetMouseButtonUp(0) && this.mX > 0.5f)
                {
                    for (int k = 0; k < this.PC().preciseMousePickingCollider.Count; k++)
                    {
                        Vector3 b = this.PC().preciseMousePickingCollider[k].transform.InverseTransformPoint(this.precisePickHitInfo.point);
                        int num = 0;
                        int num2 = this.PC().originalVertexCounts[k];
                        int num3 = 1;
                        if (this.recentPrecisePickMouseMovement > 0f)
                        {
                            this.recentPrecisePickMouseMovement -= Time.deltaTime;
                            if (this.recentPrecisePickMouseMovement < 0f)
                            {
                                this.recentPrecisePickMouseMovement = 0f;
                            }
                        }
                        if (!Input.GetMouseButtonUp(0) || !(this.mX > 0.5f))
                        {
                            num3 = Mathf.FloorToInt(1f + this.recentPrecisePickMouseMovement * 20f);
                        }
                        this.precisePickPickDelay = 0.35f - this.recentPrecisePickMouseMovement / 2f;
                        for (int l = num; l < num2; l += num3)
                        {
                            if ((!this.embellishmentBrushSetting_mirror || this.PC().originalverts[k][l].x != 0f) && (!this.embellishmentBrushSetting_center || this.PC().originalverts[k][l].x == 0f))
                            {
                                float magnitude = (this.PC().preciseMousePickingCollider[k].GetComponent<MeshCollider>().sharedMesh.vertices[l] - b).magnitude;
                                if (magnitude < num4)
                                {
                                    num5 = l;
                                    num4 = magnitude;
                                    index = k;
                                    if (this.embellishmentBrushSetting_center)
                                    {
                                        this.precisePickPoint = this.PC().preciseMousePickingCollider[k].transform.TransformPoint(this.PC().preciseMousePickingCollider[k].GetComponent<MeshCollider>().sharedMesh.vertices[l]);
                                    }
                                    this.precisePickNormal = Game.gameInstance.PC().preciseMousePickingCollider[k].transform.TransformVector(this.PC().preciseMousePickingCollider[k].GetComponent<MeshCollider>().sharedMesh.normals[l]);
                                    this.somethingPicked = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        for (int m = 0; m < this.PC().preciseMousePickingCollider.Count; m++)
        {
            if ((Input.GetMouseButton(0) || Input.GetMouseButtonUp(0)) && this.mX > 0.5f)
            {
                this.PC().preciseMousePickingCollider[m].GetComponent<MeshCollider>().enabled = false;
            }
        }
        if (this.precisePickPickDelay > 0f)
        {
            this.precisePickPickDelay -= Time.deltaTime;
        }
        if (num5 != -1 && Input.GetMouseButtonUp(0) && this.mX > 0.5f && !this.embellishmentMenuOpen && !this.embellishmentMenuWasOpen && this.recentPopup <= 0f)
        {
            EmbellishmentLayer embellishmentLayer = new EmbellishmentLayer();
            embellishmentLayer.color = this.embellishmentBrushSetting_color;
            embellishmentLayer.embellishment = this.embellishmentBrushSetting_embellishment;
            embellishmentLayer.bend = this.embellishmentBrushSetting_bend;
            embellishmentLayer.turn = this.embellishmentBrushSetting_turn;
            embellishmentLayer.twist = this.embellishmentBrushSetting_twist;
            embellishmentLayer.size = this.embellishmentBrushSetting_size;
            embellishmentLayer.mirror = this.embellishmentBrushSetting_mirror;
            this.characterRebuildDelay = 2;
            embellishmentLayer.vertexID = num5;
            embellishmentLayer.partName = this.PC().parts[index].name;
            this.PC().data.embellishmentLayers.Add(embellishmentLayer);
        }
        return;
    IL_05d5:
        int num6 = data.embellishmentLayers.Count + 1;
        int index2;
        if (this.embellishmentLayers.Count != num6)
        {
            for (int n = 0; n < this.embellishmentLayers.Count; n++)
            {
                UnityEngine.Object.Destroy(this.embellishmentLayers[n]);
            }
            this.embellishmentLayers = new List<GameObject>();
            this.embellishmentLayerTemplate.SetActive(true);
            for (int num7 = 0; num7 < num6; num7++)
            {
                GameObject gameObject = UnityEngine.Object.Instantiate(this.embellishmentLayerTemplate);
                this.v3 = Vector3.zero;
                this.v3.y = (float)(70 * this.embellishmentLayers.Count);
                gameObject.transform.SetParent(this.embellishmentLayerContainer.transform);
                gameObject.transform.localPosition = this.v3;
                this.v3 = Vector3.one;
                gameObject.transform.localScale = this.v3;
                this.embellishmentLayers.Add(gameObject);
            }
            this.embellishmentLayerTemplate.SetActive(false);
            this.colorPickerOpen = false;
            this.v3.x = 0f;
            this.v3.y = (float)(70 * (num6 - 1));
            this.v3.z = 0f;
            this.embellishmentLayerContainer.transform.Find("EmbellishmentMenu").localPosition = this.v3;
            for (int num8 = 0; num8 < this.embellishmentLayers.Count - 1; num8++)
            {
                this.embellishmentLayers[num8].GetComponent<TextureLayerUI>().isLayer = true;
                this.embellishmentLayers[num8].GetComponent<TextureLayerUI>().id = num8;
                this.embellishmentLayers[num8].GetComponent<TextureLayerUI>().isEmbellishment = true;
                this.embellishmentLayers[num8].GetComponent<TextureLayerUI>().ignoreSliderChanges = true;
                ((UnityEngine.Component)this.embellishmentLayers[num8].transform.Find("LayerStuff").Find("sldSize")).GetComponent<UnityEngine.UI.Slider>().value = data.embellishmentLayers[num8].size;
                ((UnityEngine.Component)this.embellishmentLayers[num8].transform.Find("LayerStuff").Find("sldBend")).GetComponent<UnityEngine.UI.Slider>().value = data.embellishmentLayers[num8].bend;
                ((UnityEngine.Component)this.embellishmentLayers[num8].transform.Find("LayerStuff").Find("sldTurn")).GetComponent<UnityEngine.UI.Slider>().value = data.embellishmentLayers[num8].turn;
                ((UnityEngine.Component)this.embellishmentLayers[num8].transform.Find("LayerStuff").Find("sldTwist")).GetComponent<UnityEngine.UI.Slider>().value = data.embellishmentLayers[num8].twist;
                ((UnityEngine.Component)this.embellishmentLayers[num8].transform.Find("BG")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                this.embellishmentLayers[num8].transform.Find("LayerStuff").Find("brush").gameObject.SetActive(false);
                this.embellishmentLayers[num8].transform.Find("cmdDelete").gameObject.SetActive(true);
                this.embellishmentLayers[num8].transform.Find("LayerStuff").Find("chk").gameObject.SetActive(true);
                this.embellishmentLayers[num8].GetComponent<TextureLayerUI>().ignoreSliderChanges = false;
            }
            index2 = this.embellishmentLayers.Count - 1;
            this.embellishmentLayers[index2].GetComponent<TextureLayerUI>().isLayer = false;
            this.embellishmentLayers[index2].GetComponent<TextureLayerUI>().id = -1;
            this.embellishmentLayers[index2].GetComponent<TextureLayerUI>().isEmbellishment = true;
            this.embellishmentLayers[index2].GetComponent<TextureLayerUI>().ignoreSliderChanges = true;
            ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldSize")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_size;
            ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldBend")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_bend;
            ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldTurn")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_turn;
            ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldTwist")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_twist;
            ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("BG")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
            this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("brush").gameObject.SetActive(true);
            this.embellishmentLayers[index2].transform.Find("cmdDelete").gameObject.SetActive(false);
            this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("chk").gameObject.SetActive(false);
        }
        index2 = this.embellishmentLayers.Count - 1;
        this.embellishmentBrushSetting_size = ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldSize")).GetComponent<UnityEngine.UI.Slider>().value;
        this.embellishmentBrushSetting_bend = ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldBend")).GetComponent<UnityEngine.UI.Slider>().value;
        this.embellishmentBrushSetting_turn = ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldTurn")).GetComponent<UnityEngine.UI.Slider>().value;
        this.embellishmentBrushSetting_twist = ((UnityEngine.Component)this.embellishmentLayers[index2].transform.Find("LayerStuff").Find("sldTwist")).GetComponent<UnityEngine.UI.Slider>().value;
        this.v3 = this.embellishmentLayerContainer.transform.localPosition;
        float num9 = (float)(num6 * 70 + 140 + 52 * this.PC().data.hairAddons.Count - 350);
        if (num9 < 0f)
        {
            num9 = 0f;
        }
        if (this.mX < 0.5f)
        {
            float num10 = this.textureEditorScroll;
            Vector2 mouseScrollDelta = Input.mouseScrollDelta;
            this.textureEditorScroll = num10 + mouseScrollDelta.y * 70f;
        }
        if (this.textureEditorScroll < 0f)
        {
            this.textureEditorScroll = 0f;
        }
        if (this.textureEditorScroll > num9)
        {
            this.textureEditorScroll = num9;
        }
        this.v3.y += (-325f - this.textureEditorScroll - this.v3.y) * 11f * Time.deltaTime;
        this.embellishmentLayerContainer.transform.localPosition = this.v3;
        Color color;
        for (int num11 = 0; num11 < num6; num11++)
        {
            Transform transform4 = this.embellishmentLayers[num11].transform;
            if ((UnityEngine.Object)transform4.transform.Find("cmdDelete") != (UnityEngine.Object)null)
            {
                ((UnityEngine.Component)transform4).GetComponent<TextureLayerUI>().cmdDelete = transform4.transform.Find("cmdDelete").gameObject;
            }
            if (num11 < num6 - 1)
            {
                ((UnityEngine.Component)transform4.Find("LayerStuff").Find("txtEmbellishment")).GetComponent<Text>().text = data.embellishmentLayers[num11].embellishment.ToUpper();
                ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("BG")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                if (data.embellishmentLayers[num11].mirror)
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("mirrorIndicator")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                }
                else
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("mirrorIndicator")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                }
                if (!data.embellishmentLayers[num11].hidden)
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("cmdVisible")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                }
                else
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("cmdVisible")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                }
                ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("cmdCenter")).GetComponent<CanvasRenderer>().SetAlpha(0f);
                for (int num12 = -1; num12 < 12; num12++)
                {
                    string str = num12 + string.Empty;
                    if (num12 == -1)
                    {
                        str = "N";
                    }
                    color = ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("ColorMenu").Find("cmdColor" + str)).GetComponent<Image>().color;
                    if (data.embellishmentLayers[num11].color == num12)
                    {
                        color.a = 1f;
                    }
                    else
                    {
                        color.a = 0.2f;
                    }
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("ColorMenu").Find("cmdColor" + str)).GetComponent<Image>().color = color;
                }
            }
            else
            {
                ((UnityEngine.Component)transform4.Find("LayerStuff").Find("txtEmbellishment")).GetComponent<Text>().text = this.embellishmentBrushSetting_embellishment;
                ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("BG")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                if (this.embellishmentBrushSetting_mirror)
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("mirrorIndicator")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                }
                else
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("mirrorIndicator")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                }
                if (this.embellishmentBrushSetting_center)
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("cmdCenter")).GetComponent<CanvasRenderer>().SetAlpha(1f);
                }
                else
                {
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("cmdCenter")).GetComponent<CanvasRenderer>().SetAlpha(0.2f);
                }
                ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("cmdVisible")).GetComponent<CanvasRenderer>().SetAlpha(0f);
                for (int num13 = -1; num13 < 12; num13++)
                {
                    string str = num13 + string.Empty;
                    if (num13 == -1)
                    {
                        str = "N";
                    }
                    color = ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("ColorMenu").Find("cmdColor" + str)).GetComponent<Image>().color;
                    if (this.embellishmentBrushSetting_color == num13)
                    {
                        color.a = 1f;
                    }
                    else
                    {
                        color.a = 0.2f;
                    }
                    ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("ColorMenu").Find("cmdColor" + str)).GetComponent<Image>().color = color;
                }
            }
            for (int num14 = 0; num14 < 12; num14++)
            {
                color = this.PC().data.embellishmentColors[num14] / 255f;
                Color color2 = ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("ColorMenu").Find("cmdColor" + num14)).GetComponent<Image>().color;
                color.a = color2.a;
                ((UnityEngine.Component)this.embellishmentLayers[num11].transform.Find("LayerStuff").Find("ColorMenu").Find("cmdColor" + num14)).GetComponent<Image>().color = color;
            }
        }
        this.embellishmentLayerContainer.SetActive(!this.embellishmentMenuOpen);
        if (this.PC().data.hairAddons.Count != this.hairAddonPanels.Count)
        {
            this.needEmbellishmentMenuRebuild = true;
        }
        if (Game.needEmbellishmentPackageMenuRebuild)
        {
            List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
            for (int num15 = 0; num15 < EmbellishmentPackageManager.packages.Count; num15++)
            {
                bool flag = false;
                for (int num16 = 0; num16 < EmbellishmentPackageManager.packages[num15].requiredParts.Count; num16++)
                {
                    int num17 = 0;
                    while (num17 < this.PC().parts.Count)
                    {
                        if (!(this.PC().parts[num17].name == EmbellishmentPackageManager.packages[num15].requiredParts[num16]))
                        {
                            num17++;
                            continue;
                        }
                        flag = true;
                        break;
                    }
                }
                if (flag)
                {
                    Dropdown.OptionData optionData = new Dropdown.OptionData();
                    optionData.text = EmbellishmentPackageManager.packages[num15].name;
                    list.Add(optionData);
                }
            }
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                .Find("EmbellishmentLayers")
                .Find("EmbellishmentMenu")
                .Find("ddPackages")).GetComponent<Dropdown>().options = list;
            List<Dropdown.OptionData> list2 = new List<Dropdown.OptionData>();
            this.fetchHairstyles();
            int value = 0;
            for (int num18 = 0; num18 < this.hairstyles.Count; num18++)
            {
                Dropdown.OptionData optionData2 = new Dropdown.OptionData();
                optionData2.text = this.hairstyles[num18];
                if (this.hairstyles[num18] == this.PC().data.hairstyle)
                {
                    value = num18;
                }
                list2.Add(optionData2);
            }
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                .Find("EmbellishmentLayers")
                .Find("EmbellishmentMenu")
                .Find("hairMenu")
                .Find("LayerStuff")
                .Find("ddHairstyles")).GetComponent<Dropdown>().options = list2;
            ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                .Find("EmbellishmentLayers")
                .Find("EmbellishmentMenu")
                .Find("hairMenu")
                .Find("LayerStuff")
                .Find("ddHairstyles")).GetComponent<Dropdown>().value = value;
            for (int num19 = 0; num19 < 12; num19++)
            {
                string str = num19 + string.Empty;
                color = this.PC().data.embellishmentColors[num19] / 255f;
                if (this.PC().data.hairColor == num19)
                {
                    color.a = 1f;
                }
                else
                {
                    color.a = 0.2f;
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                    .Find("EmbellishmentLayers")
                    .Find("EmbellishmentMenu")
                    .Find("hairMenu")
                    .Find("LayerStuff")
                    .Find("ColorMenu")
                    .Find("cmdColor" + str)).GetComponent<Image>().color = color;
            }
            for (int num20 = 0; num20 < this.hairAddonPanels.Count; num20++)
            {
                UnityEngine.Object.Destroy(this.hairAddonPanels[num20]);
            }
            this.lastAddonHairstyleVariantMax = new List<int>();
            this.hairAddonPanels = new List<GameObject>();
            this.hairAddonTemplate.SetActive(true);
            for (int num21 = 0; num21 < this.PC().data.hairAddons.Count; num21++)
            {
                this.hairAddonPanels.Add(UnityEngine.Object.Instantiate(this.hairAddonTemplate));
                this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.SetParent(this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                    .Find("EmbellishmentLayers")
                    .Find("EmbellishmentMenu")
                    .Find("hairMenu"));
                this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.localScale = Vector3.one;
                this.v3 = Vector3.zero;
                this.v3.y += (float)(10 + 50 * this.hairAddonPanels.Count);
                this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.localPosition = this.v3;
                ((UnityEngine.Component)this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.Find("ddHairstyles")).GetComponent<Dropdown>().options = list2;
                ((UnityEngine.Component)this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.Find("ColorMenu")).GetComponent<HairAddonColorMenu>().id = num21;
                ((UnityEngine.Component)this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.Find("hdHairstyle")).GetComponent<AutoText>().phrase = "HAIR_STYLE";
                ((UnityEngine.Component)this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.Find("hdVariant")).GetComponent<AutoText>().phrase = "VARIANT";
                for (int num22 = 0; num22 < 12; num22++)
                {
                    color = this.PC().data.embellishmentColors[num22] / 255f;
                    if (this.PC().data.hairAddons[num21].color == num22)
                    {
                        color.a = 1f;
                    }
                    else
                    {
                        color.a = 0.2f;
                    }
                    ((UnityEngine.Component)this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.Find("ColorMenu").Find("cmdColor" + num22)).GetComponent<Image>().color = color;
                }
                for (int num23 = 0; num23 < list2.Count; num23++)
                {
                    if (list2[num23].text == this.PC().data.hairAddons[num21].style)
                    {
                        ((UnityEngine.Component)this.hairAddonPanels[this.hairAddonPanels.Count - 1].transform.Find("ddHairstyles")).GetComponent<Dropdown>().value = num23;
                    }
                }
                this.lastAddonHairstyleVariantMax.Add(0);
                List<Dropdown.OptionData> list3 = new List<Dropdown.OptionData>();
                int num24 = this.hairstyleVariants[this.hairstyles.IndexOf(this.PC().data.hairAddons[num21].style)];
                for (int num25 = 0; num25 < num24; num25++)
                {
                    Dropdown.OptionData optionData3 = new Dropdown.OptionData();
                    optionData3.text = num25 + 1 + string.Empty;
                    list3.Add(optionData3);
                }
                ((UnityEngine.Component)this.hairAddonPanels[num21].transform.Find("ddVariant")).GetComponent<Dropdown>().options = list3;
                this.lastAddonHairstyleVariantMax[num21] = num24;
                ((UnityEngine.Component)this.hairAddonPanels[num21].transform.Find("ddVariant")).GetComponent<Dropdown>().value = this.PC().data.hairAddons[num21].variant;
            }
            this.hairAddonTemplate.SetActive(false);
            Game.needEmbellishmentPackageMenuRebuild = false;
        }
        this.updateHairVariantMenus();
        num4 = 10f;
        index = -1;
        num5 = -1;
        if ((Input.GetMouseButton(0) || Input.GetMouseButtonUp(0)) && this.mX > 0.5f)
        {
            this.somethingPicked = false;
        }
        for (int num26 = 0; num26 < this.PC().preciseMousePickingCollider.Count; num26++)
        {
            if ((Input.GetMouseButton(0) || Input.GetMouseButtonUp(0)) && this.mX > 0.5f)
            {
                this.PC().pauseAnimation();
                if (!this.placingEmbellishment)
                {
                    ((UnityEngine.Component)this.PC().preciseMousePickingCollider[num26].transform.parent).GetComponent<SkinnedMeshRenderer>().BakeMesh(this.PC().preciseMousePickingCollider[num26].GetComponent<MeshCollider>().sharedMesh);
                }
                this.PC().preciseMousePickingCollider[num26].GetComponent<MeshCollider>().enabled = true;
                this.PC().pauseAnimation();
                ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = true;
                continue;
            }
            ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = false;
        }
        if ((Input.GetMouseButton(0) || Input.GetMouseButtonUp(0)) && this.mX > 0.5f)
        {
            this.placingEmbellishment = true;
            goto IL_1df3;
        }
        this.placingEmbellishment = false;
        this.editingExistingEmbellishment = false;
        goto IL_1df3;
    }

    public void addHairPiece()
    {
        this.PC().data.hairAddons.Add(new HairLayer());
        this.PC().data.hairAddons[this.PC().data.hairAddons.Count - 1].color = this.PC().data.hairColor;
        this.PC().data.hairAddons[this.PC().data.hairAddons.Count - 1].style = "ponytail";
        this.PC().data.hairAddons[this.PC().data.hairAddons.Count - 1].variant = 0;
        Game.needEmbellishmentPackageMenuRebuild = true;
        this.characterRebuildDelay = 2;
    }

    public int hairAddonIDfromPanel(GameObject addonPanel)
    {
        return ((UnityEngine.Component)addonPanel.transform.Find("ColorMenu")).GetComponent<HairAddonColorMenu>().id;
    }

    public void deleteHairPiece(GameObject addonPanel)
    {
        this.PC().data.hairAddons.RemoveAt(this.hairAddonIDfromPanel(addonPanel));
        Game.needEmbellishmentPackageMenuRebuild = true;
        this.characterRebuildDelay = 2;
    }

    public void updateHairPiece(GameObject addonPanel)
    {
        if (!Game.needEmbellishmentPackageMenuRebuild)
        {
            int index = this.hairAddonIDfromPanel(addonPanel);
            if (this.PC().data.hairAddons[index].style != ((UnityEngine.Component)addonPanel.transform.Find("ddHairstyles")).GetComponent<Dropdown>().options[((UnityEngine.Component)addonPanel.transform.Find("ddHairstyles")).GetComponent<Dropdown>().value].text)
            {
                this.PC().data.hairAddons[index].style = ((UnityEngine.Component)addonPanel.transform.Find("ddHairstyles")).GetComponent<Dropdown>().options[((UnityEngine.Component)addonPanel.transform.Find("ddHairstyles")).GetComponent<Dropdown>().value].text;
                this.updateHairVariantMenus();
                this.characterRebuildDelay = 2;
            }
            if (this.PC().data.hairAddons[index].variant != ((UnityEngine.Component)addonPanel.transform.Find("ddVariant")).GetComponent<Dropdown>().value)
            {
                this.PC().data.hairAddons[index].variant = ((UnityEngine.Component)addonPanel.transform.Find("ddVariant")).GetComponent<Dropdown>().value;
                this.characterRebuildDelay = 2;
            }
        }
    }

    public void hairAddonColorClicked(GameObject addonPanel, int c)
    {
        int index = this.hairAddonIDfromPanel(addonPanel);
        this.PC().data.hairAddons[index].color = c;
        this.hairstyleChanged();
        Game.needEmbellishmentPackageMenuRebuild = true;
        this.characterRebuildDelay = 2;
    }

    public void hairColorClicked(int c)
    {
        this.PC().data.hairColor = c;
        this.hairstyleChanged();
        Game.needEmbellishmentPackageMenuRebuild = true;
        this.characterRebuildDelay = 2;
    }

    public void updateHairVariantMenus()
    {
        if (this.hairstyles.IndexOf(this.PC().data.hairstyle) != -1)
        {
            int num = this.hairstyleVariants[this.hairstyles.IndexOf(this.PC().data.hairstyle)];
            if (this.PC().data.hairvariant >= num)
            {
                this.PC().data.hairvariant = 0;
            }
            if (num != this.lastHairstyleVariantMax)
            {
                List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
                for (int i = 0; i < num; i++)
                {
                    Dropdown.OptionData optionData = new Dropdown.OptionData();
                    optionData.text = i + 1 + string.Empty;
                    list.Add(optionData);
                }
                ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                    .Find("EmbellishmentLayers")
                    .Find("EmbellishmentMenu")
                    .Find("hairMenu")
                    .Find("LayerStuff")
                    .Find("ddVariant")).GetComponent<Dropdown>().options = list;
                this.lastHairstyleVariantMax = num;
            }
        }
        for (int j = 0; j < this.PC().data.hairAddons.Count; j++)
        {
            if (this.hairstyles.IndexOf(this.PC().data.hairAddons[j].style) != -1)
            {
                int num2 = this.hairstyleVariants[this.hairstyles.IndexOf(this.PC().data.hairAddons[j].style)];
                if (this.PC().data.hairAddons[j].variant >= num2)
                {
                    this.PC().data.hairAddons[j].variant = 0;
                }
                if (num2 != this.lastAddonHairstyleVariantMax[j])
                {
                    List<Dropdown.OptionData> list2 = new List<Dropdown.OptionData>();
                    for (int k = 0; k < num2; k++)
                    {
                        Dropdown.OptionData optionData2 = new Dropdown.OptionData();
                        optionData2.text = k + 1 + string.Empty;
                        list2.Add(optionData2);
                    }
                    ((UnityEngine.Component)this.hairAddonPanels[j].transform.Find("ddVariant")).GetComponent<Dropdown>().options = list2;
                    this.lastAddonHairstyleVariantMax[j] = num2;
                }
                ((UnityEngine.Component)this.hairAddonPanels[j].transform.Find("ddVariant")).GetComponent<Dropdown>().value = this.PC().data.hairAddons[j].variant;
            }
        }
    }

    public void hairstyleChanged()
    {
        if (this.PC().data.hairstyle != ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("hairMenu")
            .Find("LayerStuff")
            .Find("ddHairstyles")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("hairMenu")
            .Find("LayerStuff")
            .Find("ddHairstyles")).GetComponent<Dropdown>().value].text)
        {
            this.PC().data.hairstyle = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                .Find("EmbellishmentLayers")
                .Find("EmbellishmentMenu")
                .Find("hairMenu")
                .Find("LayerStuff")
                .Find("ddHairstyles")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                .Find("EmbellishmentLayers")
                .Find("EmbellishmentMenu")
                .Find("hairMenu")
                .Find("LayerStuff")
                .Find("ddHairstyles")).GetComponent<Dropdown>().value].text;
            this.updateHairVariantMenus();
            this.characterRebuildDelay = 2;
        }
        if (this.PC().data.hairvariant != ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("hairMenu")
            .Find("LayerStuff")
            .Find("ddVariant")).GetComponent<Dropdown>().value)
        {
            this.PC().data.hairvariant = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
                .Find("EmbellishmentLayers")
                .Find("EmbellishmentMenu")
                .Find("hairMenu")
                .Find("LayerStuff")
                .Find("ddVariant")).GetComponent<Dropdown>().value;
            this.characterRebuildDelay = 2;
        }
    }

    public void fetchHairstyles()
    {
        this.hairstyles = new List<string>();
        this.hairstyleVariants = new List<int>();
        string text = "anthro" + Game.PathDirectorySeparatorChar + string.Empty;
        if (this.PC().data.headType == "human")
        {
            text = "human" + Game.PathDirectorySeparatorChar + string.Empty;
        }
        new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "hairstyles" + Game.PathDirectorySeparatorChar + string.Empty + text).Directory.Create();
        string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "hairstyles" + Game.PathDirectorySeparatorChar + string.Empty + text);
        for (int i = 0; i < files.Length; i++)
        {
            if (File.Exists(files[i]))
            {
                string text2 = files[i].Split(Game.PathDirectorySeparatorChar)[files[i].Split(Game.PathDirectorySeparatorChar).Length - 1];
                string item = text2.Split('_')[0];
                int num = int.Parse(text2.Split('_')[1]);
                if (this.hairstyles.IndexOf(item) == -1)
                {
                    this.hairstyles.Add(item);
                    this.hairstyleVariants.Add(1);
                }
                if (num + 1 > this.hairstyleVariants[this.hairstyles.IndexOf(item)])
                {
                    this.hairstyleVariants[this.hairstyles.IndexOf(item)] = num + 1;
                }
            }
        }
    }

    public void processEmbellishmentMenu()
    {
        if ((UnityEngine.Object)this.embellishmentMenu == (UnityEngine.Object)null)
        {
            this.embellishmentMenu = this.UI.transform.Find("EmbellishmentSelectionMenu").gameObject;
        }
        this.embellishmentMenu.SetActive(this.embellishmentMenuOpen && this.customizingCharacter);
        if (this.embellishmentMenuOpen && this.customizingCharacter)
        {
            this.embellishmentMenuWasOpen = true;
            this.colorPickerOpen = false;
            int num = 9;
            bool flag = false;
            if (this.editingEmbellishmentLayer == -1)
            {
                this.editingEmbellishmentLayer = this.PC().data.embellishmentLayers.Count - 1;
                flag = true;
            }
            if (this.needEmbellishmentMenuRebuild)
            {
                EmbellishmentLayer embellishmentLayer = new EmbellishmentLayer();
                embellishmentLayer.utilityLayer = true;
                embellishmentLayer.embellishment = this.embellishmentBrushSetting_embellishment;
                this.PC().data.embellishmentLayers.Add(embellishmentLayer);
                if (flag)
                {
                    this.editingEmbellishmentLayer++;
                }
                for (int num2 = this.embellishmentOptions.Count - 1; num2 >= 0; num2--)
                {
                    UnityEngine.Object.Destroy(this.embellishmentOptions[num2]);
                }
                this.embellishmentOptions = new List<GameObject>();
                this.embellishmentNames = new List<string>();
                this.embellishmentVariants = new List<int>();
                this.embellishmentVariantSelected = new List<int>();
                for (int i = 0; i < Game.allEmbellishments.Length; i++)
                {
                    string item = Game.allEmbellishments[i].Split(new string[1]
                    {

                    }, StringSplitOptions.None)[0];
                    int num3 = -1;
                    if (Game.allEmbellishments[i].Split(new string[1]
                    {

                    }, StringSplitOptions.None).Length == 2)
                    {
                        num3 = int.Parse(Game.allEmbellishments[i].Split(new string[1]
                        {

                        }, StringSplitOptions.None)[1]);
                    }
                    if (this.embellishmentNames.IndexOf(item) == -1)
                    {
                        this.embellishmentNames.Add(item);
                        this.embellishmentVariants.Add(1);
                        this.embellishmentVariantSelected.Add(0);
                    }
                    if (num3 + 1 > this.embellishmentVariants[this.embellishmentNames.IndexOf(item)])
                    {
                        this.embellishmentVariants[this.embellishmentNames.IndexOf(item)] = num3 + 1;
                    }
                }
                if ((UnityEngine.Object)this.embellishmentCardTemplate == (UnityEngine.Object)null)
                {
                    this.embellishmentCardTemplate = this.embellishmentMenu.transform.Find("Card").gameObject;
                }
                this.embellishmentCardTemplate.SetActive(true);
                for (int j = 0; j < this.embellishmentNames.Count; j++)
                {
                    this.embellishmentOptions.Add(UnityEngine.Object.Instantiate(this.embellishmentCardTemplate));
                    this.embellishmentOptions[j].transform.SetParent(this.embellishmentContainer.transform);
                    this.v3 = Vector3.zero;
                    int num4 = j % num;
                    int num5 = Mathf.FloorToInt((float)(j / num));
                    this.v3.x = (float)(132 * num5);
                    this.v3.y = (float)(-36 * num4);
                    this.v3.z = 0f;
                    this.embellishmentOptions[j].transform.localPosition = this.v3;
                    this.embellishmentOptions[j].transform.localScale = Vector3.one;
                    ((UnityEngine.Component)this.embellishmentOptions[j].transform.Find("txtFilename")).GetComponent<Text>().text = this.embellishmentNames[j];
                    string text = this.embellishmentNames[j];
                    bool activeSelf = this.embellishmentBrush.activeSelf;
                    this.embellishmentBrush.SetActive(true);
                    for (int k = 0; k < Game.embellishmentBrushMeshes.Length; k++)
                    {
                        Game.embellishmentBrushMeshes[k].gameObject.SetActive(true);
                    }
                    GameObject gameObject = UnityEngine.Object.Instantiate(GameObject.Find("paintables"));
                    this.embellishmentBrush.SetActive(activeSelf);
                    gameObject.SetActive(true);
                    float num6 = 0f;
                    if (this.embellishmentVariants[j] > 1)
                    {
                        text = text + "_" + (this.embellishmentVariants[j] - 1);
                    }
                    for (int num7 = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>().Length - 1; num7 >= 0; num7--)
                    {
                        if (gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].name == text)
                        {
                            for (int l = 0; l < gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].materials.Length; l++)
                            {
                                gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].materials[l].shader = Shader.Find("Toon/Basic Outline");
                                gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].materials[l].SetColor("_Color", Color.white);
                                gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].materials[l].SetFloat("_Outline", 0.0007f);
                            }
                            Vector3 size = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].localBounds.size;
                            if (size.x > num6)
                            {
                                Vector3 size2 = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].localBounds.size;
                                num6 = size2.x;
                            }
                            Vector3 size3 = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].localBounds.size;
                            if (size3.y > num6)
                            {
                                Vector3 size4 = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].localBounds.size;
                                num6 = size4.y;
                            }
                            Vector3 size5 = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].localBounds.size;
                            if (size5.z > num6)
                            {
                                Vector3 size6 = gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7].localBounds.size;
                                num6 = size6.z;
                            }
                        }
                        else
                        {
                            UnityEngine.Object.Destroy(gameObject.GetComponentsInChildren<SkinnedMeshRenderer>()[num7]);
                        }
                    }
                    gameObject.transform.SetParent(this.embellishmentOptions[j].transform.Find("Model"));
                    gameObject.transform.localScale = Vector3.one * 25f / num6;
                    gameObject.transform.localPosition = Vector3.zero;
                    this.embellishmentOptions[j].GetComponent<SelectableMenuItem>().onClick = this.embellishmentClicked;
                    this.embellishmentOptions[j].GetComponent<SelectableMenuItem>().id = j;
                    this.embellishmentOptions[j].GetComponent<SelectableMenuItem>().max = this.embellishmentVariants[j];
                    if (this.embellishmentVariants[j] > 1)
                    {
                        this.embellishmentOptions[j].transform.Find("VariantBar").gameObject.SetActive(true);
                        List<GameObject> list = new List<GameObject>();
                        list.Add(this.embellishmentOptions[j].transform.Find("VariantBar").Find("BG").Find("Divider")
                            .gameObject);
                        for (int m = 0; m < this.embellishmentVariants[j] - 1; m++)
                        {
                            list.Add(UnityEngine.Object.Instantiate(list[0]));
                        }
                        for (int n = 0; n < list.Count; n++)
                        {
                            list[n].transform.SetParent(this.embellishmentOptions[j].transform.Find("VariantBar").Find("BG"));
                            list[n].transform.localScale = Vector3.one;
                            this.v3 = Vector3.zero;
                            this.v3.y = -2f;
                            this.v3.x = (float)(170 / this.embellishmentVariants[j] * (n + 1));
                            this.v3.z = 0f;
                            list[n].transform.localPosition = this.v3;
                        }
                    }
                    else
                    {
                        this.embellishmentOptions[j].transform.Find("VariantBar").gameObject.SetActive(false);
                    }
                    this.embellishmentVariantSelected[j] = 0;
                    if (this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment.Split(new string[1]
                    {

                    }, StringSplitOptions.None).Length > 1)
                    {
                        this.embellishmentVariantSelected[j] = int.Parse(this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment.Split(new string[1]
                        {

                        }, StringSplitOptions.None)[1]);
                    }
                }
                this.embellishmentCardTemplate.SetActive(false);
                this.needEmbellishmentMenuRebuild = false;
            }
            SelectableMenuManager.animate(this.embellishmentOptions, this.embellishmentContainer, (float)(132 / num), 165f, 132f);
            for (int num8 = 0; num8 < this.embellishmentNames.Count; num8++)
            {
                if (this.embellishmentVariants[num8] > 1)
                {
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("txtVariant")).GetComponent<Text>().text = Localization.getPhrase("VARIANT_NUMBER", string.Empty) + " " + (this.embellishmentVariantSelected[num8] + 1);
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("txtVariantTotal")).GetComponent<Text>().text = Localization.getPhrase("OUT_OF", string.Empty) + " " + this.embellishmentVariants[num8];
                    this.v3 = Vector3.zero;
                    this.v3.y = -12f;
                    this.v3.x = (float)(170 / this.embellishmentVariants[num8]) * ((float)this.embellishmentVariantSelected[num8] + 0.5f);
                    this.embellishmentOptions[num8].transform.Find("VariantBar").Find("BG").Find("Cursor")
                        .localPosition = this.v3;
                }
                else
                {
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("txtVariant")).GetComponent<Text>().text = string.Empty;
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("txtVariantTotal")).GetComponent<Text>().text = string.Empty;
                }
                bool flag2 = false;
                if ((this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment.Split(new string[1]
                {

                }, StringSplitOptions.None).Length <= 1) ? (this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment == ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("txtFilename")).GetComponent<Text>().text) : (this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment.Split(new string[1]
                {

                }, StringSplitOptions.None)[0] == ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("txtFilename")).GetComponent<Text>().text))
                {
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("BG")).GetComponent<Image>().color = Color.white;
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("VariantBar").Find("BG")).GetComponent<Image>().color = Color.white;
                }
                else
                {
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("BG")).GetComponent<Image>().color = Game.fadedCol;
                    ((UnityEngine.Component)this.embellishmentOptions[num8].transform.Find("VariantBar").Find("BG")).GetComponent<Image>().color = Game.fadedCol;
                }
            }
        }
        else
        {
            if (this.embellishmentMenuWasOpen && this.customizingCharacter)
            {
                this.characterRebuildDelay = 2;
            }
            this.embellishmentMenuWasOpen = false;
            this.needEmbellishmentMenuRebuild = true;
        }
    }

    public void embellishmentCardVariantBarClicked(SelectableMenuItem menuItem, Image bar)
    {
        if (this.editingEmbellishmentLayer > -1)
        {
            Vector3 vector = this.uiCam.GetComponent<Camera>().WorldToScreenPoint(bar.transform.position);
            float x = vector.x;
            Vector3 vector2 = this.uiCam.GetComponent<Camera>().WorldToScreenPoint(bar.transform.parent.Find("barEnd").position);
            float x2 = vector2.x;
            Vector3 mousePosition = Input.mousePosition;
            float num = (mousePosition.x - x) / (x2 - x);
            int num2 = menuItem.val = Mathf.RoundToInt(num * (float)(menuItem.max - 1));
            this.processEmbellishmentClick(menuItem, true);
        }
        this.characterRebuildDelay = 2;
    }

    public bool gotoEmbellishmentColorEditor(MenuOption menuItem)
    {
        this.customizeCharacterPage = 31;
        ((UnityEngine.Component)this.World.transform.Find("Connector").Find("Showers").Find("MiddleShower")).GetComponent<Shower>().slowmo = false;
        return false;
    }

    public bool openDecalMenu(MenuOption menuItem)
    {
        this.customizeCharacterPage = 51;
        return false;
    }

    public bool gotoTailFurEditor(MenuOption menuItem)
    {
        this.customizeCharacterPage = 21;
        return false;
    }

    public bool insertEmbellishmentPackage(MenuOption menuItem)
    {
        string text = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("ddPackages")).GetComponent<Dropdown>().options[((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("ddPackages")).GetComponent<Dropdown>().value].text;
        int index = -1;
        int num = 0;
        while (num < EmbellishmentPackageManager.packages.Count)
        {
            if (!(EmbellishmentPackageManager.packages[num].name == text))
            {
                num++;
                continue;
            }
            index = num;
            break;
        }
        List<EmbellishmentLayer> embellishments = EmbellishmentPackageManager.packages[index].embellishments;
        for (int i = 0; i < embellishments.Count; i++)
        {
            this.PC().data.embellishmentLayers.Add(embellishments[i]);
            this.characterRebuildDelay = 2;
            this.popup("PACKAGE_ADDED", false, false);
        }
        return false;
    }

    public bool makeEmbellishmentPackage(MenuOption menuItem)
    {
        int num = 0;
        this.newEmbellishmentPackage = new EmbellishmentPackage();
        this.newEmbellishmentPackage.name = ((UnityEngine.Component)this.UI.transform.Find("CharacterCustomizationUI").Find("Embellishments").Find("EmbellishmentLayerMask")
            .Find("EmbellishmentLayers")
            .Find("EmbellishmentMenu")
            .Find("txtPackage")).GetComponent<InputField>().text;
        if (this.newEmbellishmentPackage.name.Length < 1)
        {
            this.newEmbellishmentPackage.name = "New Package";
        }
        for (int i = 0; i < this.embellishmentLayers.Count; i++)
        {
            if (((UnityEngine.Component)this.embellishmentLayers[i].transform.Find("LayerStuff").Find("chk")).GetComponent<Toggle>().isOn)
            {
                num++;
                if (this.newEmbellishmentPackage.requiredParts.IndexOf(this.PC().data.embellishmentLayers[i].partName) == -1)
                {
                    this.newEmbellishmentPackage.requiredParts.Add(this.PC().data.embellishmentLayers[i].partName);
                }
                this.newEmbellishmentPackage.embellishments.Add(this.PC().data.embellishmentLayers[i]);
            }
        }
        if (num < 1)
        {
            this.popup("EMBELLISHMENT_PACKAGE_INSTRUCTIONS", false, false);
        }
        else
        {
            EmbellishmentPackageManager.createPackage(this.newEmbellishmentPackage, true);
            this.popup("EMBELLISHMENT_PACKAGE_SAVED", false, false);
        }
        return false;
    }

    public bool copyEmbellishmentToBrush(MenuOption menuItem)
    {
        int num = -1;
        for (int i = 0; i < this.embellishmentLayers.Count; i++)
        {
            if (((UnityEngine.Component)this.embellishmentLayers[i].transform.Find("LayerStuff").Find("chk")).GetComponent<Toggle>().isOn)
            {
                if (num != -1)
                {
                    this.popup("EMBELLISHMENT_TO_BRUSH_INSTRUCTIONS", false, false);
                    return false;
                }
                num = i;
            }
        }
        if (num == -1)
        {
            this.popup("EMBELLISHMENT_TO_BRUSH_INSTRUCTIONS", false, false);
            return false;
        }
        this.embellishmentBrushSetting_embellishment = this.PC().data.embellishmentLayers[num].embellishment;
        this.embellishmentBrushSetting_bend = this.PC().data.embellishmentLayers[num].bend;
        this.embellishmentBrushSetting_turn = this.PC().data.embellishmentLayers[num].turn;
        this.embellishmentBrushSetting_twist = this.PC().data.embellishmentLayers[num].twist;
        this.embellishmentBrushSetting_size = this.PC().data.embellishmentLayers[num].size;
        this.embellishmentBrushSetting_mirror = this.PC().data.embellishmentLayers[num].mirror;
        this.embellishmentBrushSetting_color = this.PC().data.embellishmentLayers[num].color;
        ((UnityEngine.Component)this.embellishmentLayers[this.embellishmentLayers.Count - 1].transform.Find("LayerStuff").Find("sldSize")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_size;
        ((UnityEngine.Component)this.embellishmentLayers[this.embellishmentLayers.Count - 1].transform.Find("LayerStuff").Find("sldBend")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_bend;
        ((UnityEngine.Component)this.embellishmentLayers[this.embellishmentLayers.Count - 1].transform.Find("LayerStuff").Find("sldTurn")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_turn;
        ((UnityEngine.Component)this.embellishmentLayers[this.embellishmentLayers.Count - 1].transform.Find("LayerStuff").Find("sldTwist")).GetComponent<UnityEngine.UI.Slider>().value = this.embellishmentBrushSetting_twist;
        for (int j = 0; j < this.embellishmentLayers.Count; j++)
        {
            ((UnityEngine.Component)this.embellishmentLayers[j].transform.Find("LayerStuff").Find("chk")).GetComponent<Toggle>().isOn = false;
        }
        return false;
    }

    public bool deleteSelectedEmbellishments(MenuOption menuItem)
    {
        for (int num = this.embellishmentLayers.Count - 1; num >= 0; num--)
        {
            if (((UnityEngine.Component)this.embellishmentLayers[num].transform.Find("LayerStuff").Find("chk")).GetComponent<Toggle>().isOn)
            {
                Game.gameInstance.PC().data.embellishmentLayers.RemoveAt(num);
            }
        }
        Game.gameInstance.characterRebuildDelay = 1;
        return false;
    }

    public bool embellishmentClicked(SelectableMenuItem menuItem)
    {
        this.processEmbellishmentClick(menuItem, false);
        return false;
    }

    public bool processEmbellishmentClick(SelectableMenuItem menuItem, bool becauseVariantBarClicked = false)
    {
        if (this.editingEmbellishmentLayer > -1)
        {
            string text = ((UnityEngine.Component)menuItem.transform.Find("txtFilename")).GetComponent<Text>().text;
            string[] array = this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment.Split(new string[1]
            {

            }, StringSplitOptions.None);
            if (array[0] == text.Split(new string[0], StringSplitOptions.None)[0])
            {
                if (!becauseVariantBarClicked)
                {
                    menuItem.val = 0;
                    if (array.Length > 1)
                    {
                        menuItem.val = int.Parse(array[1]);
                    }
                    menuItem.val++;
                    if (menuItem.val >= menuItem.max)
                    {
                        menuItem.val = 0;
                    }
                }
                text = ((UnityEngine.Component)menuItem.transform.Find("txtFilename")).GetComponent<Text>().text;
                if (menuItem.max > 1)
                {
                    text = text + "_" + menuItem.val;
                }
                this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment = text;
                this.embellishmentVariantSelected[menuItem.id] = menuItem.val;
            }
            else
            {
                if (!becauseVariantBarClicked)
                {
                    menuItem.val = this.embellishmentVariantSelected[menuItem.id];
                }
                if (menuItem.val >= menuItem.max)
                {
                    menuItem.val = 0;
                }
                if (menuItem.max > 1)
                {
                    text = text + "_" + menuItem.val;
                }
                this.PC().data.embellishmentLayers[this.editingEmbellishmentLayer].embellishment = text;
                this.embellishmentVariantSelected[menuItem.id] = menuItem.val;
            }
            this.characterRebuildDelay = 2;
        }
        return true;
    }

    public void closeEmbellishmentMenu()
    {
        for (int num = this.PC().data.embellishmentLayers.Count - 1; num >= 0; num--)
        {
            if (this.PC().data.embellishmentLayers[num].utilityLayer)
            {
                this.embellishmentBrushSetting_embellishment = this.PC().data.embellishmentLayers[num].embellishment;
                this.PC().data.embellishmentLayers.RemoveAt(num);
            }
        }
        this.embellishmentMenuOpen = false;
    }

    public bool colorPicked(Color col)
    {
        if ((UnityEngine.Object)this.textureLayerContainer != (UnityEngine.Object)null && this.textureLayerContainer.activeInHierarchy)
        {
            this.characterRedrawDelay = 15;
        }
        return true;
    }

    public void updateTexturePatternSearch()
    {
        this.searchPhrase = ((UnityEngine.Component)this.texturePatternMaskMenu.transform.Find("txtSearch")).GetComponent<InputField>().text;
        this.searchCriteriaUpdated = true;
    }

    public void processTexturePatternMenu()
    {
        this.texturePatternMaskMenu.SetActive(this.texturePatternMenuOpen && this.customizingCharacter);
        if (this.texturePatternMenuOpen && this.customizingCharacter)
        {
            this.texturePatternMenuWasOpen = true;
            this.colorPickerOpen = false;
            int num = 9;
            if (this.needTexturePatternMenuRebuild)
            {
                for (int num2 = this.texturePatternOptions.Count - 1; num2 >= 0; num2--)
                {
                    UnityEngine.Object.Destroy(this.texturePatternOptions[num2]);
                }
                this.texturePatternOptions = new List<GameObject>();
                this.patternNames = new List<string>();
                this.patternVariants = new List<int>();
                this.patternVariantSelected = new List<int>();
                new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
                string[] files = Directory.GetFiles(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterTextures" + Game.PathDirectorySeparatorChar + string.Empty, "*.png");
                List<string> list = files.ToList();
                for (int num3 = list.Count - 1; num3 >= 0; num3--)
                {
                    string[] requiredParts = PatternIcons.getRequiredParts(list[num3].Split(Game.PathDirectorySeparatorChar)[list[num3].Split(Game.PathDirectorySeparatorChar).Length - 1].Split(new string[1]
                    {

                    }, StringSplitOptions.None)[0]);
                    bool flag = true;
                    for (int i = 0; i < requiredParts.Length; i++)
                    {
                        if (!(requiredParts[i] == string.Empty))
                        {
                            bool flag2 = false;
                            for (int j = 0; j < this.PC().parts.Count; j++)
                            {
                                if (this.PC().parts[j].name == requiredParts[i])
                                {
                                    flag2 = true;
                                }
                            }
                            if (!flag2)
                            {
                                flag = false;
                            }
                        }
                    }
                    if (!flag)
                    {
                        list.RemoveAt(num3);
                    }
                }
                files = list.ToArray();
                for (int k = 0; k < files.Length; k++)
                {
                    files[k] = files[k].Split(Game.PathDirectorySeparatorChar)[files[k].Split(Game.PathDirectorySeparatorChar).Length - 1];
                    string item = files[k].Split(new string[1]
                    {

                    }, StringSplitOptions.None)[0];
                    string b = "entirebody";
                    if (this.editingTextureLayerMask != -1)
                    {
                        b = "color";
                    }
                    if (!(item == "base") && !(item == "basecolor") && !(item == b) && !(item == "nosemask") && !(item == "penismask"))
                    {
                        int num4 = -1;
                        if (files[k].Split(new string[1]
                        {

                        }, StringSplitOptions.None).Length == 3)
                        {
                            try
                            {
                                num4 = int.Parse(files[k].Split(new string[1]
                                {

                                }, StringSplitOptions.None)[1]);
                            }
                            catch
                            {
                                UnityEngine.Debug.Log("BAD TEXTURE NAME FORMAT: " + files[k]);
                            }
                        }
                        if (this.patternNames.IndexOf(item) == -1)
                        {
                            this.patternNames.Add(item);
                            this.patternVariants.Add(1);
                            this.patternVariantSelected.Add(0);
                        }
                        if (num4 + 1 > this.patternVariants[this.patternNames.IndexOf(item)])
                        {
                            this.patternVariants[this.patternNames.IndexOf(item)] = num4 + 1;
                        }
                    }
                }
                if ((UnityEngine.Object)this.patternCardTemplate == (UnityEngine.Object)null)
                {
                    this.patternCardTemplate = this.texturePatternMaskMenu.transform.Find("Card").gameObject;
                }
                this.patternCardTemplate.SetActive(true);
                for (int l = 0; l < this.patternNames.Count; l++)
                {
                    this.texturePatternOptions.Add(UnityEngine.Object.Instantiate(this.patternCardTemplate));
                    this.texturePatternOptions[l].transform.SetParent(this.texturePatternContainer.transform);
                    this.v3 = Vector3.zero;
                    int num5 = l % num;
                    int num6 = Mathf.FloorToInt((float)(l / num));
                    this.v3.x = (float)(132 * num6);
                    this.v3.y = (float)(-36 * num5);
                    this.v3.z = 0f;
                    this.texturePatternOptions[l].transform.localPosition = this.v3;
                    this.texturePatternOptions[l].transform.localScale = Vector3.one;
                    ((UnityEngine.Component)this.texturePatternOptions[l].transform.Find("txtFilename")).GetComponent<Text>().text = this.patternNames[l];
                    Image[] componentsInChildren = this.texturePatternOptions[l].GetComponentsInChildren<Image>();
                    for (int m = 0; m < componentsInChildren.Length; m++)
                    {
                        if (componentsInChildren[m].name.IndexOf("Icon_") != -1)
                        {
                            if (componentsInChildren[m].name == "Icon_" + PatternIcons.getIcon(this.patternNames[l]))
                            {
                                componentsInChildren[m].gameObject.SetActive(true);
                            }
                            else
                            {
                                componentsInChildren[m].gameObject.SetActive(false);
                            }
                        }
                    }
                    this.texturePatternOptions[l].GetComponent<SelectableMenuItem>().onClick = this.patternClicked;
                    this.texturePatternOptions[l].GetComponent<SelectableMenuItem>().id = l;
                    this.texturePatternOptions[l].GetComponent<SelectableMenuItem>().max = this.patternVariants[l];
                    if (this.patternVariants[l] > 1)
                    {
                        this.texturePatternOptions[l].transform.Find("VariantBar").gameObject.SetActive(true);
                        List<GameObject> list2 = new List<GameObject>();
                        list2.Add(this.texturePatternOptions[l].transform.Find("VariantBar").Find("BG").Find("Divider")
                            .gameObject);
                        for (int n = 0; n < this.patternVariants[l] - 1; n++)
                        {
                            list2.Add(UnityEngine.Object.Instantiate(list2[0]));
                        }
                        for (int num7 = 0; num7 < list2.Count; num7++)
                        {
                            list2[num7].transform.SetParent(this.texturePatternOptions[l].transform.Find("VariantBar").Find("BG"));
                            list2[num7].transform.localScale = Vector3.one;
                            this.v3 = Vector3.zero;
                            this.v3.y = -2f;
                            this.v3.x = (float)(170 / this.patternVariants[l] * (num7 + 1));
                            this.v3.z = 0f;
                            list2[num7].transform.localPosition = this.v3;
                        }
                    }
                    else
                    {
                        this.texturePatternOptions[l].transform.Find("VariantBar").gameObject.SetActive(false);
                    }
                    this.patternVariantSelected[l] = 0;
                    if (this.editingTextureLayerMask == -1)
                    {
                        if (this.PC().data.textureLayers[this.editingTextureLayer - 1].texture.Split(new string[1]
                        {

                        }, StringSplitOptions.None).Length > 1)
                        {
                            this.patternVariantSelected[l] = int.Parse(this.PC().data.textureLayers[this.editingTextureLayer - 1].texture.Split(new string[1]
                            {

                            }, StringSplitOptions.None)[1]);
                        }
                    }
                    else if (this.PC().data.textureLayers[this.editingTextureLayer - 1].masks[this.editingTextureLayerMask].texture.Split(new string[1]
                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                "_"
                    }, StringSplitOptions.None).Length > 1)
                    {
                        this.patternVariantSelected[l] = int.Parse(this.PC().data.textureLayers[this.editingTextureLayer - 1].texture.Split(new string[1]
                        {

                        }, StringSplitOptions.None)[1]);
                    }
                }
                this.patternCardTemplate.SetActive(false);
                this.needTexturePatternMenuRebuild = false;
            }
            SelectableMenuManager.animate(this.texturePatternOptions, this.texturePatternContainer, (float)(132 / num), 165f, 132f);
            for (int num8 = 0; num8 < this.patternNames.Count; num8++)
            {
                if (this.searchCriteriaUpdated)
                {
                    float num9 = 0f;
                    string[] keywords = PatternIcons.getKeywords(((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtFilename")).GetComponent<Text>().text);
                    for (int num10 = 0; num10 < keywords.Length; num10++)
                    {
                        int length = keywords[num10].Length;
                        if (this.searchPhrase.Length < length)
                        {
                            length = this.searchPhrase.Length;
                        }
                        float num11 = 1f;
                        for (int num12 = 0; num12 < length; num12++)
                        {
                            if (this.searchPhrase[num12] == keywords[num10][num12])
                            {
                                num9 += 0.02f * num11;
                                num11 += 1f;
                            }
                            else
                            {
                                num11 = 1f;
                            }
                        }
                        if (keywords[num10].Trim().ToLower() == this.searchPhrase || keywords[num10].Trim().ToLower() == this.searchPhrase + "s" || keywords[num10].Trim().ToLower() + "s" == this.searchPhrase)
                        {
                            num9 += 1f;
                        }
                    }
                    this.texturePatternOptions[num8].GetComponent<SelectableMenuItem>().highlightAmount = Game.cap(num9, 0f, 1f);
                }
                if (this.patternVariants[num8] > 1)
                {
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtVariant")).GetComponent<Text>().text = Localization.getPhrase("VARIANT_NUMBER", string.Empty) + " " + (this.patternVariantSelected[num8] + 1);
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtVariantTotal")).GetComponent<Text>().text = Localization.getPhrase("OUT_OF", string.Empty) + " " + this.patternVariants[num8];
                    this.v3 = Vector3.zero;
                    this.v3.y = -12f;
                    this.v3.x = (float)(170 / this.patternVariants[num8]) * ((float)this.patternVariantSelected[num8] + 0.5f);
                    this.texturePatternOptions[num8].transform.Find("VariantBar").Find("BG").Find("Cursor")
                        .localPosition = this.v3;
                }
                else
                {
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtVariant")).GetComponent<Text>().text = string.Empty;
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtVariantTotal")).GetComponent<Text>().text = string.Empty;
                }
                bool flag3 = this.PC().data.textureLayers[this.editingTextureLayer - 1].texture.Split(new string[1]
                {

                }, StringSplitOptions.None)[0] == ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtFilename")).GetComponent<Text>().text;
                if (this.editingTextureLayerMask != -1)
                {
                    flag3 = (this.PC().data.textureLayers[this.editingTextureLayer - 1].masks[this.editingTextureLayerMask].texture.Split(new string[1]
                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    "_"
                    }, StringSplitOptions.None)[0] == ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("txtFilename")).GetComponent<Text>().text);
                }
                Image[] componentsInChildren2 = ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("Preview")).GetComponentsInChildren<Image>();
                if (flag3)
                {
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("BG")).GetComponent<Image>().color = Color.white;
                    for (int num13 = 0; num13 < componentsInChildren2.Length; num13++)
                    {
                        componentsInChildren2[num13].color = Color.white;
                    }
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("VariantBar").Find("BG")).GetComponent<Image>().color = Color.white;
                }
                else
                {
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("BG")).GetComponent<Image>().color = Game.fadedCol;
                    for (int num14 = 0; num14 < componentsInChildren2.Length; num14++)
                    {
                        componentsInChildren2[num14].color = Game.fadedCol;
                    }
                    ((UnityEngine.Component)this.texturePatternOptions[num8].transform.Find("VariantBar").Find("BG")).GetComponent<Image>().color = Game.fadedCol;
                }
            }
            this.searchCriteriaUpdated = false;
        }
        else
        {
            if (this.texturePatternMenuWasOpen && this.customizingCharacter)
            {
                for (int num15 = 0; num15 < this.PC().data.textureLayers.Count; num15++)
                {
                    if (this.PC().data.textureLayers[num15].texture == "color")
                    {
                        this.PC().data.textureLayers.RemoveAt(num15);
                    }
                }
                this.characterRedrawDelay = 2;
            }
            this.texturePatternMenuWasOpen = false;
            this.needTexturePatternMenuRebuild = true;
        }
    }

    public void patternCardVariantBarClicked(SelectableMenuItem menuItem, Image bar)
    {
        if (this.editingTextureLayer > 0)
        {
            Vector3 vector = this.uiCam.GetComponent<Camera>().WorldToScreenPoint(bar.transform.position);
            float x = vector.x;
            Vector3 vector2 = this.uiCam.GetComponent<Camera>().WorldToScreenPoint(bar.transform.parent.Find("barEnd").position);
            float x2 = vector2.x;
            Vector3 mousePosition = Input.mousePosition;
            float num = (mousePosition.x - x) / (x2 - x);
            int num2 = menuItem.val = Mathf.RoundToInt(num * (float)(menuItem.max - 1));
            this.processPatternClick(menuItem, true);
        }
        this.characterRedrawDelay = 2;
    }

    public bool patternClicked(SelectableMenuItem menuItem)
    {
        this.processPatternClick(menuItem, false);
        return false;
    }

    public bool processPatternClick(SelectableMenuItem menuItem, bool becauseVariantBarClicked = false)
    {
        if (this.editingTextureLayer > 0)
        {
            string text = ((UnityEngine.Component)menuItem.transform.Find("txtFilename")).GetComponent<Text>().text;
            string[] array = this.PC().data.textureLayers[this.editingTextureLayer - 1].texture.Split(new string[1]
            {

            }, StringSplitOptions.None);
            if (this.editingTextureLayerMask != -1)
            {
                array = this.PC().data.textureLayers[this.editingTextureLayer - 1].masks[this.editingTextureLayerMask].texture.Split(new string[1]
                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                "_"
                }, StringSplitOptions.None);
            }
            if (array[0] == text.Split(new string[0], StringSplitOptions.None)[0])
            {
                if (!becauseVariantBarClicked)
                {
                    menuItem.val = 0;
                    if (array.Length > 1)
                    {
                        menuItem.val = int.Parse(array[1]);
                    }
                    menuItem.val++;
                    if (menuItem.val == menuItem.max)
                    {
                        menuItem.val = 0;
                    }
                }
                text = ((UnityEngine.Component)menuItem.transform.Find("txtFilename")).GetComponent<Text>().text;
                if (menuItem.max > 1)
                {
                    text = text + "_" + menuItem.val;
                }
                if (this.editingTextureLayerMask == -1)
                {
                    this.PC().data.textureLayers[this.editingTextureLayer - 1].texture = text;
                }
                else
                {
                    this.PC().data.textureLayers[this.editingTextureLayer - 1].masks[this.editingTextureLayerMask].texture = text;
                }
                this.patternVariantSelected[menuItem.id] = menuItem.val;
            }
            else
            {
                if (!becauseVariantBarClicked)
                {
                    menuItem.val = this.patternVariantSelected[menuItem.id];
                }
                if (menuItem.max > 1)
                {
                    text = text + "_" + menuItem.val;
                }
                if (this.editingTextureLayerMask == -1)
                {
                    this.PC().data.textureLayers[this.editingTextureLayer - 1].texture = text;
                }
                else
                {
                    this.PC().data.textureLayers[this.editingTextureLayer - 1].masks[this.editingTextureLayerMask].texture = text;
                }
                this.patternVariantSelected[menuItem.id] = menuItem.val;
            }
        }
        this.characterRedrawDelay = 2;
        return true;
    }

    public void closePatternMenu()
    {
        this.texturePatternMenuOpen = false;
    }

    public void processTextureEditor()
    {
        if ((UnityEngine.Object)this.textureLayerContainer == (UnityEngine.Object)null)
        {
            this.textureLayerContainer = this.UI.transform.Find("CharacterCustomizationUI").Find("ColorAndMarkings").Find("TextureLayerMask")
                .Find("TextureLayers")
                .gameObject;
            this.texturePatternContainer = this.UI.transform.Find("TexturePatternSelectionMenu").Find("Patterns").gameObject;
            this.textureLayerTemplate = this.textureLayerContainer.transform.Find("TextureLayer").gameObject;
            this.textureLayerTemplate.SetActive(false);
        }
        CharacterData data = this.PC().data;
        int num = 2 + data.textureLayers.Count;
        while (this.textureLayers.Count != num)
        {
            if (num > this.textureLayers.Count)
            {
                this.textureLayerTemplate.SetActive(true);
                GameObject gameObject = UnityEngine.Object.Instantiate(this.textureLayerTemplate);
                this.v3 = Vector3.zero;
                this.v3.y = (float)(70 * this.textureLayers.Count);
                gameObject.transform.SetParent(this.textureLayerContainer.transform);
                gameObject.transform.localPosition = this.v3;
                this.v3 = Vector3.one;
                gameObject.transform.localScale = this.v3;
                this.textureLayers.Add(gameObject);
                this.textureLayerTemplate.SetActive(false);
                this.editingTextureLayer = -1;
                this.colorPickerOpen = false;
            }
            else
            {
                int index = this.textureLayers.Count - 1;
                UnityEngine.Object.Destroy(this.textureLayers[index]);
                this.textureLayers.RemoveAt(index);
            }
            for (int i = 0; i < this.textureLayers.Count; i++)
            {
                this.textureLayers[i].GetComponent<TextureLayerUI>().isLayer = (i >= 1 && i < this.textureLayers.Count - 1);
                this.textureLayers[i].GetComponent<TextureLayerUI>().id = i;
            }
        }
        this.v3 = this.textureLayerContainer.transform.localPosition;
        float num2 = (float)(num * 70 - 350);
        if (num2 < 0f)
        {
            num2 = 0f;
        }
        if (this.mX < 0.5f)
        {
            float num3 = this.textureEditorScroll;
            Vector2 mouseScrollDelta = Input.mouseScrollDelta;
            this.textureEditorScroll = num3 + mouseScrollDelta.y * 70f;
        }
        if (this.textureEditorScroll < 0f)
        {
            this.textureEditorScroll = 0f;
        }
        if (this.textureEditorScroll > num2)
        {
            this.textureEditorScroll = num2;
        }
        this.v3.y += (-325f - this.textureEditorScroll - this.v3.y) * 11f * Time.deltaTime;
        this.textureLayerContainer.transform.localPosition = this.v3;
        for (int j = 0; j < num; j++)
        {
            Transform transform = this.textureLayers[j].transform;
            if (j == 0)
            {
                transform.Find("hdBaseColor").gameObject.SetActive(true);
                if (this.colorPickerOpen && (j == this.editingTextureLayer || (data.baseColor == this.originalEditColor && ((UnityEngine.Component)this.colorPicker.transform.Find("chkPalette")).GetComponent<Toggle>().isOn)) && !this.texturePatternMenuOpen)
                {
                    data.baseColor = this.colorPicker.GetComponent<ColorPicker>().color;
                }
                ((UnityEngine.Component)transform.Find("cmdColor")).GetComponent<Image>().color = data.baseColor;
            }
            else
            {
                transform.Find("hdBaseColor").gameObject.SetActive(false);
            }
            if (j > 0 && j < num - 1)
            {
                int index2 = j - 1;
                transform.Find("cmdUp").gameObject.SetActive(!Game.gameInstance.PC().data.textureLayers[index2].required);
                transform.Find("LayerStuff").Find("sldOpacity").gameObject.SetActive(!Game.gameInstance.PC().data.textureLayers[index2].required);
                transform.Find("cmdDown").gameObject.SetActive(!Game.gameInstance.PC().data.textureLayers[index2].required);
                if (this.colorPickerOpen && (j == this.editingTextureLayer || (data.textureLayers[index2].color == this.originalEditColor && ((UnityEngine.Component)this.colorPicker.transform.Find("chkPalette")).GetComponent<Toggle>().isOn)) && !this.texturePatternMenuOpen)
                {
                    data.textureLayers[index2].color = this.colorPicker.GetComponent<ColorPicker>().color;
                }
                ((UnityEngine.Component)transform.Find("cmdColor")).GetComponent<Image>().color = data.textureLayers[index2].color;
                transform.Find("cmdDelete").gameObject.SetActive(!Game.gameInstance.PC().data.textureLayers[index2].required);
                transform.Find("lockIndicator").gameObject.SetActive(Game.gameInstance.PC().data.textureLayers[index2].required);
                transform.Find("LayerStuff").gameObject.SetActive(true);
                if (data.textureLayers[index2].isDecal)
                {
                    ((UnityEngine.Component)transform.Find("LayerStuff").Find("txtPattern")).GetComponent<Text>().text = "decal";
                }
                else
                {
                    ((UnityEngine.Component)transform.Find("LayerStuff").Find("txtPattern")).GetComponent<Text>().text = data.textureLayers[index2].texture.ToUpper();
                }
            }
            else
            {
                transform.Find("cmdDelete").gameObject.SetActive(false);
                transform.Find("cmdUp").gameObject.SetActive(false);
                transform.Find("cmdDown").gameObject.SetActive(false);
                transform.Find("LayerStuff").gameObject.SetActive(false);
                transform.Find("lockIndicator").gameObject.SetActive(false);
                transform.Find("LayerStuff").Find("sldOpacity").gameObject.SetActive(false);
            }
            if (j == num - 1)
            {
                transform.Find("hdAddMarking").gameObject.SetActive(true);
                transform.Find("addLayer").gameObject.SetActive(true);
                ((UnityEngine.Component)transform.Find("BG")).GetComponent<Image>().color = Game.fadedCol;
                transform.Find("cmdColor").gameObject.SetActive(false);
            }
            else
            {
                transform.Find("hdAddMarking").gameObject.SetActive(false);
                transform.Find("addLayer").gameObject.SetActive(false);
                ((UnityEngine.Component)transform.Find("BG")).GetComponent<Image>().color = Color.white;
                transform.Find("cmdColor").gameObject.SetActive(true);
            }
        }
        this.originalEditColor = this.colorPicker.GetComponent<ColorPicker>().color;
        this.textureLayerContainer.SetActive(!this.texturePatternMenuOpen);
    }

    public void initContextMenu()
    {
        this.contextHotspotCursor = this.UI.transform.Find("ContextMenuInterface").Find("cursor").gameObject;
        this.contextHotspotCursorLine = this.UI.transform.Find("ContextMenuInterface").Find("cursorLine").gameObject;
        for (int i = 0; i < this.contextHotspotPoolSize; i++)
        {
            GameObject gameObject = UnityEngine.Object.Instantiate(this.UI.transform.Find("ContextMenuInterface").Find("hotspots").Find("Hotspot")
                .gameObject);
            gameObject.transform.SetParent(this.UI.transform.Find("ContextMenuInterface").Find("hotspots"));
            gameObject.transform.localScale = Vector3.one;
            gameObject.transform.localRotation = Quaternion.identity;
            gameObject.transform.localPosition = Vector3.zero;
            gameObject.SetActive(false);
            this.contextHotspots.Add(gameObject);
        }
    }

    public void context(string message, Func<bool> function, Vector3 position, bool disableAllOtherContexts = false)
    {
        if (this.hideContextBecauseOfUI && message != this.openDoorMessage)
        {
            return;
        }
        this.v3 = this.worldToScreen(position, false, 3000f);
        if (this.v3.magnitude < this.contextDistFromScreenCenter || disableAllOtherContexts)
        {
            this.contextDistFromScreenCenter = this.v3.magnitude;
            if (disableAllOtherContexts)
            {
                this.contextDistFromScreenCenter = 0f;
            }
            this.contextMessage = message;
            this.contextFunction = function;
            this.hoverContextHotspot = this.nextContextHotspot;
        }
        this.v32 = this.mainCam.transform.InverseTransformPoint(position);
        if (this.v32.z > 0f && this.nextContextHotspot < this.contextHotspotPoolSize)
        {
            this.contextHotspots[this.nextContextHotspot].SetActive(true);
            this.contextHotspots[this.nextContextHotspot].transform.localPosition = this.worldToScreen(position, true, 3000f);
            if (this.nextContextHotspot == this.lastHoverContextHotspot)
            {
                this.v33 = Vector3.one * 2f * (1f + 0.1f * Mathf.Cos(Time.time * 3f)) / (this.v32.magnitude * 0.3f + 1f);
                this.contextHotspotCursorLine.transform.transform.position = (this.contextHotspotCursor.transform.position + this.contextHotspots[this.nextContextHotspot].transform.position) / 2f;
                this.v32.x = (this.contextHotspotCursor.transform.position - this.contextHotspots[this.nextContextHotspot].transform.position).magnitude * 9.91f * 0.7f;
                this.v32.y = 0.05f;
                this.v32.z = 0f;
                this.contextHotspotCursor.transform.gameObject.SetActive(this.v32.x >= 1f);
                this.contextHotspotCursorLine.transform.gameObject.SetActive(this.v32.x >= 1f);
                this.contextHotspotCursorLine.transform.transform.localScale = this.v32;
                this.v32 = Vector3.zero;
                ref Vector3 val = ref this.v32;
                Vector3 position2 = this.contextHotspotCursor.transform.position;
                float y = position2.y;
                Vector3 position3 = this.contextHotspots[this.nextContextHotspot].transform.position;
                float y2 = y - position3.y;
                Vector3 position4 = this.contextHotspotCursor.transform.position;
                float x = position4.x;
                Vector3 position5 = this.contextHotspots[this.nextContextHotspot].transform.position;
                val.z = Mathf.Atan2(y2, x - position5.x) * 180f / 3.1415f;
                this.contextHotspotCursorLine.transform.transform.localEulerAngles = this.v32;
            }
            else
            {
                this.v33 = Vector3.one * (1f + 0.1f * Mathf.Cos(Time.time * 3f)) / (this.v32.magnitude * 0.3f + 1f);
            }
            Transform transform = this.contextHotspots[this.nextContextHotspot].transform;
            transform.localScale += (this.v33 - this.contextHotspots[this.nextContextHotspot].transform.localScale) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
            this.nextContextHotspot++;
        }
    }

    public void processContextMenu()
    {
        if (this.PC() != null)
        {
            this.openDoorMessage = Localization.getPhrase("OPEN_DOOR", string.Empty);
            this.hideContextBecauseOfUI = false;
            if (this.pauseOpen || RacknetMultiplayer.anyRacknetUIopen || this.PC().interactionSubject != null || this.lightingControlPanelOpen || this.inventoryOpen || this.titleOpen || this.anythingLoading || this.popupOpen || this.characterSelectorOpen || this.customizingCharacter || this.preferencesMenuOpen || this.curDialogue != string.Empty || this.shopOpen || this.chemicalSynthesisMenuOpen || (TestingRoom.editingMode && this.contextMessage != this.openDoorMessage))
            {
                this.contextMessage = string.Empty;
                this.hideContextBecauseOfUI = true;
            }
            if (Inventory.data != null && Inventory.getCharVar("tourCompleted") == 0f && Inventory.getCharVar("tourPhase") > 0f && this.contextMessage != Localization.getPhrase("USE_ELEVATOR", string.Empty))
            {
                this.contextMessage = string.Empty;
            }
            if (this.contextMessage != string.Empty)
            {
                this.UI.transform.Find("ContextKeyNote").gameObject.SetActive(true);
                ((UnityEngine.Component)this.UI.transform.Find("ContextKeyNote").Find("txt")).GetComponent<Text>().text = this.contextMessage;
                ((UnityEngine.Component)this.UI.transform.Find("ContextKeyNote").Find("txtKey")).GetComponent<Text>().text = Localization.getPhrase("USE", string.Empty);
                if (Input.GetKeyDown(UserSettings.data.KEY_USE))
                {
                    this.contextFunction();
                }
                this.contextScale += (1f - this.contextScale) * Game.cap(Time.deltaTime * 14f, 0f, 1f);
                if (!this.contextWasOpen)
                {
                    if (this.recentThinking <= 0f && !this.anythingLoading && this.loadTransition <= 0f)
                    {
                        this.playSound("ui_contextopen", 1f, 1f);
                    }
                    this.contextWasOpen = true;
                }
            }
            else
            {
                this.contextScale += (0f - this.contextScale) * Game.cap(Time.deltaTime * 20f, 0f, 1f);
                if (this.contextScale <= 0.1f)
                {
                    this.contextScale = 0f;
                    this.UI.transform.Find("ContextKeyNote").gameObject.SetActive(false);
                }
                if (this.contextWasOpen)
                {
                    if (this.recentThinking <= 0f && !this.anythingLoading && this.loadTransition <= 0f)
                    {
                        this.playSound("ui_contextclose", 1f, 1f);
                    }
                    this.contextWasOpen = false;
                }
            }
            this.UI.transform.Find("ContextKeyNote").localScale = Vector3.one * this.contextScale;
            this.contextMessage = string.Empty;
            this.contextFunction = null;
            this.contextDistFromScreenCenter = 99999f;
            for (int i = 0; i < this.contextHotspotPoolSize; i++)
            {
                this.contextHotspots[i].SetActive(false);
                if (i >= this.nextContextHotspot)
                {
                    this.contextHotspots[i].transform.localScale = Vector3.zero;
                }
            }
            if (this.hoverContextHotspot == -1)
            {
                this.contextHotspotCursor.transform.localScale = Vector3.zero;
            }
            else
            {
                Transform transform = this.contextHotspotCursor.transform;
                transform.localScale += (Vector3.one * 0.4f - this.contextHotspotCursor.transform.localScale) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
            }
            this.contextHotspotCursor.transform.gameObject.SetActive(false);
            this.contextHotspotCursorLine.transform.gameObject.SetActive(false);
            this.nextContextHotspot = 0;
            this.lastHoverContextHotspot = this.hoverContextHotspot;
            this.hoverContextHotspot = -1;
        }
    }

    public void processPopup()
    {
        this.UI.transform.Find("Popup").gameObject.SetActive(this.popupOpen);
        if (this.popupOpen)
        {
            if (this.popupPhraseIsAlreadyTranslated)
            {
                ((UnityEngine.Component)this.UI.transform.Find("Popup").Find("Text")).GetComponent<Text>().text = this.popupPhrase;
            }
            else
            {
                ((UnityEngine.Component)this.UI.transform.Find("Popup").Find("Text")).GetComponent<Text>().text = Localization.getPhrase(this.popupPhrase, string.Empty);
            }
            this.recentPopup = 0.25f;
        }
        else if (this.recentPopup > 0f)
        {
            this.recentPopup -= Time.deltaTime;
        }
    }

    public void openTranslationDoc()
    {
        Application.OpenURL("http://furry.science/translate");
    }

    public void closeTranslationErrorScreen()
    {
        this.hideTranslationErrors = true;
    }

    public void processTranslationWarningScreen()
    {
        if (this.hideTranslationErrors || Localization.missingPhrase == string.Empty)
        {
            this.UI.transform.Find("TranslationWarning").gameObject.SetActive(false);
        }
        else
        {
            this.UI.transform.Find("TranslationWarning").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("TranslationWarning").Find("txtWarning")).GetComponent<Text>().text = Localization.getPhrase("MISSING_TRANSLATION", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("TranslationWarning").Find("txtPhrase")).GetComponent<Text>().text = Localization.getPhrase("MISSING", string.Empty) + " " + Localization.missingPhrase;
        }
    }

    public void processPauseScreen()
    {
        this.UI.transform.Find("PauseScreen").Find("cmdShowers").gameObject.SetActive(this.currentZone == "LabEntrance" || this.currentZone == "LabTower" || this.currentZone == "LabTowerLower" || this.currentZone == "LabFloor" || this.currentZone == "Room0" || this.currentZone == "Room1" || this.currentZone == "Room2");
        if (this.pauseOpen && !RacknetMultiplayer.anyRacknetUIopen)
        {
            this.showBackButton = true;
            this.processControlsPage();
            this.processGraphicsPage();
            this.processOptionsPage();
            this.processPreferencesPage();
            if (this.needPauseRebuild)
            {
                ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("MasterVolume")).GetComponent<Slider>().val = UserSettings.data.vol;
                ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("InterfaceVolume")).GetComponent<Slider>().val = UserSettings.data.volUI;
                ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("BGMVolume")).GetComponent<Slider>().val = UserSettings.data.volBGM;
                ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("WorldVolume")).GetComponent<Slider>().val = UserSettings.data.volWorld;
                if (RacknetMultiplayer.lobbyConnectionStatus == 0)
                {
                    ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("logo")).GetComponent<Image>().color = ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("atOffline")).GetComponent<Text>().color;
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("atOnline")
                        .gameObject.SetActive(false);
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("atOffline")
                        .gameObject.SetActive(true);
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("cmdDisconnect")
                        .gameObject.SetActive(false);
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("cmdConnect")
                        .gameObject.SetActive(true);
                }
                else
                {
                    ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("logo")).GetComponent<Image>().color = ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("atOnline")).GetComponent<Text>().color;
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("atOnline")
                        .gameObject.SetActive(true);
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("atOffline")
                        .gameObject.SetActive(false);
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("cmdDisconnect")
                        .gameObject.SetActive(true);
                    this.UI.transform.Find("PauseScreen").Find("RackNetStatus").Find("cmdConnect")
                        .gameObject.SetActive(false);
                }
            }
            this.needPauseRebuild = false;
            this.UI.transform.Find("PauseScreen").gameObject.SetActive(Game.pausePage == string.Empty);
            UserSettings.data.vol = ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("MasterVolume")).GetComponent<Slider>().val;
            UserSettings.data.volUI = ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("InterfaceVolume")).GetComponent<Slider>().val;
            UserSettings.data.volBGM = ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("BGMVolume")).GetComponent<Slider>().val;
            UserSettings.data.volWorld = ((UnityEngine.Component)this.UI.transform.Find("PauseScreen").Find("WorldVolume")).GetComponent<Slider>().val;
        }
        else
        {
            Game.pausePage = string.Empty;
            this.UI.transform.Find("PauseScreen").gameObject.SetActive(false);
            if (!this.needPauseRebuild)
            {
                UserSettings.saveSettings();
            }
            if (this.anyGraphicsSettingsChanged)
            {
                this.anyGraphicsSettingsChanged = false;
                this.updateCamGraphicsSettings();
            }
            this.needPauseRebuild = true;
        }
    }

    public void updateCamGraphicsSettings()
    {
        this.mainCam.GetComponent<Antialiasing>().enabled = UserSettings.data.antialiasing;
        this.mainCam.GetComponent<BloomOptimized>().enabled = UserSettings.data.bloom;
        this.mainCam.GetComponent<DepthOfField>().enabled = UserSettings.data.dof;
        this.mainCam.GetComponent<Camera>().allowHDR = UserSettings.data.glow;
        this.mainCam.GetComponent<SSAOPro>().enabled = UserSettings.data.ssao;
        this.uiCam.GetComponent<BloomOptimized>().enabled = UserSettings.data.bloom;
        this.uiCam.GetComponent<Camera>().allowHDR = UserSettings.data.glow;
        ((UnityEngine.Component)this.dialogueCam).GetComponent<Antialiasing>().enabled = UserSettings.data.antialiasing;
        ((UnityEngine.Component)this.dialogueCam).GetComponent<BloomOptimized>().enabled = UserSettings.data.bloom;
        ((UnityEngine.Component)this.dialogueCam).GetComponent<Camera>().allowHDR = UserSettings.data.glow;
        ((UnityEngine.Component)this.dialogueCam).GetComponent<SSAOPro>().enabled = UserSettings.data.ssao;
        if ((UnityEngine.Object)this.IPScam != (UnityEngine.Object)null)
        {
            this.IPScam.GetComponent<Antialiasing>().enabled = UserSettings.data.antialiasing;
            this.IPScam.GetComponent<BloomOptimized>().enabled = UserSettings.data.bloom;
            this.IPScam.GetComponent<Camera>().allowHDR = UserSettings.data.glow;
            this.IPScam.GetComponent<SSAOPro>().enabled = UserSettings.data.ssao;
        }
    }

    public void processPreferencesPage()
    {
        this.UI.transform.Find("PreferencesMenuBG").gameObject.SetActive(Game.pausePage == "preferences");
    }

    public void controlButtonClicked(GameObject txt)
    {
        this.listeningForKeyPress = true;
        this.listeningForKeyID = txt.transform.parent.name;
        this.col.r = 0.1882353f;
        this.col.g = 0.384313732f;
        this.col.b = 0.772549033f;
        ((UnityEngine.Component)txt.transform.parent.Find("cmdBG")).GetComponent<Image>().color = this.col;
    }

    public void controlCheckClicked()
    {
        this.controlsUpdated();
    }

    public static void processScrolling(Transform obj, ref float scrollY, float objHeight, float containerHeight, float startY = 0f)
    {
        float num = Game.cap(objHeight - containerHeight, 0f, 99999f);
        float num2 = scrollY;
        Vector2 mouseScrollDelta = Input.mouseScrollDelta;
        scrollY = num2 - mouseScrollDelta.y * 70f;
        if (scrollY < 0f)
        {
            scrollY = 0f;
        }
        if (scrollY > num)
        {
            scrollY = num;
        }
        Game.scrollV3 = obj.transform.localPosition;
        Game.scrollV3.y = startY + scrollY;
        Transform transform = obj.transform;
        transform.localPosition += (Game.scrollV3 - obj.transform.localPosition) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
    }

    public bool controlsUpdated()
    {
        if (this.inittingControls)
        {
            return true;
        }
        UserSettings.data.lookSensitivity = ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("LookSensitivity")).GetComponent<Slider>().val * 3f;
        UserSettings.data.interactionSensitivity = ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("InteractionSensitivity")).GetComponent<Slider>().val * 3f + 0.5f;
        UserSettings.data.invertY = ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("chkInvert")).GetComponent<Toggle>().isOn;
        UserSettings.data.dynamicSensitivity = ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("chkDynamicSensitivity")).GetComponent<Toggle>().isOn;
        UserSettings.data.autoComment = ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("chkAutoComment")).GetComponent<Toggle>().isOn;
        return true;
    }

    public void processControlsPage()
    {
        this.UI.transform.Find("ControlsMenu").gameObject.SetActive(Game.pausePage == "controls");
        if (Game.pausePage == "controls")
        {
            if (this.listeningForKeyPress && Input.anyKeyDown)
            {
                IEnumerator enumerator = Enum.GetValues(typeof(KeyCode)).GetEnumerator();
                try
                {
                    while (enumerator.MoveNext())
                    {
                        KeyCode keyCode = (KeyCode)enumerator.Current;
                        if (Input.GetKeyDown(keyCode))
                        {
                            FieldInfo[] fields = typeof(SettingsData).GetFields();
                            for (int i = 0; i < fields.Length; i++)
                            {
                                if (fields[i].Name == this.listeningForKeyID)
                                {
                                    fields[i].SetValue(UserSettings.data, keyCode);
                                }
                            }
                            UserSettings.saveSettings();
                            this.needControlsPageRebuild = true;
                            this.listeningForKeyPress = false;
                        }
                    }
                }
                finally
                {
                    IDisposable disposable;
                    if ((disposable = (enumerator as IDisposable)) != null)
                    {
                        disposable.Dispose();
                    }
                }
            }
            if (this.needControlsPageRebuild)
            {
                this.inittingControls = true;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("LookSensitivity")).GetComponent<Slider>().val = UserSettings.data.lookSensitivity / 3f;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("InteractionSensitivity")).GetComponent<Slider>().val = (UserSettings.data.interactionSensitivity - 0.5f) / 3f;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("chkInvert")).GetComponent<Toggle>().isOn = UserSettings.data.invertY;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("chkDynamicSensitivity")).GetComponent<Toggle>().isOn = UserSettings.data.dynamicSensitivity;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("chkAutoComment")).GetComponent<Toggle>().isOn = UserSettings.data.autoComment;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("LookSensitivity")).GetComponent<Slider>().onChange = this.controlsUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("InteractionSensitivity")).GetComponent<Slider>().onChange = this.controlsUpdated;
                for (int j = 0; j < this.controlPanels.Count; j++)
                {
                    UnityEngine.Object.Destroy(this.controlPanels[j]);
                }
                this.controlPanels = new List<GameObject>();
                this.controlPanelTemplate = this.UI.transform.Find("ControlsMenu").Find("ControlsContainer").Find("template")
                    .gameObject;
                this.controlNames = new List<string>();
                this.controlCodes = new List<string>();
                UserSettings.loadSettings();
                FieldInfo[] fields2 = typeof(SettingsData).GetFields();
                for (int k = 0; k < fields2.Length; k++)
                {
                    if (fields2[k].Name.Contains("KEY_"))
                    {
                        this.controlNames.Add(fields2[k].Name);
                        this.controlCodes.Add(fields2[k].GetValue(UserSettings.data).ToString());
                    }
                }
                for (int l = 0; l < this.controlNames.Count; l++)
                {
                    GameObject gameObject = UnityEngine.Object.Instantiate(this.controlPanelTemplate);
                    ((UnityEngine.Component)gameObject.transform.Find("txtFunction")).GetComponent<Text>().text = Localization.getPhrase(this.controlNames[l], string.Empty);
                    ((UnityEngine.Component)gameObject.transform.Find("txtKey")).GetComponent<Text>().text = this.controlCodes[l];
                    gameObject.name = this.controlNames[l];
                    gameObject.transform.SetParent(this.UI.transform.Find("ControlsMenu").Find("ControlsContainer"));
                    gameObject.transform.localScale = Vector3.one;
                    gameObject.transform.localRotation = Quaternion.identity;
                    gameObject.SetActive(true);
                    this.v3.x = 237f * (float)(l % 3 - 1);
                    this.v3.y = -160f - 35f * (float)Math.Floor((double)((float)l / 3f));
                    if (l % 3 == 1)
                    {
                        this.v3.y -= 16.5f;
                    }
                    this.v3.z = 0f;
                    gameObject.transform.localPosition = this.v3;
                    this.controlPanels.Add(gameObject);
                }
                this.inittingControls = false;
                this.needControlsPageRebuild = false;
            }
            Game.processScrolling(this.UI.transform.Find("ControlsMenu").Find("ControlsContainer"), ref this.controlMenuScrollY, 140f + 35f * (5f + (float)Math.Floor((double)((float)(this.controlPanels.Count - 1) / 3f))), ((UnityEngine.Component)this.UI.transform.Find("ControlsMenu")).GetComponent<RectTransform>().rect.height, 0f);
        }
        else
        {
            this.needControlsPageRebuild = true;
            this.listeningForKeyPress = false;
        }
    }

    public bool graphicsSliderUpdated()
    {
        this.graphicsPageUpdated();
        return true;
    }

    public void graphicsPageUpdated()
    {
        if (!this.graphicsPageInitting)
        {
            UserSettings.data.antialiasing = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkAA")).GetComponent<Toggle>().isOn;
            UserSettings.data.bloom = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkBloom")).GetComponent<Toggle>().isOn;
            UserSettings.data.dof = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkDOF")).GetComponent<Toggle>().isOn;
            UserSettings.data.glow = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkGlow")).GetComponent<Toggle>().isOn;
            UserSettings.data.ssao = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkSSAO")).GetComponent<Toggle>().isOn;
            UserSettings.data.autoPhysics = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkAutoPhysics")).GetComponent<Toggle>().isOn;
            UserSettings.data.physicsQuality = ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("PhysicsQuality")).GetComponent<Slider>().val;
            UserSettings.data.freezeOtherSubjectsWhileInteracting = !((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkFreezeOthers")).GetComponent<Toggle>().isOn;
            if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().val > 0.85f)
            {
                UserSettings.data.characterTextureQuality = 1f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().val > 0.65f)
            {
                UserSettings.data.characterTextureQuality = 0.75f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().val > 0.38f)
            {
                UserSettings.data.characterTextureQuality = 0.5f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().val > 0.16f)
            {
                UserSettings.data.characterTextureQuality = 0.25f;
            }
            else
            {
                UserSettings.data.characterTextureQuality = 0.125f;
            }
            if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().val > 0.92f)
            {
                UserSettings.data.IKquality = 1f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().val > 0.75f)
            {
                UserSettings.data.IKquality = 0.833f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().val > 0.58f)
            {
                UserSettings.data.IKquality = 0.666f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().val > 0.44f)
            {
                UserSettings.data.IKquality = 0.5f;
            }
            else if (((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().val > 0.27f)
            {
                UserSettings.data.IKquality = 0.333f;
            }
            else
            {
                UserSettings.data.IKquality = 0.166f;
            }
            ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().snapVal = UserSettings.data.characterTextureQuality;
            ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().snapVal = UserSettings.data.IKquality;
            this.UI.transform.Find("GraphicsMenu").Find("RestartWarning").gameObject.SetActive(true);
            this.anyGraphicsSettingsChanged = true;
        }
    }

    public void processGraphicsPage()
    {
        this.UI.transform.Find("GraphicsMenu").gameObject.SetActive(Game.pausePage == "graphics");
        if (Game.pausePage == "graphics")
        {
            if (this.needGraphicsPageRebuild)
            {
                this.UI.transform.Find("GraphicsMenu").Find("RestartWarning").gameObject.SetActive(false);
                this.graphicsPageInitting = true;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().val = UserSettings.data.characterTextureQuality;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().val = UserSettings.data.IKquality;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("TextureQuality")).GetComponent<Slider>().onChange = this.graphicsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("IKQuality")).GetComponent<Slider>().onChange = this.graphicsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkAA")).GetComponent<Toggle>().isOn = UserSettings.data.antialiasing;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkBloom")).GetComponent<Toggle>().isOn = UserSettings.data.bloom;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkDOF")).GetComponent<Toggle>().isOn = UserSettings.data.dof;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkGlow")).GetComponent<Toggle>().isOn = UserSettings.data.glow;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkSSAO")).GetComponent<Toggle>().isOn = UserSettings.data.ssao;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkFreezeOthers")).GetComponent<Toggle>().isOn = !UserSettings.data.freezeOtherSubjectsWhileInteracting;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("chkAutoPhysics")).GetComponent<Toggle>().isOn = UserSettings.data.autoPhysics;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("PhysicsQuality")).GetComponent<Slider>().onChange = this.graphicsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("PhysicsQuality")).GetComponent<Slider>().val = UserSettings.data.physicsQuality;
                this.needGraphicsPageRebuild = false;
                this.graphicsPageInitting = false;
            }
            if (UserSettings.data.autoPhysics)
            {
                ((UnityEngine.Component)this.UI.transform.Find("GraphicsMenu").Find("PhysicsQuality")).GetComponent<Slider>().val = UserSettings.data.physicsQuality;
            }
        }
        else
        {
            this.needGraphicsPageRebuild = true;
        }
    }

    public bool optionsSliderUpdated()
    {
        this.optionChanged();
        return true;
    }

    public void optionChanged()
    {
        if (!this.optionsPageInitting)
        {
            UserSettings.data.ghostTailsDuringSex = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkHideTails")).GetComponent<Toggle>().isOn;
            UserSettings.data.defaultToFreeCam = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkFreeCam")).GetComponent<Toggle>().isOn;
            UserSettings.data.ghostBodyDuringSex = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkGhostParts")).GetComponent<Toggle>().isOn;
            UserSettings.data.testSubjectEmotes = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkEmotes")).GetComponent<Toggle>().isOn;
            UserSettings.data.hideObjectivesDuringSex = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkObjectives")).GetComponent<Toggle>().isOn;
            UserSettings.data.autoJoinRacknet = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkAutoRacknet")).GetComponent<Toggle>().isOn;
            UserSettings.data.mouseParticles = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkMouseParticles")).GetComponent<Toggle>().isOn;
            UserSettings.data.defaultControlMode = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("ddControlMode")).GetComponent<Dropdown>().value;
            UserSettings.data.defaultMoveMode = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("ddMoveMode")).GetComponent<Dropdown>().value;
            UserSettings.data.cameraSmoothing = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("CameraSmoothing")).GetComponent<Slider>().val;
            UserSettings.data.customCharacterFrequency = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("CustomCharacterFrequency")).GetComponent<Slider>().val;
            UserSettings.data.orgasmSpeed = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("SexualStamina")).GetComponent<Slider>().val;
            UserSettings.data.racknetCharacterFrequency = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("RacknetCharacterFrequency")).GetComponent<Slider>().val;
            UserSettings.data.favoriteCharacterFrequency = ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("FavoriteCharacterFrequency")).GetComponent<Slider>().val;
        }
    }

    public void processOptionsPage()
    {
        this.UI.transform.Find("OptionsMenu").gameObject.SetActive(Game.pausePage == "options");
        if (Game.pausePage == "options")
        {
            if (this.needOptionsPageRebuild)
            {
                this.optionsPageInitting = true;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkHideTails")).GetComponent<Toggle>().isOn = UserSettings.data.ghostTailsDuringSex;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkFreeCam")).GetComponent<Toggle>().isOn = UserSettings.data.defaultToFreeCam;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkGhostParts")).GetComponent<Toggle>().isOn = UserSettings.data.ghostBodyDuringSex;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkEmotes")).GetComponent<Toggle>().isOn = UserSettings.data.testSubjectEmotes;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkObjectives")).GetComponent<Toggle>().isOn = UserSettings.data.hideObjectivesDuringSex;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkAutoRacknet")).GetComponent<Toggle>().isOn = UserSettings.data.autoJoinRacknet;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("chkMouseParticles")).GetComponent<Toggle>().isOn = UserSettings.data.mouseParticles;
                List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
                list.Add(new Dropdown.OptionData(Localization.getPhrase("CONTROL_MODE_0", string.Empty)));
                list.Add(new Dropdown.OptionData(Localization.getPhrase("CONTROL_MODE_1", string.Empty)));
                list.Add(new Dropdown.OptionData(Localization.getPhrase("CONTROL_MODE_2", string.Empty)));
                list.Add(new Dropdown.OptionData(Localization.getPhrase("CONTROL_MODE_3", string.Empty)));
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("ddControlMode")).GetComponent<Dropdown>().options = list;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("ddControlMode")).GetComponent<Dropdown>().value = UserSettings.data.defaultControlMode;
                list = new List<Dropdown.OptionData>();
                list.Add(new Dropdown.OptionData(Localization.getPhrase("MOVE_MOVE_0", string.Empty)));
                list.Add(new Dropdown.OptionData(Localization.getPhrase("MOVE_MOVE_1", string.Empty)));
                list.Add(new Dropdown.OptionData(Localization.getPhrase("MOVE_MOVE_2", string.Empty)));
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("ddMoveMode")).GetComponent<Dropdown>().options = list;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("ddMoveMode")).GetComponent<Dropdown>().value = UserSettings.data.defaultMoveMode;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("CameraSmoothing")).GetComponent<Slider>().val = UserSettings.data.cameraSmoothing;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("CustomCharacterFrequency")).GetComponent<Slider>().val = UserSettings.data.customCharacterFrequency;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("SexualStamina")).GetComponent<Slider>().val = UserSettings.data.orgasmSpeed;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("RacknetCharacterFrequency")).GetComponent<Slider>().val = UserSettings.data.racknetCharacterFrequency;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("FavoriteCharacterFrequency")).GetComponent<Slider>().val = UserSettings.data.favoriteCharacterFrequency;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("CameraSmoothing")).GetComponent<Slider>().onChange = this.optionsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("CustomCharacterFrequency")).GetComponent<Slider>().onChange = this.optionsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("SexualStamina")).GetComponent<Slider>().onChange = this.optionsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("RacknetCharacterFrequency")).GetComponent<Slider>().onChange = this.optionsSliderUpdated;
                ((UnityEngine.Component)this.UI.transform.Find("OptionsMenu").Find("FavoriteCharacterFrequency")).GetComponent<Slider>().onChange = this.optionsSliderUpdated;
                this.needOptionsPageRebuild = false;
                this.optionsPageInitting = false;
            }
        }
        else
        {
            this.needOptionsPageRebuild = true;
        }
    }

    public void processLoadingScreen()
    {
        float num = 1f;
        if (this.loadingAmount > 0f)
        {
            num = this.loadedAmount / this.loadingAmount;
        }
        this.displayedLoadAmount = num;
        ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("ProgressHexes")).GetComponent<ProgressHexes>().progress = this.displayedLoadAmount;
        ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("ProgressHexes")).GetComponent<ProgressHexes>().overallAlpha = this.loadTransition;
        if (this.anythingLoading || (this.renderingHeadshot && this.recentThinking <= 0f) || this.firstThinking || (Game.loadingAnyCharacters && NPC.curNPCbuild != "Characters") || this.anyRandomCharsStillInitting)
        {
            this.UI.transform.Find("LoadingScreen").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("txtLoading")).GetComponent<Text>().text = Localization.getPhrase("LOADING", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("txtInfo")).GetComponent<Text>().text = Localization.getPhrase("DEV_BUILD_WARNING", string.Empty);
            string str = string.Empty;
            if (Game.loadingAnyCharacters)
            {
                str = NPC.curNPCbuild;
            }
            else if (this.firstThinking)
            {
                str = "Rack Laboratories";
            }
            if (this.anyRandomCharsStillInitting && str == string.Empty)
            {
                str = "Subject [" + this.randomCharactersForSelection.Count + "/" + Game.maxCharactersForSelector + "]" + Environment.NewLine + Localization.getPhrase("BUILDING_TEXTURE", string.Empty);
            }
            string phraseName = "LOADING2";
            if (this.PC() != null && Inventory.getCharVar("secretaryGreeted") == 0f)
            {
                phraseName = "BUILDING";
            }
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("txtLoadDescription")).GetComponent<Text>().text = (Localization.getPhrase(phraseName, string.Empty) + " " + str).Replace("  ", " ");
            if (this.loadTransition < 1f)
            {
                this.loadTransition += Time.deltaTime * 2f;
                if (this.loadTransition > 1f)
                {
                    this.loadTransition = 1f;
                }
            }
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("bg")).GetComponent<CanvasRenderer>().SetAlpha(this.loadTransition);
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("txtLoading")).GetComponent<CanvasRenderer>().SetAlpha(this.loadTransition);
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("txtInfo")).GetComponent<CanvasRenderer>().SetAlpha(this.loadTransition);
            this.thinkingIndicator.SetActive(this.rtBlur > 0.02f);
        }
        else
        {
            if (this.PC() != null)
            {
                if (!this.PC().data.created)
                {
                    if (!this.stillThinkingAfterFirstSpeciesSelection)
                    {
                        this.firstCustomizationSpeciesSelection = true;
                    }
                    if (this.PC().initted)
                    {
                        if (this.newCharacterStep == 0)
                        {
                            this.PC().teleport(-29.8f, 10.8f, -85.75f, -999f, false);
                            this.newCharacterStep = 1;
                            this.newCharacterCustomizeDelay = 0.1f;
                        }
                        else if (this.newCharacterCustomizeDelay <= 0f)
                        {
                            RandomCharacterGenerator.wipe();
                            RandomCharacterGenerator.addSpecies("mouse", 100f);
                            RandomCharacterGenerator.setGenderWeights(100f, 0f, 0f, 0f, 0f, 0f, 0f);
                            RandomCharacterGenerator.setBodyTypeWeights(100f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f);
                            RandomCharacterGenerator.randomize(this.PC());
                            this.PC().data.created = true;
                            this.PC().data.customized = false;
                            this.PC().teleport(-29.8f, 10.8f, -85.75f, -999f, false);
                            this.customizeCharacter();
                        }
                        else
                        {
                            this.newCharacterCustomizeDelay -= Time.deltaTime;
                        }
                    }
                }
                else
                {
                    this.firstCustomizationSpeciesSelection = !this.PC().data.customized;
                }
            }
            else if (!this.titleOpen)
            {
                this.firstCustomizationSpeciesSelection = true;
            }
            ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen").Find("txtLoadDescription")).GetComponent<Text>().text = string.Empty;
            if (this.loadTransition > 0f && this.displayedLoadAmount > 0.95f)
            {
                this.loadTransition -= Time.deltaTime * 2f;
                if (this.loadTransition < 0f)
                {
                    this.loadTransition = 0f;
                    this.UI.transform.Find("LoadingScreen").gameObject.SetActive(false);
                }
                else
                {
                    CanvasRenderer[] componentsInChildren = ((UnityEngine.Component)this.UI.transform.Find("LoadingScreen")).GetComponentsInChildren<CanvasRenderer>();
                    for (int i = 0; i < componentsInChildren.Length; i++)
                    {
                        componentsInChildren[i].SetAlpha(this.loadTransition);
                    }
                }
            }
            this.thinkingIndicator.SetActive(this.rtBlur > 0.02f);
            float num2 = this.recentThinking;
            if (this.titleOpen)
            {
                num2 -= Game.cap(6f - this.titleTimer, 0f, 6f);
            }
            if (num2 < 0f)
            {
                num2 = 0f;
            }
        }
        if (this.recentThinking > 0f && !this.anythingLoading)
        {
            this.recentThinking -= Time.deltaTime * 4f;
        }
        if (this.rtBlur > 0.02f)
        {
            this.mainCam.GetComponent<BlurOptimized>().enabled = (this.rtBlur > 0.05f);
            this.mainCam.GetComponent<BlurOptimized>().blurSize = Game.cap(this.rtBlur * 1.5f - 0.1f, 0f, 10f);
            this.loadingOrange.r = 0.9372549f;
            this.loadingOrange.g = 0.6784314f;
            this.loadingOrange.b = 0.270588249f;
            this.loadingOrange.a = 1f;
            this.loadingBlue.r = 0.329411775f;
            this.loadingBlue.g = 0.8039216f;
            this.loadingBlue.b = 0.956862748f;
            this.loadingBlue.a = 1f;
            for (int j = 0; j < 6; j++)
            {
                ((UnityEngine.Component)this.thinkingIndicator.transform.Find("hex" + j)).GetComponent<Image>().color = Color.Lerp(this.loadingOrange, this.loadingBlue, 0.5f + Mathf.Cos((float)j * 0.2f + Time.time * 3f) * 0.5f);
            }
        }
        else
        {
            this.mainCam.GetComponent<BlurOptimized>().enabled = false;
        }
        if (this.recentThinking <= 0f && this.firstThinking)
        {
            this.firstThinkWait -= Time.deltaTime;
            if (this.firstThinkWait <= 0f)
            {
                this.firstThinking = false;
            }
        }
        else if (this.recentThinking > 0f && this.firstThinking)
        {
            this.firstThinkWait = 1f;
        }
    }

    public void quit()
    {
        if (this.titleOpen)
        {
            Application.Quit();
        }
        else
        {
            this.returnToTitle();
        }
    }

    public void toggleMute()
    {
        if (UserSettings.data.vol > 0f)
        {
            this.priorVolume = UserSettings.data.vol;
            UserSettings.data.vol = 0f;
        }
        else if (this.priorVolume > 0f)
        {
            UserSettings.data.vol = this.priorVolume;
        }
        else
        {
            UserSettings.data.vol = 0.9f;
        }
        UserSettings.saveSettings();
    }

    private void processTitleScreen()
    {
        if (this.waitingForLoadPlayerCharacter && this.recentThinking <= 0f)
        {
            this.waitingForLoadPlayerCharacter = false;
            this.loadPlayerCharacter();
        }
        if (this.firstTitleFrame && Game.reloadedFromGame)
        {
            this.titleOpen = true;
            this.titleTimer = 10f;
            this.showingTerms = false;
            this.selectingMode = false;
            this.selectingSave = true;
            this.UI.transform.Find("TitleWindow").Find("splashcolor").gameObject.SetActive(false);
        }
        Game.reloadedFromGame = true;
        this.firstTitleFrame = false;
        this.titleRenderers = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow")).GetComponentsInChildren<CanvasRenderer>();
        if (this.titleOpen)
        {
            this.UI.transform.Find("TitleWindow").Find("cmdMute").gameObject.SetActive(this.titleTimer > 0.1f);
            this.UI.transform.Find("TitleWindow").Find("cmdMute").Find("muteIndicator")
                .gameObject.SetActive(UserSettings.data.vol == 0f);
            this.newsWindow.SetActive(this.selectingMode || this.selectingSave);
            if (this.showingTerms || this.selectingSave || this.choosingSaveName || this.confirmingDelete)
            {
                this.showBackButton = true;
            }
            if ((Input.GetKeyDown(KeyCode.Escape) || this.simulatedESC) && this.showingTerms)
            {
                this.showingTerms = false;
            }
            if ((Input.GetKeyDown(KeyCode.Escape) || this.simulatedESC) && this.selectingSave && !this.choosingSaveName && !this.confirmingDelete)
            {
                this.selectingSave = false;
                this.selectingMode = true;
            }
            if ((Input.GetKeyDown(KeyCode.Escape) || this.simulatedESC) && this.choosingSaveName)
            {
                this.choosingSaveName = false;
                this.selectingSave = true;
            }
            if ((Input.GetKeyDown(KeyCode.Escape) || this.simulatedESC) && this.confirmingDelete)
            {
                this.confirmingDelete = false;
            }
            if ((Input.GetKeyDown(KeyCode.KeypadEnter) || Input.GetKeyDown(KeyCode.Return)) && this.choosingSaveName)
            {
                this.playSound("ui_click", 1f, 1f);
                this.nameChosen(null);
            }
            if ((Input.GetKeyDown(KeyCode.KeypadEnter) || Input.GetKeyDown(KeyCode.Return)) && this.confirmingDelete)
            {
                this.playSound("ui_click", 1f, 1f);
                this.confirmSaveDeletion(null);
                goto IL_039c;
            }
            if (Input.anyKeyDown)
            {
                if (this.titleTimer >= 4.8f)
                {
                    if (UserSettings.data.acceptedTerms && !this.selectingSave)
                    {
                        if (!this.selectingMode)
                        {
                            this.playSound("ui_click", 1f, 1f);
                        }
                        this.selectingMode = true;
                    }
                    else if (!this.selectingMode && !this.selectingSave)
                    {
                        this.playSound("ui_click", 1f, 1f);
                        this.showingTerms = true;
                    }
                }
                else
                {
                    this.playSound("ui_click", 1f, 1f);
                    this.titleTimer = 4.8f;
                }
            }
            goto IL_039c;
        }
        if (this.titleRenderers.Length > 0)
        {
            if ((double)this.titleRenderers[0].GetAlpha() < 0.1)
            {
                this.UI.transform.Find("TitleWindow").gameObject.SetActive(false);
            }
            else
            {
                for (int i = 0; i < this.titleRenderers.Length; i++)
                {
                    this.titleRenderers[i].SetAlpha(this.titleRenderers[i].GetAlpha() / 2f);
                }
            }
            this.UI.transform.Find("fekBottom").gameObject.SetActive(false);
            this.UI.transform.Find("cmdQuit").gameObject.SetActive(false);
        }
        this.UI.transform.Find("LanguageWindow").gameObject.SetActive(Game.pausePage == "options");
        return;
    IL_039c:
        if (this.showingTerms)
        {
            this.UI.transform.Find("TitleWindow").Find("legalWindow").gameObject.SetActive(true);
            if (this.termTransition < 1f)
            {
                this.termTransition += Time.deltaTime * 4f;
                if (this.termTransition > 1f)
                {
                    this.termTransition = 1f;
                }
            }
            if (((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("legalWindow").Find("chkLegal")).GetComponent<Toggle>().isOn && ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("legalWindow").Find("chkTerms")).GetComponent<Toggle>().isOn)
            {
                this.showingTerms = false;
                UserSettings.data.acceptedTerms = true;
                UserSettings.saveSettings();
                this.selectingMode = true;
            }
        }
        else if (this.termTransition > 0f)
        {
            this.termTransition -= Time.deltaTime * 4f;
            if (this.termTransition < 0f)
            {
                this.termTransition = 0f;
            }
        }
        if (this.selectingMode)
        {
            if (this.modeSelectionTransition < 1f)
            {
                this.modeSelectionTransition += Time.deltaTime * 4f;
                if (this.modeSelectionTransition > 1f)
                {
                    this.modeSelectionTransition = 1f;
                }
            }
            this.UI.transform.Find("TitleWindow").Find("splashcolor").gameObject.SetActive(false);
            this.UI.transform.Find("TitleWindow").Find("modeSelectWindow").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("modeSelectWindow").Find("cmdCampaign")
                .Find("txt")).GetComponent<Text>().text = Localization.getPhrase("CAMPAIGN", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("modeSelectWindow").Find("cmdCampaign")
                .Find("info")).GetComponent<Text>().text = Localization.getPhrase("CAMPAIGN_DESCRIPTION", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("modeSelectWindow").Find("cmdFreePlay")
                .Find("txt")).GetComponent<Text>().text = Localization.getPhrase("FREE_PLAY", string.Empty);
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("modeSelectWindow").Find("cmdFreePlay")
                .Find("info")).GetComponent<Text>().text = Localization.getPhrase("FREE_PLAY_DESCRIPTION", string.Empty);
        }
        else
        {
            if (this.modeSelectionTransition > 0f)
            {
                this.modeSelectionTransition -= Time.deltaTime * 4f;
                if (this.modeSelectionTransition < 0f)
                {
                    this.modeSelectionTransition = 0f;
                }
            }
            this.UI.transform.Find("TitleWindow").Find("modeSelectWindow").gameObject.SetActive(false);
        }
        if (this.choosingSaveName || this.selectingSave || this.confirmingDelete)
        {
            if (this.saveSelectionTransition < 1f)
            {
                this.saveSelectionTransition += Time.deltaTime * 4f;
                if (this.saveSelectionTransition > 1f)
                {
                    this.saveSelectionTransition = 1f;
                }
            }
        }
        else if (this.saveSelectionTransition > 0f)
        {
            this.saveSelectionTransition -= Time.deltaTime * 4f;
            if (this.saveSelectionTransition < 0f)
            {
                this.saveSelectionTransition = 0f;
            }
        }
        if (this.choosingSaveName)
        {
            this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")
                .Find("Placeholder")).GetComponent<Text>().text = Localization.getPhrase("ENTER_NAME_HERE", string.Empty);
        }
        else
        {
            this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").gameObject.SetActive(false);
        }
        if (this.confirmingDelete)
        {
            this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("txtNumber")).GetComponent<Text>().text = this.deleteConfirmationNumber + string.Empty;
        }
        else
        {
            this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").gameObject.SetActive(false);
        }
        if (this.selectingSave && !this.choosingSaveName && !this.confirmingDelete)
        {
            if ((UnityEngine.Object)this.saveFileTemplate == (UnityEngine.Object)null)
            {
                this.saveFileTemplate = this.UI.transform.Find("TitleWindow").Find("saveSelectWindow").Find("SaveFile")
                    .gameObject;
                this.saveFileTemplate.SetActive(false);
            }
            if (this.saveFileOptions.Count == 0)
            {
                this.filteredSaveFiles = UserSettings.getSaveFiles(Game.freeplay);
                this.saveFileTemplate.SetActive(true);
                for (int j = 0; j < this.filteredSaveFiles.Count + 1; j++)
                {
                    this.saveFileOptions.Add(UnityEngine.Object.Instantiate(this.saveFileTemplate));
                    this.saveFileOptions[j].transform.SetParent(this.UI.transform.Find("TitleWindow").Find("saveSelectWindow").Find("saveFileContainer"));
                    this.v3 = Vector3.zero;
                    this.v3.x = (float)(j * 256);
                    this.saveFileOptions[j].transform.localPosition = this.v3;
                    this.saveFileOptions[j].transform.localScale = Vector3.one;
                    if (j == this.filteredSaveFiles.Count)
                    {
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtName")).GetComponent<Text>().text = Localization.getPhrase("NEW_GAME", string.Empty);
                        this.saveFileOptions[j].transform.Find("cmdNew").gameObject.SetActive(true);
                        this.saveFileOptions[j].transform.Find("cmdDelete").gameObject.SetActive(false);
                        this.saveFileOptions[j].transform.Find("campaign").gameObject.SetActive(false);
                        this.saveFileOptions[j].transform.Find("freeplay").gameObject.SetActive(false);
                        this.saveFileOptions[j].transform.Find("fekel").gameObject.SetActive(false);
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtFekels")).GetComponent<Text>().text = string.Empty;
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtResearchPercentage")).GetComponent<Text>().text = string.Empty;
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtResearchComplete")).GetComponent<Text>().text = string.Empty;
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtTimePlayed")).GetComponent<Text>().text = string.Empty;
                        this.saveFileOptions[j].GetComponent<SelectableMenuItem>().onClick = this.makeNewSaveFile;
                        this.saveFileOptions[j].transform.Find("Photo").gameObject.SetActive(false);
                    }
                    else
                    {
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtName")).GetComponent<Text>().text = this.filteredSaveFiles[j].name;
                        this.saveFileOptions[j].transform.Find("cmdNew").gameObject.SetActive(false);
                        this.saveFileOptions[j].transform.Find("cmdDelete").gameObject.SetActive(true);
                        this.saveFileOptions[j].transform.Find("fekel").gameObject.SetActive(true);
                        this.saveFileOptions[j].transform.Find("campaign").gameObject.SetActive(!this.filteredSaveFiles[j].freeplay && !File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty + this.filteredSaveFiles[j].avatarURL + ".png"));
                        this.saveFileOptions[j].transform.Find("freeplay").gameObject.SetActive(this.filteredSaveFiles[j].freeplay && !File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty + this.filteredSaveFiles[j].avatarURL + ".png"));
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtFekels")).GetComponent<Text>().text = this.filteredSaveFiles[j].fekels + string.Empty;
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtResearchPercentage")).GetComponent<Text>().text = Mathf.FloorToInt(this.filteredSaveFiles[j].researchCompletion * 100f) + "%";
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtResearchComplete")).GetComponent<Text>().text = Localization.getPhrase("RESEARCH_COMPLETED", string.Empty);
                        ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("txtTimePlayed")).GetComponent<Text>().text = Game.formatTime(this.filteredSaveFiles[j].secondsPlayed, true) + " " + Localization.getPhrase("_PLAYED", string.Empty);
                        this.saveFileOptions[j].GetComponent<SelectableMenuItem>().onClick = this.loadSave;
                        this.saveFileOptions[j].GetComponent<SelectableMenuItem>().onDeleteClicked = this.deleteSave;
                        new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
                        this.saveFileOptions[j].transform.Find("Photo").gameObject.SetActive(File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty + this.filteredSaveFiles[j].avatarURL + ".png"));
                        if (File.Exists(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty + this.filteredSaveFiles[j].avatarURL + ".png"))
                        {
                            byte[] data = File.ReadAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty + this.filteredSaveFiles[j].avatarURL + ".png");
                            Texture2D texture2D = new Texture2D(512, 512);
                            texture2D.LoadImage(data);
                            texture2D.wrapMode = TextureWrapMode.Clamp;
                            TextureScale.Bilinear(texture2D, 256, 256);
                            ((UnityEngine.Component)this.saveFileOptions[j].transform.Find("Photo").Find("avatar")).GetComponent<RawImage>().texture = texture2D;
                        }
                    }
                }
                this.saveFileTemplate.SetActive(false);
            }
            this.UI.transform.Find("TitleWindow").Find("saveSelectWindow").gameObject.SetActive(true);
            SelectableMenuManager.animate(this.saveFileOptions, Game.gameInstance.UI.transform.Find("TitleWindow").Find("saveSelectWindow").Find("saveFileContainer")
                .gameObject, 256f, -25f, 0f);
        }
        else
        {
            if (this.saveFileOptions.Count != 0)
            {
                for (int k = 0; k < this.saveFileOptions.Count; k++)
                {
                    UnityEngine.Object.Destroy(this.saveFileOptions[k]);
                }
                this.saveFileOptions = new List<GameObject>();
            }
            this.UI.transform.Find("TitleWindow").Find("saveSelectWindow").gameObject.SetActive(false);
        }
        CanvasRenderer[] componentsInChildren = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("legalWindow")).GetComponentsInChildren<CanvasRenderer>();
        for (int l = 0; l < componentsInChildren.Length; l++)
        {
            if (!(componentsInChildren[l].name == "Checkmark") || !(this.termTransition > 0f))
            {
                componentsInChildren[l].SetAlpha(this.termTransition);
            }
        }
        CanvasRenderer[] componentsInChildren2 = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("modeSelectWindow")).GetComponentsInChildren<CanvasRenderer>();
        for (int m = 1; m < componentsInChildren2.Length; m++)
        {
            componentsInChildren2[m].SetAlpha(this.modeSelectionTransition);
        }
        CanvasRenderer[] componentsInChildren3 = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("saveSelectWindow")).GetComponentsInChildren<CanvasRenderer>();
        for (int n = 1; n < componentsInChildren3.Length; n++)
        {
            componentsInChildren3[n].SetAlpha(this.saveSelectionTransition);
        }
                    ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("legalWindow").Find("txtLegal")).GetComponent<Text>().text = Localization.getPhrase("LEGAL_TOS", string.Empty);
        this.termsX = Game.smoothLerp(this.termTransition, 2f) * 200f;
        this.UI.transform.Find("TitleWindow").gameObject.SetActive(true);
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("bg")).GetComponent<CanvasRenderer>().SetAlpha((1f + ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("bg")).GetComponent<CanvasRenderer>().GetAlpha()) / 2f);
        this.a = this.titleTimer;
        if (this.a > 1f)
        {
            this.a = 1f;
        }
        if (this.a < 0f)
        {
            this.a = 0f;
        }
        this.c3.a = this.a * (1f - this.saveSelectionTransition - this.modeSelectionTransition);
        if (this.c3.a < 0f)
        {
            this.c3.a = 0f;
        }
        this.c3.r = (this.c3.g = (this.c3.b = 1f));
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("bg")).GetComponent<Image>().color = this.c3;
        this.titleTimer += Time.deltaTime;
        this.c3.r = (this.c3.g = (this.c3.b = Game.cap(this.saveSelectionTransition + this.modeSelectionTransition, 0f, 1f)));
        this.a = 2f - Mathf.Abs(this.titleTimer - 1.5f) * 2.8f;
        if (this.a > 1f)
        {
            this.a = 1f;
        }
        if (this.a < 0f)
        {
            this.a = 0f;
        }
        this.c3.a = this.a;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("fek")).GetComponent<Image>().color = this.c3;
        this.c3.r = (this.c3.g = (this.c3.b = Game.cap(this.saveSelectionTransition + this.modeSelectionTransition, 0f, 1f)));
        this.c3.a = this.saveSelectionTransition;
        ((UnityEngine.Component)this.UI.transform.Find("fekBottom")).GetComponent<Image>().color = this.c3;
        this.a = (this.titleTimer - 2.5f) * 2.8f;
        if (this.a > 1f)
        {
            this.a = 1f;
        }
        if (this.confirmingDelete)
        {
            this.a -= 1f;
        }
        if (this.a < 0f)
        {
            this.a = 0f;
        }
        this.c3.r = (this.c3.g = (this.c3.b = Game.cap(this.saveSelectionTransition + this.modeSelectionTransition, 0f, 1f)));
        this.c3.a = this.a;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("rack2")).GetComponent<Image>().color = this.c3;
        this.v3.x = 8f - this.termsX;
        this.v3.y = (this.titleTimer - 3f) * 100f;
        float num = 95f;
        if (this.v3.y > num)
        {
            this.v3.y = num;
        }
        if (this.v3.y < 0f)
        {
            this.v3.y = 0f;
        }
        this.v3.y = num * Game.smoothLerp(this.v3.y / num, 2f) + Game.smoothLerp(Game.cap(this.modeSelectionTransition, 0f, 1f), 2f) * 95f + Game.smoothLerp(Game.cap(this.saveSelectionTransition, 0f, 1f), 2f) * 145f;
        this.v3.z = 0f;
        this.UI.transform.Find("TitleWindow").Find("rack2").transform.localPosition = this.v3;
        this.v3.x = (this.v3.y = (this.v3.z = 1f - (this.v3.y - Game.smoothLerp(Game.cap(this.saveSelectionTransition + this.modeSelectionTransition, 0f, 1f), 2f) * 95f) / num * 0.45f));
        this.UI.transform.Find("TitleWindow").Find("rack2").localScale = this.v3;
        this.a = (this.titleTimer - 3.8f) * 2.8f;
        if (this.a > 1f)
        {
            this.a = 1f;
        }
        if (this.confirmingDelete)
        {
            this.a -= 1f;
        }
        if (this.a < 0f)
        {
            this.a = 0f;
        }
        this.c3.r = (this.c3.g = (this.c3.b = Game.cap(this.saveSelectionTransition + this.modeSelectionTransition, 0f, 1f)));
        this.c3.a = this.a;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("furryScience")).GetComponent<Image>().color = this.c3;
        this.v3.x = 0f - this.termsX;
        this.v3.y = Game.smoothLerp(Game.cap(this.modeSelectionTransition, 0f, 1f), 2f) * 95f + Game.smoothLerp(Game.cap(this.saveSelectionTransition, 0f, 1f), 2f) * 145f;
        this.v3.z = 0f;
        this.UI.transform.Find("TitleWindow").Find("furryScience").transform.localPosition = this.v3;
        this.a = (this.titleTimer - 4.8f) * 2.8f;
        if (this.a > 1f)
        {
            this.a = 1f;
        }
        if (this.a < 0f)
        {
            this.a = 0f;
        }
        this.c3.r = (this.c3.g = (this.c3.b = 0f));
        this.c3.a = this.a * (0.5f + Mathf.Cos(Time.time * 4f) / 2f) * (1f - this.termTransition) * (1f - Game.cap(this.saveSelectionTransition + this.modeSelectionTransition, 0f, 1f));
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("txtAnyKey")).GetComponent<Text>().color = this.c3;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("txtAnyKey")).GetComponent<Text>().text = Localization.getPhrase("PRESS_ANY_KEY_TO_CONTINUE", string.Empty);
        this.UI.transform.Find("LanguageWindow").gameObject.SetActive(this.titleTimer > 4.8f);
        this.UI.transform.Find("cmdQuit").gameObject.SetActive(this.titleTimer > 4.8f);
        ((UnityEngine.Component)this.UI.transform.Find("cmdQuit").Find("Text")).GetComponent<Text>().text = Localization.getPhrase("QUIT", string.Empty);
        if (Localization.languages != null)
        {
            for (int num2 = 0; num2 < Localization.languages.Count; num2++)
            {
                if (UserSettings.data.language == Localization.languages[num2])
                {
                    ((UnityEngine.Component)this.UI.transform.Find("LanguageWindow").Find(Localization.languages[num2])).GetComponent<CanvasRenderer>().SetAlpha(1f);
                }
                else
                {
                    ((UnityEngine.Component)this.UI.transform.Find("LanguageWindow").Find(Localization.languages[num2])).GetComponent<CanvasRenderer>().SetAlpha(0.1f);
                }
            }
        }
                    ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("legalWindow").Find("chkLegal")
                        .Find("Label")).GetComponent<Text>().text = Localization.getPhrase("I_WANT_TO_VIEW_THIS_CONTENT_AND_IT_IS_LEGAL_FOR_ME_TO_DO_SO", string.Empty);
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("legalWindow").Find("chkTerms")
            .Find("Label")).GetComponent<Text>().text = Localization.getPhrase("I_AGREE_TO_THE_TERMS_OF_SERVICE", string.Empty);
        this.v3.x = 5f - this.mX * 10f;
        this.v3.y = -5f + this.mY * 10f;
        this.v3.z = 1600f;
        Transform transform = this.UI.transform.Find("TitleWindow").Find("gradient");
        transform.localPosition += (this.v3 - this.UI.transform.Find("TitleWindow").Find("gradient").localPosition) * Game.cap(Time.deltaTime * 2f, 0f, 1f);
    }

    public bool loadSave(SelectableMenuItem item)
    {
        this.proceedToGame(((UnityEngine.Component)item.transform.Find("txtName")).GetComponent<Text>().text);
        return true;
    }

    public void backClicked()
    {
        this.simulatedESC = true;
    }

    public bool deleteSave(SelectableMenuItem item)
    {
        this.confirmingDelete = true;
        this.justOpenedDeleteConfirmation = true;
        this.deletingSaveID = ((UnityEngine.Component)item.transform.Find("txtName")).GetComponent<Text>().text;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("txtNumber")).GetComponent<Text>().text = string.Empty;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("txtConfirm")).GetComponent<InputField>().text = string.Empty;
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("txtName")).GetComponent<Text>().text = this.deletingSaveID;
        this.deleteConfirmationNumber = 1000 + Mathf.FloorToInt(UnityEngine.Random.value * 8998f);
        return true;
    }

    public bool confirmSaveDeletion(MenuOption opt)
    {
        this.executeSaveDeletion();
        return true;
    }

    public void executeSaveDeletion()
    {
        if (((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("txtNumber")).GetComponent<Text>().text == ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("deleteConfirmationWindow").Find("txtConfirm")
            .Find("Text")).GetComponent<Text>().text)
        {
            UserSettings.deleteSave(this.deletingSaveID);
        }
        this.selectingSave = false;
        this.selectingMode = true;
        this.confirmingDelete = false;
    }

    public void OnApplicationFocus(bool _hasFocus)
    {
        Game.hasFocus = _hasFocus;
    }

    public void checkSaveFileNameValidity()
    {
        string text = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().text;
        text = text.Replace("*", string.Empty);
        text = text.Replace("\"", string.Empty);
        text = text.Replace("/", string.Empty);
        text = text.Replace("\\", string.Empty);
        text = text.Replace("[", string.Empty);
        text = text.Replace("]", string.Empty);
        text = text.Replace(":", string.Empty);
        text = text.Replace(";", string.Empty);
        text = text.Replace("|", string.Empty);
        text = text.Replace("=", string.Empty);
        text = text.Replace(",", string.Empty);
        text = text.Replace("..", ".");
        text = text.Replace(">", string.Empty);
        text = text.Replace("<", string.Empty);
        text = text.Replace("?", string.Empty);
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().text = text;
    }

    public bool makeNewSaveFile(SelectableMenuItem item)
    {
        this.choosingSaveName = true;
        this.nextFrame(delegate
        {
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().text = string.Empty;
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().Select();
            ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().ActivateInputField();
        });
        return true;
    }

    public void nextFrame(NFDelegate doSomething)
    {
        this.nextFrameTasks.Add(doSomething);
    }

    public void stutteredTask(NFDelegate doSomething)
    {
        this.stutteredFrameTasks.Add(doSomething);
    }

    public void processNextFrameTasks()
    {
        for (int i = 0; i < this.nextFrameTasks.Count; i++)
        {
            this.nextFrameTasks[i]();
        }
        this.nextFrameTasks = new List<NFDelegate>();
        if (this.stutteredFrameTasks.Count > 0)
        {
            this.stutteredFrameTasks[0]();
            this.stutteredFrameTasks.RemoveAt(0);
        }
    }

    public bool nameChosen(MenuOption menuOption)
    {
        GUI.FocusControl(null);
        ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().DeactivateInputField();
        this.nextFrame(delegate
        {
            string text = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("nameSelectWindow").Find("txtName")).GetComponent<InputField>().text;
            if (text.Length < 1)
            {
                text = "Doctor";
            }
            int i;
            for (i = 0; this.nameAlreadyInUse(text, i); i++)
            {
            }
            string text2 = text;
            if (i > 0)
            {
                text2 = text2 + "(" + (i + 1) + ")";
            }
            UserSettings.data.users.Add(text2);
            UserSettings.data.activeUser = text2;
            Inventory.loadInventoryData();
            Inventory.data.freeplay = Game.freeplay;
            if (Game.freeplay)
            {
                this.createFreeplayGame();
            }
            else
            {
                this.createNormalGame();
            }
            Inventory.saveInventoryData();
            this.proceedToGame(text2);
        });
        return true;
    }

    public void createNormalGame()
    {
        for (int i = 0; i < 6; i++)
        {
            Inventory.addChemical(i, 10);
        }
        Inventory.addMoney(1900);
        Inventory.saveInventoryData();
    }

    public void createFreeplayGame()
    {
        this.unlockAllResearch();
        Inventory.addMoney(1000000);
        for (int i = 0; i < 6; i++)
        {
            Inventory.addChemical(i, 10000);
        }
        this.skipTour();
        Tutorials.completeAllNPTtutorials();
        Inventory.saveInventoryData();
    }

    public void skipTour()
    {
        this.startTour();
        this.setTourProgress(7);
    }

    public void unlockAllResearch()
    {
        for (int i = 0; i < ResearchList.allTasksAvailable.Count; i++)
        {
            Inventory.data.completedResearch.Add(ResearchList.allTasksAvailable[i].id);
            Inventory.data.researchCompletion = 1f;
        }
    }

    public void proceedToGame(string saveName)
    {
        this.newsWindow.SetActive(false);
        UserSettings.data.activeUser = saveName;
        UserSettings.saveSettings();
        Inventory.loadInventoryData();
        LayoutManager.loadLayouts();
        this.initCharacterManager();
        this.choosingSaveName = false;
        this.selectingSave = false;
        this.titleOpen = false;
        this.waitingForLoadPlayerCharacter = true;
        if (RacknetMultiplayer.lobbyConnectionStatus == 0 && PlayerPrefs.HasKey("savedEmail") && PlayerPrefs.HasKey("savedPasswordHash") && UserSettings.data.autoJoinRacknet)
        {
            RacknetMultiplayer.login(PlayerPrefs.GetString("savedEmail"), PlayerPrefs.GetString("savedPasswordHash"), false, true);
        }
    }

    public void OnApplicationQuit()
    {
        for (int i = 0; i < this.characters.Count; i++)
        {
            this.characters[i].kill();
        }
        this.characters = new List<RackCharacter>();
        RackCharacter.allPieceBundle.bundle.Unload(true);
        RackCharacter.allPieceBundle = null;
        Resources.UnloadUnusedAssets();
        Objectives.kill();
        RacknetMultiplayer.kill();
        base.StopAllCoroutines();
        try
        {
            RackCharacter.allPieceBundle.seamFixThread.Abort();
        }
        catch
        {
        }
    }

    public void returnToTitle()
    {
        for (int i = 0; i < this.characters.Count; i++)
        {
            this.characters[i].kill();
        }
        this.characters = new List<RackCharacter>();
        RackCharacter.allPieceBundle.bundle.Unload(true);
        RackCharacter.allPieceBundle = null;
        Resources.UnloadUnusedAssets();
        SceneManager.LoadScene(0);
        this.weAlreadyKnowPC = false;
    }

    public void loadPlayerCharacter()
    {
        if (CharacterManager.data.playerCharacter == string.Empty || CharacterManager.data.playerCharacter == null)
        {
            CharacterManager.data.playerCharacter = UserSettings.data.activeUser.Split(new string[1]
            {

            }, StringSplitOptions.None)[0] + "." + Guid.NewGuid();
        }
        CharacterData character = CharacterManager.getCharacter(CharacterManager.data.playerCharacter);
        if (character.name == string.Empty || character.name == null)
        {
            character.name = UserSettings.data.activeUser.Split(new string[1]
            {

            }, StringSplitOptions.None)[0];
        }
        this.v3 = Vector3.zero;
        this.v3.x = -1f;
        this.v3.y = 4.5f;
        this.v3.z = -14.5f;
        this.characters.Add(new RackCharacter(this, character, true, this.v3, 342f, string.Empty));
        this.characters[this.characters.Count - 1].uid = this.nextCharUID;
        this.nextCharUID++;
        this.firstThinking = true;
        this.needNPCzoneForce = true;
    }

    public RackCharacter getCharacterByUID(int uid)
    {
        for (int num = this.characters.Count - 1; num >= 0; num--)
        {
            if (this.characters[num].uid == uid)
            {
                return this.characters[num];
            }
        }
        return null;
    }

    public void addCharacter(RackCharacter character)
    {
        this.characters.Add(character);
        this.characters[this.characters.Count - 1].uid = this.nextCharUID;
        this.nextCharUID++;
    }

    public void removeCharacter(RackCharacter character)
    {
        character.kill();
        for (int num = this.characters.Count - 1; num >= 0; num--)
        {
            if (this.characters[num].uid == character.uid)
            {
                this.characters.RemoveAt(num);
            }
        }
        Resources.UnloadUnusedAssets();
    }

    public bool nameAlreadyInUse(string name, int alt)
    {
        string text = name;
        if (alt > 0)
        {
            text = text + " (" + (alt + 1) + ")";
        }
        bool result = false;
        int num = 0;
        while (num < UserSettings.data.users.Count)
        {
            if (!(UserSettings.data.users[num] == text))
            {
                num++;
                continue;
            }
            result = true;
            break;
        }
        return result;
    }

    public static string formatTime(int secs, bool alwaysIncludeHours = true)
    {
        string text = string.Empty + secs % 60;
        string text2 = string.Empty + Mathf.Floor((float)(secs / 60)) % 60f;
        string text3 = string.Empty + Mathf.Floor((float)(secs / 3600));
        if (text.Length < 2)
        {
            text = "0" + text;
        }
        if (text2.Length < 2)
        {
            text2 = "0" + text2;
        }
        if (!(Mathf.Floor((float)(secs / 3600)) > 0f) && !alwaysIncludeHours)
        {
            return text2 + ":" + text;
        }
        return text3 + ":" + text2 + ":" + text;
    }

    public void zSort(List<GameObject> things)
    {
        List<GameObject> list = things.OrderByDescending(delegate (GameObject o)
        {
            Vector3 position = o.transform.position;
            return position.z;
        }).ToList();
        for (int i = 0; i < list.Count; i++)
        {
            list[i].transform.SetSiblingIndex(i);
        }
    }

    public static float cap(float val, float min = 0f, float max = 1f)
    {
        if (val < min)
        {
            val = min;
        }
        if (val > max)
        {
            val = max;
        }
        return val;
    }

    public static float smoothLerp(float t, float edgeBias = 2f)
    {
        float num = 0.5f;
        float num2 = Math.Abs((t - 0.5f) * 2f);
        num2 = 1f - Mathf.Pow(1f - num2, edgeBias);
        num = ((!(t > 0.5f)) ? (num - num2 / 2f) : (num + num2 / 2f));
        if (num == float.PositiveInfinity)
        {
            UnityEngine.Debug.Log("INFINITY in smoothLerp: " + t + "," + edgeBias);
            if (Game.gameInstance.PC() != null)
            {
                UnityEngine.Debug.Log(Game.gameInstance.PC().interactionStartCenter + "," + Game.gameInstance.PC().mX);
            }
        }
        return Game.cap(num, 0f, 1f);
    }

    private void processChemicals()
    {
        this.UI.transform.Find("ChemicalWindow").gameObject.SetActive(this.anyResearchHotspotBeingUsed || this.chemicalSynthesisMenuOpen);
        this.currencyHUDopen = (this.anyResearchHotspotBeingUsed || this.chemicalSynthesisMenuOpen);
        this.v3 = Vector3.zero;
        this.v3.x = -512f;
        this.v3.y = 230f;
        if (this.timeSinceWastedSpecimen > 7f || this.UIinUse || this.PC().interactionSubject != null || this.inventoryOpen)
        {
            this.v3.x -= 360f;
            this.timeSpecimenWarningHasBeenOpen = 0f;
        }
        else
        {
            this.timeSpecimenWarningHasBeenOpen += Time.deltaTime;
            this.SpecimenCapacityWarning.Find("bg").gameObject.SetActive(this.timeSpecimenWarningHasBeenOpen < 7f);
            this.SpecimenCapacityWarning.Find("txtWarning").gameObject.SetActive(this.timeSpecimenWarningHasBeenOpen < 7f);
            this.SpecimenCapacityWarning.Find("txtDescription").gameObject.SetActive(this.timeSpecimenWarningHasBeenOpen < 7f);
            ((UnityEngine.Component)this.SpecimenCapacityWarning.Find("bg")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap(7f - this.timeSpecimenWarningHasBeenOpen, 0f, 1f));
            ((UnityEngine.Component)this.SpecimenCapacityWarning.Find("txtWarning")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap(7f - this.timeSpecimenWarningHasBeenOpen, 0f, 1f));
            ((UnityEngine.Component)this.SpecimenCapacityWarning.Find("txtDescription")).GetComponent<CanvasRenderer>().SetAlpha(Game.cap(7f - this.timeSpecimenWarningHasBeenOpen, 0f, 1f));
        }
        if (!this.UIinUse)
        {
            this.timeSinceWastedSpecimen += Time.deltaTime;
        }
        Transform specimenCapacityWarning = this.SpecimenCapacityWarning;
        specimenCapacityWarning.localPosition += (this.v3 - this.SpecimenCapacityWarning.localPosition) * Game.cap(Time.deltaTime * 13f, 0f, 1f);
        if (this.currencyHUDopen)
        {
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM0_ALT))
            {
                ResearchGrid.selectedColor = 0;
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM1_ALT))
            {
                ResearchGrid.selectedColor = 1;
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM2_ALT))
            {
                ResearchGrid.selectedColor = 2;
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM3_ALT))
            {
                ResearchGrid.selectedColor = 3;
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM4_ALT))
            {
                ResearchGrid.selectedColor = 4;
                UISFX.clickSFX(string.Empty);
            }
            if (Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5) || Input.GetKeyDown(UserSettings.data.KEY_SELECTITEM5_ALT))
            {
                ResearchGrid.selectedColor = 5;
                UISFX.clickSFX(string.Empty);
            }
        }
        for (int i = 0; i < 6; i++)
        {
            this.chemical_display[i] += (Inventory.data.chemicals[i] - this.chemical_display[i]) * 0.4f;
            this.chemicalWindowChemTexts[i].text = Mathf.FloorToInt(this.chemical_display[i]).ToString();
            if (this.currencyHUDopen)
            {
                Transform obj = this.chemicalWindowChems[i];
                Vector3 localPosition = this.chemicalWindowChems[i].localPosition;
                obj.Translate(0f, (40f - localPosition.y) * (0.15f + (float)i / 30f) * Time.deltaTime, 0f);
                Transform obj2 = this.chemicalWindowChems[i];
                Vector3 localEulerAngles = this.chemicalWindowChems[i].localEulerAngles;
                obj2.Rotate((0f - localEulerAngles.x) * (0.1f + (float)i / 30f) * 10f * Time.deltaTime, 0f, 0f);
            }
            else
            {
                Transform obj3 = this.chemicalWindowChems[i];
                Vector3 localPosition2 = this.chemicalWindowChems[i].localPosition;
                obj3.Translate(0f, (-100f - localPosition2.y) * (0.15f + (float)i / 30f) * Time.deltaTime * 0.5f, 0f);
                Transform obj4 = this.chemicalWindowChems[i];
                Vector3 localEulerAngles2 = this.chemicalWindowChems[i].localEulerAngles;
                obj4.Rotate((85f - localEulerAngles2.x) * (0.15f + (float)i / 30f) * 6f * Time.deltaTime, 0f, 0f);
            }
            this.v3 = this.chemicalWindowChems[i].localPosition;
            if (this.v3.y < -100f)
            {
                this.v3.y = -100f;
            }
            if (this.v3.y > 40f)
            {
                this.v3.y = 40f;
            }
            this.v3.z = 0f;
            this.chemicalWindowChems[i].localPosition = this.v3;
            if (i == ResearchGrid.selectedColor || this.chemicalSynthesisMenuOpen)
            {
                Transform obj5 = this.chemicalWindowChems[i];
                obj5.localScale += (Vector3.one - this.chemicalWindowChems[i].localScale) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
            }
            else
            {
                Transform obj6 = this.chemicalWindowChems[i];
                obj6.localScale += (Vector3.one * 0.5f - this.chemicalWindowChems[i].localScale) * Game.cap(Time.deltaTime * 11f, 0f, 1f);
            }
        }
    }

    private void processCurrency()
    {
        this.UI.transform.Find("CurrencyWindow").gameObject.SetActive(true);
        this.fekel_display += ((float)Inventory.data.money - this.fekel_display) * 0.4f;
        if (this.fekel_display < 0f)
        {
            this.fekel_display = 0f;
        }
        this.specimen_display += (Inventory.data.totalSpecimen - this.specimen_display) * 0.4f;
        if (this.specimen_display < 0f)
        {
            this.specimen_display = 0f;
        }
        if (Mathf.Round(this.fekel_display) != (float)Inventory.data.money)
        {
            this.currencyCatchingUp = 1f;
        }
        if (this.anythingLoading || this.recentThinking > 0f)
        {
            this.currencyCatchingUp = 0f;
        }
        if (this.currencyCatchingUp > 0f)
        {
            this.currencyCatchingUp -= Time.deltaTime;
            this.showCurrency = true;
        }
        if (this.shopOpen)
        {
            this.showCurrency = true;
        }
        if (this.showCurrency)
        {
            ((UnityEngine.Component)this.UI.transform.Find("CurrencyWindow").Find("fekels").Find("txt")).GetComponent<Text>().text = Mathf.Round(this.fekel_display).ToString();
        }
        this.v3 = this.UI.transform.Find("CurrencyWindow").localEulerAngles;
        if (this.showCurrency)
        {
            this.v3.y += Game.degreeDist(this.v3.y, -30f) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
        }
        else
        {
            this.v3.y += Game.degreeDist(this.v3.y, -160f) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
        }
        this.UI.transform.Find("CurrencyWindow").localEulerAngles = this.v3;
        this.showCurrency = false;
    }

    public void createHeadshot(RackCharacter character, NFDelegate callback = null, float camDist = 1f)
    {
        this.headshotSubject = character;
        this.headshotSubjectUID = this.headshotSubject.uid;
        this.renderCam.SetActive(true);
        this.renderingHeadshot = true;
        this.callbackAfterHeadshot = callback;
        this.headshotCamDist = camDist;
    }

    public void takeSnapshot()
    {
        if (!this.PC().buildingTexture && !this.PC().waitingForTextureBuilder)
        {
            this.renderingHeadshot = false;
            this.headshotSubjectUID = -1;
            this.renderCam.SetActive(false);
            new FileInfo(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty).Directory.Create();
            this.mostRecentSnapshot = new Texture2D(this.renderCam.GetComponent<RenderCam>().snapshot.width, this.renderCam.GetComponent<RenderCam>().snapshot.height);
            this.mostRecentSnapshot.SetPixels(this.renderCam.GetComponent<RenderCam>().snapshot.GetPixels());
            File.WriteAllBytes(Application.persistentDataPath + string.Empty + Game.PathDirectorySeparatorChar + "characterAvatars" + Game.PathDirectorySeparatorChar + string.Empty + this.headshotSubject.data.uid + ".png", this.renderCam.GetComponent<RenderCam>().snapshot.EncodeToPNG());
            Inventory.data.profilePic = this.headshotSubject.data.uid;
            Inventory.saveInventoryData();
            this.waitingOnPostCustomizationSnapshot = false;
            if (this.callbackAfterHeadshot != null)
            {
                this.callbackAfterHeadshot();
                this.callbackAfterHeadshot = null;
            }
        }
    }

    private void processRenderCam()
    {
        if (this.renderingHeadshot)
        {
            this.v3 = Vector3.zero;
            ref Vector3 val = ref this.v3;
            Vector3 lossyScale = this.headshotSubject.bones.Head.lossyScale;
            val.x = lossyScale.x * -0.15f * this.headshotCamDist;
            ref Vector3 val2 = ref this.v3;
            Vector3 lossyScale2 = this.headshotSubject.bones.Head.lossyScale;
            val2.z = lossyScale2.x * -1.8f * this.headshotCamDist;
            ref Vector3 val3 = ref this.v3;
            Vector3 lossyScale3 = this.headshotSubject.bones.Head.lossyScale;
            val3.y = lossyScale3.x * 0.45f * this.headshotCamDist;
            this.renderCam.transform.position = this.headshotSubject.bones.Head.TransformPoint(this.v3);
            this.renderCam.transform.LookAt(this.headshotSubject.bones.Head);
        }
    }

    public void FixedUpdate()
    {
        if (this.ADT == 0f)
        {
            this.ADT = Time.deltaTime;
        }
        this.ADT += (Time.deltaTime - this.ADT) * 0.1f;
        if (Time.deltaTime / this.ADT > 2f)
        {
            if (this.interactions.Count > 0)
            {
                UnityEngine.Debug.Log("Skipping a laggy frame: " + Time.deltaTime);
            }
        }
        else
        {
            Cum.process();
            for (int i = 0; i < this.characters.Count; i++)
            {
                this.characters[i].FixedUpdate();
            }
            this.processInteractions();
            this.processRenderCam();
            this.processCamera();
            this.mouseChangeSinceLastFixedUpdate = Vector3.zero;
            Game.thereHasBeenAtLeastOneFixedUpdate = true;
        }
    }

    public void postRender()
    {
        this.pcc = -1;
        for (int i = 0; i < this.characters.Count; i++)
        {
            if (this.characters[i].controlledByPlayer)
            {
                this.pcc = i;
            }
            else
            {
                this.characters[i].postRender();
            }
        }
        if (this.pcc != -1)
        {
            this.characters[this.pcc].postRender();
        }
        if (this.takingResearchTransitionScreenshot)
        {
            this.transitionTex = new Texture2D(Screen.width, Screen.height);
            this.transitionTex.ReadPixels(new Rect(0f, 0f, (float)Screen.width, (float)Screen.height), 0, 0);
            this.transitionTex.Apply();
            this.UI.transform.Find("WorldTransition").Find("img").gameObject.SetActive(true);
            ((UnityEngine.Component)this.UI.transform.Find("WorldTransition").Find("img")).GetComponent<RawImage>().texture = this.transitionTex;
            if (this.inResearchMode)
            {
                RackCharacter rackCharacter = this.PC();
                Vector3 position = this.ResearchHologram.transform.Find("playerContainer").position;
                float x = position.x;
                Vector3 position2 = this.ResearchHologram.transform.Find("playerContainer").position;
                float y = position2.y;
                Vector3 position3 = this.ResearchHologram.transform.Find("playerContainer").position;
                float z = position3.z;
                Vector3 localEulerAngles = this.PC().GO.transform.localEulerAngles;
                rackCharacter.teleport(x, y, z, localEulerAngles.y, true);
                Material material = new Material(((UnityEngine.Component)this.ResearchHologram.transform.Find("mat")).GetComponent<MeshRenderer>().material.shader);
                material.CopyPropertiesFromMaterial(((UnityEngine.Component)this.ResearchHologram.transform.Find("mat")).GetComponent<MeshRenderer>().material);
                for (int j = 0; j < this.PC().parts.Count; j++)
                {
                    this.PC().parts[j].GetComponent<SkinnedMeshRenderer>().material = material;
                }
                for (int k = 0; k < this.PC().clothingPiecesEquipped.Count; k++)
                {
                    this.PC().clothingPiecesEquipped[k].GetComponent<SkinnedMeshRenderer>().material = material;
                }
                for (int l = 0; l < this.PC().hairAppendages.Count; l++)
                {
                    this.PC().hairAppendages[l].appendage.GetComponentInChildren<SkinnedMeshRenderer>().material = material;
                }
            }
            else
            {
                RackCharacter rackCharacter2 = this.PC();
                float x2 = this.locationBeforeEnteringResearchHologram.x;
                float y2 = this.locationBeforeEnteringResearchHologram.y;
                float z2 = this.locationBeforeEnteringResearchHologram.z;
                Vector3 localEulerAngles2 = this.PC().GO.transform.localEulerAngles;
                rackCharacter2.teleport(x2, y2, z2, localEulerAngles2.y, false);
                Material material2 = new Material(this.shader);
                material2.CopyPropertiesFromMaterial(this.defaultMaterial);
                for (int m = 0; m < this.PC().parts.Count; m++)
                {
                    this.PC().parts[m].GetComponent<SkinnedMeshRenderer>().material = material2;
                }
                this.PC().buildTexture();
                this.PC().updateClothingBasedOnInventory();
            }
            this.takingResearchTransitionScreenshot = false;
        }
    }

    public void processAudio()
    {
        if (this.threadSoundsQueued.Count > 0)
        {
            this.playSound(this.threadSoundsQueued[0], this.threadSoundsQueued_vol[0], this.threadSoundsQueued_pitch[0]);
            this.threadSoundsQueued.RemoveAt(0);
            this.threadSoundsQueued_vol.RemoveAt(0);
            this.threadSoundsQueued_pitch.RemoveAt(0);
        }
        if (this.firstPersonMode)
        {
            this.v3 = this.camPos_actual;
        }
        else
        {
            this.v3 = (this.camPos_actual * 1f + this.camTarget_actual * 4f) / 5f;
        }
        Transform transform = this.audioListener.transform;
        transform.position += (this.v3 - this.audioListener.transform.position) * Game.cap(Time.deltaTime * 10f, 0f, 1f);
        this.audioListener.transform.rotation = this.mainCam.transform.parent.rotation;
        bool flag = false;
        if (this.PC() != null && !this.PC().data.created)
        {
            flag = true;
        }
        this.newGameFadeIn = (flag && (this.anythingLoading || this.rtBlur > 0.02f));
        if (flag || this.newGameFadeIn || this.firstCustomizationSpeciesSelection || this.waitingOnPostCustomizationSnapshot || this.justTeleportedToHallway > 0f || this.renderingHeadshot)
        {
            this.volWorld += (0f - this.volWorld) * Game.cap(Time.deltaTime * 0.19f, 0f, 1f);
            this.volBGM += (0f - this.volBGM) * Game.cap(Time.deltaTime * 0.19f, 0f, 1f);
            if (this.QSClipboardTransition < 1f)
            {
                this.volUI += (0f - this.volUI) * Game.cap(Time.deltaTime * 0.19f, 0f, 1f);
            }
            else
            {
                this.volUI += (1f - this.volUI) * Game.cap(Time.deltaTime * 0.5f, 0f, 1f);
            }
        }
        else
        {
            this.volUI += (1f - this.volUI) * Game.cap(Time.deltaTime * 0.5f, 0f, 1f);
            if (this.titleOpen || this.anythingLoading || this.PC() == null || this.pauseOpen)
            {
                bool flag2 = this.UI.transform.Find("TitleWindow").Find("splashcolor").gameObject.activeSelf || this.anythingLoading;
                if (this.titleOpen)
                {
                    Color color = ((UnityEngine.Component)this.UI.transform.Find("TitleWindow").Find("bg")).GetComponent<Image>().color;
                    if (color.a > 0.9f)
                    {
                        this.volWorld += (0f - this.volWorld) * Game.cap(Time.deltaTime * 3f, 0f, 1f);
                        flag2 = true;
                    }
                }
                if (!flag2)
                {
                    this.volWorld += (0.5f - this.volWorld) * Game.cap(Time.deltaTime * 0.9f, 0f, 1f);
                }
                else if (this.volWorld > 1f - this.loadTransition)
                {
                    this.volWorld = 1f - this.loadTransition;
                }
            }
            else
            {
                this.volWorld += (1f - this.volWorld) * Game.cap(Time.deltaTime * 0.9f, 0f, 1f);
            }
            bool flag3 = false;
            bool flag4 = false;
            if (this.PC() != null)
            {
                flag3 = (this.customizingCharacter && Inventory.getCharVar("startingStuffGiven") == 0f);
                flag4 = (this.PC().interactionSubject != null);
            }
            if (this.customizingCharacter && flag3)
            {
                this.volBGM += (0f - this.volBGM) * Game.cap(Time.deltaTime * 0.15f, 0f, 1f);
            }
            else if (flag4)
            {
                this.volBGM += (0.35f - this.volBGM) * Game.cap(Time.deltaTime * 0.9f, 0f, 1f);
            }
            else if (this.titleOpen || this.anythingLoading || this.pauseOpen || this.customizingCharacter || this.inResearchMode)
            {
                this.volBGM += (0.55f - this.volBGM) * Game.cap(Time.deltaTime * 0.9f, 0f, 1f);
            }
            else
            {
                this.volBGM += (0.45f - this.volBGM) * Game.cap(Time.deltaTime * 0.15f, 0f, 1f);
            }
        }
        this.mixer.SetFloat("volMaster", (1f - Mathf.Pow(1f - this.vol * UserSettings.data.vol, 3f) - 1f) * 80f);
        this.mixer.SetFloat("volWorld", (1f - Mathf.Pow(1f - this.volWorld * UserSettings.data.volWorld, 3f) - 1f) * 80f);
        this.mixer.SetFloat("volUI", (1f - Mathf.Pow(1f - this.volUI * UserSettings.data.volUI, 3f) - 1f) * 80f);
        this.mixer.SetFloat("volBGM", (1f - Mathf.Pow(1f - this.volBGM * UserSettings.data.volBGM, 3f) - 1f) * 80f);
        this.reverb += (this.tarReverb - this.reverb) * Game.cap(Time.deltaTime * 4f, 0f, 1f);
        this.mixer.SetFloat("Reverb_Room", -2000f * Mathf.Pow(1f - this.reverb, 3f));
        this.mixer.SetFloat("Reverb_DecayTime", 0.1f + 15.0999994f * this.reverb);
        this.mixer.SetFloat("Reverb_Reverb", -100f + -1900f * this.reverb);
        this.mixer.SetFloat("Reverb_Reflections", -100f + -1000f * this.reverb);
        BGM.process();
    }

    public void popup(string messagePhrase, bool criticalPopup = false, bool alreadyTranslated = false)
    {
        if (this.anythingLoading && !criticalPopup)
        {
            return;
        }
        if (!this.popupOpen)
        {
            this.playSound("ui_warning", 1f, 1f);
        }
        this.popupOpen = true;
        this.popupPhrase = messagePhrase;
        this.popupPhraseIsAlreadyTranslated = alreadyTranslated;
    }

    public void processZoneCulling()
    {
        if (this.fakeAmbientLights.Length == 0)
        {
            this.fakeAmbientLights = ((UnityEngine.Component)this.World.transform.Find("FakeAmbientForRooms")).GetComponentsInChildren<Light>();
            this.fakeAmbient = this.World.transform.Find("FakeAmbientForRooms");
        }
        for (int i = 0; i < this.fakeAmbientLights.Length; i++)
        {
            Light obj = this.fakeAmbientLights[i];
            obj.color += (this.fakeAmbientTargetColor - this.fakeAmbientLights[i].color) * Game.cap(Time.deltaTime * 1.5f, 0f, 1f);
            this.fakeAmbientLights[i].intensity += (this.fakeAmbientTargetIntensity - this.fakeAmbientLights[i].intensity) * Game.cap(Time.deltaTime * 1.5f, 0f, 1f);
            Light obj2 = this.fakeAmbientLights[i];
            Color color = this.fakeAmbientLights[i].color;
            obj2.enabled = (color.b > 0.01f);
        }
        RenderSettings.fogColor = this.fakeAmbientLights[0].color;
        RenderSettings.fogMode = FogMode.Exponential;
        this.fogDensity += (this.tarFogDensity * 0.5f - this.fogDensity) * Game.cap(Time.deltaTime * 9f, 0f, 1f);
        RenderSettings.fogDensity = this.fogDensity;
        this.fakeAmbientTargetIntensity = 0.1f;
        if (this.PC() != null)
        {
            this.fakeAmbient.position = this.PC().GO.transform.position;
        }
        bool flag = false;
        this.inTestRoom = false;
        flag = (((UnityEngine.Component)GameObject.Find("World").transform.Find("Lobby").Find("Doors and Windows").Find("Glass Door")).GetComponent<AutomaticSlidingDoor>().doorOpen || this.currentZone == "Outside");
        if (this.titleOpen || this.creditsOpen)
        {
            flag = true;
        }
        if (!flag && this.PC() == null)
        {
            flag = true;
        }
        if (this.inResearchMode)
        {
            if (this.currentZone != "Hologram")
            {
                this.zoneBeforeHologram = this.currentZone;
            }
            this.currentZone = "Hologram";
            this.fakeAmbientTargetColor.r = 0f;
            this.fakeAmbientTargetColor.g = 0.05f;
            this.fakeAmbientTargetColor.b = 0.1f;
            this.tarFogDensity = 0.001f;
        }
        else if (this.currentZone == "Hologram")
        {
            this.currentZone = this.zoneBeforeHologram;
        }
        float num = 1f;
        if (this.PC() != null)
        {
            Vector3 position = this.PC().GO.transform.position;
            num = position.z;
        }
        this.v3 = this.mainCam.transform.InverseTransformPoint(this.World.transform.Find("Outside").position + Vector3.forward * 10f);
        this.World.transform.Find("Outside").Find("FakeOutside").gameObject.SetActive(!flag && (this.v3.z > 0f || this.currentZone == "Outside" || num > 0f));
        this.World.transform.Find("Outside").Find("FarGeom").gameObject.SetActive(flag && (this.v3.z > 0f || this.currentZone == "Outside" || num > 0f));
        this.World.transform.Find("Outside").Find("titleRain").gameObject.SetActive(this.PC() == null || this.creditsOpen);
        this.World.transform.Find("Lobby").Find("Lights").gameObject.SetActive(this.PC() != null && !this.creditsOpen);
        this.World.transform.Find("Lobby").Find("Decor").gameObject.SetActive(this.PC() != null && !this.creditsOpen);
        if (this.PC() == null || this.creditsOpen)
        {
            this.World.transform.Find("Lobby").gameObject.SetActive(true);
            this.World.transform.Find("Connector").gameObject.SetActive(false);
            this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(false);
            this.World.transform.Find("Lab").gameObject.SetActive(false);
            this.World.transform.Find("Rooms").gameObject.SetActive(false);
            this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
            this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
            this.World.transform.Find("Outside").gameObject.SetActive(true);
            this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
            this.lastZone = string.Empty;
            this.currentZone = "Lobby";
            this.fakeAmbientTargetColor.r = 1f;
            this.fakeAmbientTargetColor.g = 0.392156869f;
            this.fakeAmbientTargetColor.b = 0.06f;
            this.tarFogDensity = 0.001f;
        }
        else if (this.customizingCharacter)
        {
            this.World.transform.Find("Lobby").gameObject.SetActive(false);
            this.World.transform.Find("Connector").gameObject.SetActive(true);
            this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(true);
            this.World.transform.Find("Lab").gameObject.SetActive(false);
            this.World.transform.Find("Rooms").gameObject.SetActive(false);
            this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
            this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
            this.World.transform.Find("Outside").gameObject.SetActive(false);
            this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
            this.lastZone = string.Empty;
            this.currentZone = "Showers";
        }
        else
        {
            if (this.currentZone == "Room0" || this.currentZone == "Room1" || this.currentZone == "Room2")
            {
                this.inTestRoom = true;
                bool flag2 = false;
                for (int j = 0; j < this.labDoors.Length; j++)
                {
                    if (this.labDoors[j].doorOpen)
                    {
                        flag2 = true;
                    }
                }
                if (flag2 != this.wasAnyLabDoorOpen)
                {
                    this.World.transform.Find("Connector").gameObject.SetActive(flag2);
                    this.World.transform.Find("Lab").gameObject.SetActive(flag2);
                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(flag2);
                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(flag2);
                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(flag2);
                    this.wasAnyLabDoorOpen = flag2;
                }
            }
            if (this.needNPCzoneForce)
            {
                this.World.transform.Find("Lobby").gameObject.SetActive(true);
                this.World.transform.Find("Connector").gameObject.SetActive(true);
                this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(true);
                this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(true);
                this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(true);
                this.World.transform.Find("Lab").gameObject.SetActive(true);
                this.World.transform.Find("Outside").gameObject.SetActive(true);
                this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
                if ((Game.loadingAnyCharacters || this.characters.Count <= 1) && NPC.NPCsAllowed)
                {
                    return;
                }
                this.needNPCzoneForce = false;
            }
            else
            {
                if (this.currentZone != this.lastZone)
                {
                    this.tarFogDensity = 0.002f;
                    this.fakeAmbientTargetColor.r = 1f;
                    this.fakeAmbientTargetColor.g = 0.392156869f;
                    this.fakeAmbientTargetColor.b = 0.06f;
                    string text = this.currentZone;
                    if (text != null)
                    {
                        Dictionary<string, int> dictionary = new Dictionary<string, int>(12);
                        dictionary.Add("Lobby", 0);
                        dictionary.Add("Outside", 1);
                        dictionary.Add("LobbyHall", 2);
                        dictionary.Add("Showers", 3);
                        dictionary.Add("LabEntrance", 4);
                        dictionary.Add("LabTower", 5);
                        dictionary.Add("LabTowerLower", 6);
                        dictionary.Add("LabFloor", 7);
                        dictionary.Add("Room0", 8);
                        dictionary.Add("Room1", 9);
                        dictionary.Add("Room2", 10);
                        dictionary.Add("Hologram", 11);
                        int num2 = default(int);
                        if (dictionary.TryGetValue(text, out num2))
                        {
                            switch (num2)
                            {
                                case 0:
                                    this.fakeAmbientTargetColor.r = 1f;
                                    this.fakeAmbientTargetColor.g = 0.392156869f;
                                    this.fakeAmbientTargetColor.b = 0.06f;
                                    this.World.transform.Find("Lobby").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(true);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.tarReverb = 0.2f;
                                    break;
                                case 1:
                                    this.fakeAmbientTargetColor.r = 1f;
                                    this.fakeAmbientTargetColor.g = 0.392156869f;
                                    this.fakeAmbientTargetColor.b = 0.06f;
                                    this.World.transform.Find("Lobby").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(true);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.tarReverb = 0.2f;
                                    this.tarFogDensity = 0.001f;
                                    break;
                                case 2:
                                    this.World.transform.Find("Lobby").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(true);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.tarReverb = 0.05f;
                                    this.tarFogDensity = 0.004f;
                                    break;
                                case 3:
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
                                    this.tarReverb = 0.15f;
                                    this.fakeAmbientTargetColor.r = 1f;
                                    this.fakeAmbientTargetColor.g = 0.9019608f;
                                    this.fakeAmbientTargetColor.b = 0.784313738f;
                                    this.tarFogDensity = 0.005f;
                                    break;
                                case 4:
                                    this.fakeAmbientTargetColor.r = 0f;
                                    this.fakeAmbientTargetColor.g = 0.784313738f;
                                    this.fakeAmbientTargetColor.b = 1f;
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(true);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
                                    this.tarReverb = 0.8f;
                                    this.tarFogDensity = 0.002f;
                                    break;
                                case 5:
                                    this.fakeAmbientTargetColor.r = 1f;
                                    this.fakeAmbientTargetColor.g = 0.784313738f;
                                    this.fakeAmbientTargetColor.b = 0.06f;
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(true);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
                                    this.tarReverb = 0.25f;
                                    this.tarFogDensity = 0.007f;
                                    break;
                                case 6:
                                    this.fakeAmbientTargetColor.r = 0f;
                                    this.fakeAmbientTargetColor.g = 0.8627451f;
                                    this.fakeAmbientTargetColor.b = 1f;
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(true);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
                                    this.tarReverb = 0.1f;
                                    this.tarFogDensity = 0.009f;
                                    break;
                                case 7:
                                    this.fakeAmbientTargetColor.r = 0f;
                                    this.fakeAmbientTargetColor.g = 0.784313738f;
                                    this.fakeAmbientTargetColor.b = 1f;
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(true);
                                    this.World.transform.Find("Connector").Find("Showers").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(true);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(true);
                                    this.tarReverb = 1f;
                                    this.tarFogDensity = 0.002f;
                                    break;
                                case 8:
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.tarReverb = 0.15f;
                                    this.enteredTestRoom(0);
                                    this.tarFogDensity = 0.004f;
                                    break;
                                case 9:
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.tarReverb = 0.15f;
                                    this.enteredTestRoom(1);
                                    this.tarFogDensity = 0.004f;
                                    break;
                                case 10:
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(true);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(true);
                                    this.World.transform.Find("Lab").Find("LabShaft").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").Find("Garage").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(true);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.tarReverb = 0.15f;
                                    this.enteredTestRoom(2);
                                    this.tarFogDensity = 0.004f;
                                    break;
                                case 11:
                                    this.World.transform.Find("Lobby").gameObject.SetActive(false);
                                    this.World.transform.Find("Connector").gameObject.SetActive(false);
                                    this.World.transform.Find("Lab").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror0")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror1")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("lab_structure").Find("Assets").Find("mirror2")
                                        .gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room0").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room1").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Room2").gameObject.SetActive(false);
                                    this.World.transform.Find("Rooms").Find("Pit").gameObject.SetActive(false);
                                    this.World.transform.Find("Outside").gameObject.SetActive(false);
                                    this.World.transform.Find("ClientOffice").gameObject.SetActive(false);
                                    this.fakeAmbientTargetColor.r = 0f;
                                    this.fakeAmbientTargetColor.g = 0.784313738f;
                                    this.fakeAmbientTargetColor.b = 1f;
                                    this.tarReverb = 1f;
                                    this.tarFogDensity = 0.002f;
                                    break;
                            }
                        }
                    }
                    this.lastZone = this.currentZone;
                }
                if (!(this.currentZone == "Room0") && !(this.currentZone == "Room1") && !(this.currentZone == "Room2"))
                {
                    return;
                }
                switch (this.currentZone)
                {
                    case "Room0":
                        this.fakeAmbientTargetColor.r = 0.4627451f;
                        this.fakeAmbientTargetColor.g = 0.709803939f;
                        this.fakeAmbientTargetColor.b = 1f;
                        this.tarFogDensity = 0.004f;
                        break;
                    case "Room1":
                        this.fakeAmbientTargetColor.r = 0.5019608f;
                        this.fakeAmbientTargetColor.g = 0.5019608f;
                        this.fakeAmbientTargetColor.b = 0.5803922f;
                        this.tarFogDensity = 0.004f;
                        break;
                    case "Room2":
                        this.fakeAmbientTargetColor.r = 1f;
                        this.fakeAmbientTargetColor.g = 0.6313726f;
                        this.fakeAmbientTargetColor.b = 0.4627451f;
                        this.tarFogDensity = 0.004f;
                        break;
                }
                DynamicLight[] componentsInChildren = ((UnityEngine.Component)this.World.transform.Find("Rooms").Find(this.currentZone)).GetComponentsInChildren<DynamicLight>();
                for (int k = 0; k < componentsInChildren.Length; k++)
                {
                    if (((UnityEngine.Component)componentsInChildren[k]).GetComponentInChildren<Light>().enabled)
                    {
                        this.fakeAmbientTargetColor += ((UnityEngine.Component)componentsInChildren[k]).GetComponentInChildren<Light>().color * ((UnityEngine.Component)componentsInChildren[k]).GetComponentInChildren<Light>().intensity * (((UnityEngine.Component)componentsInChildren[k]).GetComponentInChildren<Light>().range / 60f) / (float)componentsInChildren.Length;
                        this.fakeAmbientTargetIntensity += ((UnityEngine.Component)componentsInChildren[k]).GetComponentInChildren<Light>().intensity * 0.01f;
                    }
                }
            }
        }
    }

    public RackCharacter PC()
    {
        if (this.weAlreadyKnowPC)
        {
            return this.knownPC;
        }
        for (int i = 0; i < this.characters.Count; i++)
        {
            if (this.characters[i].controlledByPlayer && this.characters[i].initted)
            {
                this.knownPC = this.characters[i];
                this.weAlreadyKnowPC = true;
                return this.characters[i];
            }
        }
        return null;
    }

    public void renderCharacters()
    {
    }

    public void forceCam(Vector3 pos, Vector3 tar)
    {
        this.forcedCameraPos = pos;
        this.forcedCameraTarget = tar;
        this.forcedCamera = 5;
    }

    public void processCamera()
    {
        this.mainCam.GetComponent<Camera>().allowHDR = !this.takingResearchTransitionScreenshot;
        RackCharacter rackCharacter = this.PC();
        if (Game.autoCamSpin)
        {
            this.camFollowAngle += Time.deltaTime * 0.7f;
        }
        if (rackCharacter != null)
        {
            rackCharacter.updateCameraFocusPoint();
        }
        if (rackCharacter != null && !this.creditsOpen)
        {
            if (Game.VRmode)
            {
                goto IL_028e;
            }
            goto IL_028e;
        }
        this.v3.x = -13.14f + Mathf.Cos(Time.time * 0.1f) * 3f;
        this.v3.y = 4.14f + Mathf.Sin(Time.time * 0.11f) * 1f;
        this.v3.z = 56.61f - Mathf.Pow(this.loadTransition, 2f) * 40f;
        if (this.creditsOpen)
        {
            Transform parent = Game.gameInstance.mainCam.transform.parent;
            parent.position += (this.v3 - Game.gameInstance.mainCam.transform.parent.position) * Game.cap(Time.deltaTime * 9f, 0f, 1f);
        }
        else
        {
            Game.gameInstance.mainCam.transform.parent.position = this.v3;
        }
        this.v3.x = 357f + this.titleCamSwayY;
        this.titleCamSwayX += ((this.mX - 0.5f) * 30f - this.titleCamSwayX) * Game.cap(Time.deltaTime * 0.9f, 0f, 1f);
        this.titleCamSwayY += ((this.mY - 0.5f) * 10f - this.titleCamSwayY) * Game.cap(Time.deltaTime * 0.9f, 0f, 1f);
        this.v3.y = 178f + this.titleCamSwayX;
        this.v3.z = 347f;
        Game.gameInstance.mainCam.transform.parent.localRotation = Quaternion.Euler(this.v3);
        if (this.creditsOpen)
        {
            this.DOFfocus.transform.position = this.mainCam.transform.position + Vector3.forward;
        }
        return;
    IL_028e:
        if (this.characterSelectorOpen)
        {
            this.v3 = this.World.transform.Find("Lab").Find("stasisTube" + this.characterSelector_currentSelected).Find("Root")
                .position + this.World.transform.Find("Lab").Find("stasisTube" + this.characterSelector_currentSelected).forward * 5f + this.World.transform.Find("Lab").Find("stasisTube" + this.characterSelector_currentSelected).right * 0.5f;
            this.v3.y += 3f;
            this.v32.x = 8.549997f;
            this.v32.y = -2f;
            this.v32.z = -148.65f;
            Transform parent2 = Game.gameInstance.mainCam.transform.parent;
            parent2.position += (this.v3 - Game.gameInstance.mainCam.transform.parent.position) * Game.cap(Time.deltaTime * 4f, 0f, 1f);
            Game.gameInstance.mainCam.transform.parent.position = this.v32 + (Game.gameInstance.mainCam.transform.parent.position - this.v32).normalized * 22f;
            this.v32.y = -9.3f;
            Game.gameInstance.mainCam.transform.parent.LookAt(this.v32 + Game.gameInstance.mainCam.transform.parent.right * 10.5f);
            this.camPos_actual = Game.gameInstance.mainCam.transform.parent.position;
            this.camTarget_actual = (this.camPos_actual * 5f + this.v32) / 6f;
            this.DOFfocus.transform.position = this.World.transform.Find("Lab").Find("stasisTube" + this.characterSelector_currentSelected).Find("Root")
                .position;
        }
        else
        {
            this.minCamDist = 1.5f;
            this.maxCamDist = 20f;
            if (this.forcedCamera > 0)
            {
                this.camPos += (this.forcedCameraPos - this.camPos) * Game.cap(Time.deltaTime * 3f, 0f, 1f);
                this.camTarget += (this.forcedCameraTarget - this.camTarget) * Game.cap(Time.deltaTime * 3f, 0f, 1f);
                this.forcedCamera--;
            }
            else
            {
                if (this.customizingCharacter)
                {
                    this.firstPersonMode = false;
                    if (Input.GetKey(UserSettings.data.KEY_ROTATE_LEFT) || Input.GetKey(UserSettings.data.KEY_STRAFE_LEFT))
                    {
                        this.recentCustomCamRot = 5f;
                        this.customCamRotVel -= Time.deltaTime;
                        if (this.customCamRotVel < -0.8f)
                        {
                            this.customCamRotVel = -0.8f;
                        }
                        if (this.customCamRotVel > 0f)
                        {
                            this.customCamRotVel *= 0.5f;
                        }
                        this.justChangedCustomizationPageAndNeedRecenter = false;
                    }
                    else if (Input.GetKey(UserSettings.data.KEY_ROTATE_RIGHT) || Input.GetKey(UserSettings.data.KEY_STRAFE_RIGHT))
                    {
                        this.recentCustomCamRot = 5f;
                        this.customCamRotVel += Time.deltaTime;
                        if (this.customCamRotVel > 0.8f)
                        {
                            this.customCamRotVel = 0.8f;
                        }
                        if (this.customCamRotVel < 0f)
                        {
                            this.customCamRotVel *= 0.5f;
                        }
                        this.justChangedCustomizationPageAndNeedRecenter = false;
                    }
                    else
                    {
                        this.customCamRotVel *= 0.5f;
                    }
                    if (Input.GetKey(UserSettings.data.KEY_ROTATE_UP) || Input.GetKey(UserSettings.data.KEY_WALK_FORWARD))
                    {
                        this.recentCustomCamRot = 5f;
                        this.customCamElevationVel -= Time.deltaTime;
                        if (this.customCamElevationVel < -1f)
                        {
                            this.customCamElevationVel = -1f;
                        }
                        if (this.customCamElevationVel > 0f)
                        {
                            this.customCamElevationVel *= 0.5f;
                        }
                        this.justChangedCustomizationPageAndNeedRecenter = false;
                    }
                    else if (Input.GetKey(UserSettings.data.KEY_ROTATE_DOWN) || Input.GetKey(UserSettings.data.KEY_WALK_BACKWARD))
                    {
                        this.recentCustomCamRot = 5f;
                        this.customCamElevationVel += Time.deltaTime;
                        if (this.customCamElevationVel > 1f)
                        {
                            this.customCamElevationVel = 1f;
                        }
                        if (this.customCamElevationVel < 0f)
                        {
                            this.customCamElevationVel *= 0.5f;
                        }
                        this.justChangedCustomizationPageAndNeedRecenter = false;
                    }
                    else
                    {
                        this.customCamElevationVel *= 0.5f;
                    }
                    if (this.justChangedCustomizationPageAndNeedRecenter)
                    {
                        this.justChangedCustomizationPageAndNeedRecenter = false;
                    }
                    this.customizationCamRot += this.customCamRotVel * 0.08f;
                    this.customizationCamElevation += this.customCamElevationVel * 0.08f;
                    while (this.camFollowAngle > 6.283f && this.camFollowAngle > this.customizationCamRot)
                    {
                        this.camFollowAngle -= 6.283f;
                    }
                    while (this.camFollowAngle < -6.283f && this.camFollowAngle < this.customizationCamRot)
                    {
                        this.camFollowAngle += 6.283f;
                    }
                    while (this.customizationCamRot > 6.283f)
                    {
                        this.customizationCamRot -= 6.283f;
                    }
                    while (this.customizationCamRot < -6.283f)
                    {
                        this.customizationCamRot += 6.283f;
                    }
                    if (this.customizeCharacterPage != 5 && this.customizeCharacterPage != 4 && this.customizeCharacterPage != 0)
                    {
                        this.customCamFreeSpin = 0f;
                        this.colorPickerOpen = false;
                        this.texturePatternMenuOpen = false;
                    }
                    this.camFollowAngle += (0.4675f - this.camFollowAngle) * Time.deltaTime * (0.3f * (1f + this.recentCustomCamRot));
                    float num = 1.353f;
                    this.camFollowElevation += (Game.cap(1.353f + this.customizationCamElevation, 0.6f, 2.15f) - this.camFollowElevation) * Time.deltaTime * (1.3f * (1f + this.recentCustomCamRot));
                    this.customFocusBone = this.PC().bones.Root;
                    if (num + this.customizationCamElevation > 2.15f)
                    {
                        this.customizationCamElevation = 2.15f - num;
                    }
                    if (num + this.customizationCamElevation < 0.6f)
                    {
                        this.customizationCamElevation = 0.6f - num;
                    }
                    if ((this.customizeCharacterPage == 4 || this.customizeCharacterPage == 5 || this.customizeCharacterPage == 0 || this.customizeCharacterPage == 6 || this.customizeCharacterPage == 7) && this.mX < 0.5f)
                    {
                        this.zoomAllowed = false;
                    }
                    if (this.zoomAllowed)
                    {
                        float num2 = this.camFollowDist;
                        Vector2 mouseScrollDelta = Input.mouseScrollDelta;
                        this.camFollowDist = num2 - mouseScrollDelta.y * (this.camFollowDist + 4f) * 0.1f;
                    }
                    if (this.camFollowDist <= this.minCamDist + 0.1f)
                    {
                        this.camFollowDist = this.minCamDist + 0.1f;
                    }
                }
                else
                {
                    if (!this.lightingControlPanelOpen && (Cursor.lockState == CursorLockMode.Locked || Input.GetMouseButton(1)))
                    {
                        this.camFollowAngle += this.mouseChangeSinceLastFixedUpdate.x * 0.05f * (0.2f + UserSettings.data.lookSensitivity) * Game.cap(Time.deltaTime * 40f, 0f, 1f);
                        float num3 = 1f;
                        if (UserSettings.data.invertY)
                        {
                            num3 = -1f;
                        }
                        this.camFollowElevation += this.mouseChangeSinceLastFixedUpdate.y * 0.05f * (0.2f + UserSettings.data.lookSensitivity) * num3 * Game.cap(Time.deltaTime * 40f, 0f, 1f);
                        if (this.camFollowElevation < 0.4f)
                        {
                            this.camFollowElevation = 0.4f;
                        }
                        if (this.camFollowElevation > 2.8f)
                        {
                            this.camFollowElevation = 2.8f;
                        }
                    }
                    if ((!this.UIinUse || this.inResearchMode) && this.zoomAllowed)
                    {
                        float num4 = this.camFollowDist;
                        float num5 = this.camFollowDist;
                        Vector2 mouseScrollDelta2 = Input.mouseScrollDelta;
                        this.camFollowDist = num5 - mouseScrollDelta2.y * (this.camFollowDist + 4f) * 0.1f * Game.cap(Time.deltaTime * 40f, 0f, 1f);
                        if (this.firstPersonMode && (this.camFollowDist > num4 || this.customizingCharacter))
                        {
                            this.camFollowDist = this.minCamDist + this.firstPersonDistBuffer;
                            this.firstPersonMode = false;
                        }
                    }
                }
                this.zoomAllowed = true;
                if (this.PC().interactionSubject != null)
                {
                    this.camFollowDist = this.minCamDist + 1f;
                    this.firstPersonMode = false;
                }
                else if (this.camFollowDist < this.minCamDist + this.firstPersonDistBuffer && !this.customizingCharacter)
                {
                    this.camFollowDist = this.minCamDist;
                    this.firstPersonMode = true;
                }
                if (this.camFollowDist > this.maxCamDist)
                {
                    this.camFollowDist = this.maxCamDist;
                }
                this.camFollowAccel = Time.deltaTime * 25f;
                for (int i = 0; i < this.characters.Count; i++)
                {
                    if (this.characters[i].initted && this.characters[i].controlledByPlayer)
                    {
                        this.firstPersonAccel = 0f;
                        this.camTargetBone = this.characters[i].cameraFocusPoint;
                        this.camPos = this.camTargetBone.position;
                        if (this.firstPersonMode)
                        {
                            this.OOBoffset = 0f;
                        }
                        if (this.OOBoffset > this.camFollowDist)
                        {
                            this.OOBoffset = this.camFollowDist;
                        }
                        if (this.customizingCharacter)
                        {
                            this.camFollowAngle += this.customizationCamRot;
                        }
                        this.camPos.x += (this.camFollowDist - this.OOBoffset) * Mathf.Cos(this.camFollowAngle) * Mathf.Sin(this.camFollowElevation);
                        this.camPos.z += (this.camFollowDist - this.OOBoffset) * Mathf.Sin(this.camFollowAngle) * Mathf.Sin(this.camFollowElevation);
                        this.camPos.y += (this.camFollowDist - this.OOBoffset) * Mathf.Cos(this.camFollowElevation);
                        if (this.customizingCharacter)
                        {
                            this.camFollowAngle -= this.customizationCamRot;
                        }
                        this.camTarget = this.camTargetBone.transform.position;
                        if (this.customizingCharacter)
                        {
                            this.camTarget.y -= 2.5f * (this.mY - 0.5f) * 0.1f;
                            this.camTarget.y += (this.camPos.y - this.camTarget.y) * 0.5f;
                            this.camTarget += this.mainCam.transform.parent.right * (this.mX - 0.5f) * 0.3f;
                        }
                        if (this.anyResearchHotspotBeingUsed || TestingRoom.editingMode)
                        {
                            this.camPos += this.mainCam.transform.parent.right * 2.6f;
                            this.camTarget += this.mainCam.transform.parent.right * 2.6f;
                        }
                        else if (this.curDialogue != string.Empty)
                        {
                            if (this.dialogueOnRight)
                            {
                                this.dialogueCameraDisplacement = this.mainCam.transform.parent.right * this.dialogueCameraDisplacementAmount * (this.camFollowDist / 9f);
                            }
                            else
                            {
                                this.dialogueCameraDisplacement = this.mainCam.transform.parent.right * (0f - this.dialogueCameraDisplacementAmount) * (this.camFollowDist / 9f);
                            }
                            this.camPos += this.dialogueCameraDisplacement;
                            this.camTarget += this.dialogueCameraDisplacement;
                        }
                        else
                        {
                            this.dialogueCameraDisplacement = Vector3.zero;
                        }
                        this.camFollowAccel = 0.5f + this.characters[i].moveSpeed * 0.5f * Time.deltaTime * 60f;
                    }
                }
                if (this.PC() != null && this.PC().ridingMovingElevator)
                {
                    this.v3 = this.camTarget;
                    this.v3.y += 8f;
                    this.camPos = (this.camPos + this.v3 * 6f) / 7f;
                }
                if (this.PC().interactionSubject != null)
                {
                    if (this.justSwitchedIntoCamMode)
                    {
                        this.freeCam = UserSettings.data.defaultToFreeCam;
                        this.justSwitchedIntoCamMode = false;
                    }
                    this.camTarget = this.PC().interactionSubject.bones.Root.position;
                    if (this.freeCam)
                    {
                        float num6 = this.interactionZoom;
                        Vector2 mouseScrollDelta3 = Input.mouseScrollDelta;
                        this.interactionZoom = num6 * (1f - mouseScrollDelta3.y * 0.05f);
                        this.interactionZoom = Game.cap(this.interactionZoom, 0.1f, 1f);
                        this.camPos = this.freeCamPos;
                        if (Input.GetKey(UserSettings.data.KEY_STRAFE_LEFT))
                        {
                            this.camPos -= this.mainCamContainer.transform.right * Time.deltaTime * 25f * this.interactionZoom;
                        }
                        if (Input.GetKey(UserSettings.data.KEY_STRAFE_RIGHT))
                        {
                            this.camPos += this.mainCamContainer.transform.right * Time.deltaTime * 25f * this.interactionZoom;
                        }
                        if (Mathf.Abs(this.camPos.y - this.camTarget.y) < Mathf.Abs(this.camPos.x - this.camTarget.x) + Mathf.Abs(this.camPos.z - this.camTarget.z))
                        {
                            if (Input.GetKey(UserSettings.data.KEY_WALK_BACKWARD))
                            {
                                this.camPos -= this.mainCamContainer.transform.up * Time.deltaTime * 25f * this.interactionZoom;
                            }
                            if (Input.GetKey(UserSettings.data.KEY_WALK_FORWARD))
                            {
                                this.camPos += this.mainCamContainer.transform.up * Time.deltaTime * 25f * this.interactionZoom;
                            }
                        }
                        else if (this.camPos.y > this.camTarget.y)
                        {
                            if (Input.GetKey(UserSettings.data.KEY_WALK_BACKWARD))
                            {
                                this.camPos -= this.mainCamContainer.transform.up * Time.deltaTime * 25f * this.interactionZoom;
                            }
                        }
                        else if (Input.GetKey(UserSettings.data.KEY_WALK_FORWARD))
                        {
                            this.camPos += this.mainCamContainer.transform.up * Time.deltaTime * 25f * this.interactionZoom;
                        }
                        this.camPos = this.camTarget + (this.camPos - this.camTarget).normalized * this.interactionZoom * 9f;
                        this.freeCamPos = this.camPos;
                    }
                    else
                    {
                        float num7 = this.interactionZoom;
                        Vector2 mouseScrollDelta4 = Input.mouseScrollDelta;
                        this.interactionZoom = num7 + mouseScrollDelta4.y * 0.12f;
                        this.interactionZoom = Game.cap(this.interactionZoom, 0f, 1f);
                        this.camTarget = this.PC().interactionSubject.bones.Root.position;
                        this.camPos = this.PC().interactionPoint.Find("CamPosClose").position * this.interactionZoom + this.PC().interactionPoint.Find("CamPosFar").position * (1f - this.interactionZoom);
                        this.PC().interactionPoint.Find("CamPosFar").LookAt(this.camTarget);
                        float d = Mathf.Pow((1f - this.interactionZoom) * 0.6f + 0.4f, 2f);
                        this.camPos += this.PC().interactionPoint.Find("CamPosFar").right * (this.camTarget - this.camPos).magnitude * d * 0.8f * (this.interactionCamX + Mathf.Cos(Time.time) * 0.05f);
                        this.camPos += this.PC().interactionPoint.Find("CamPosFar").up * (this.camTarget - this.camPos).magnitude * d * 0.6f * (this.interactionCamY + Mathf.Sin(Time.time * 1.1f) * 0.05f);
                        if (Input.GetKey(UserSettings.data.KEY_STRAFE_LEFT))
                        {
                            this.interactionCamX -= Time.deltaTime * 4f;
                        }
                        if (Input.GetKey(UserSettings.data.KEY_STRAFE_RIGHT))
                        {
                            this.interactionCamX += Time.deltaTime * 4f;
                        }
                        if (Input.GetKey(UserSettings.data.KEY_WALK_FORWARD))
                        {
                            this.interactionCamY += Time.deltaTime * 4f;
                        }
                        if (Input.GetKey(UserSettings.data.KEY_WALK_BACKWARD))
                        {
                            this.interactionCamY -= Time.deltaTime * 4f;
                        }
                        this.interactionCamX = Game.cap(this.interactionCamX, -1f, 1f);
                        this.interactionCamY = Game.cap(this.interactionCamY, -1f, 1f);
                        this.camFollowAccel = Time.deltaTime * 30f;
                    }
                }
                else
                {
                    this.freeCam = false;
                    this.justSwitchedIntoCamMode = true;
                }
                if (this.firstPersonMode)
                {
                    this.firstpersonTransition += Time.deltaTime * 3f;
                }
                else
                {
                    this.firstpersonTransition -= Time.deltaTime * 3f;
                }
                this.firstpersonTransition = Game.cap(this.firstpersonTransition, 0f, 1f);
                if (this.firstpersonTransition > 0f)
                {
                    this.v3 = (this.camTarget - this.camPos).normalized;
                    this.camTarget += this.camFollowDist * this.v3 * this.firstpersonTransition;
                    this.camPos += this.camFollowDist * this.v3 * this.firstpersonTransition;
                    this.v3.y = 0f;
                    this.v3.Normalize();
                    this.camTarget += this.v3 * this.firstpersonTransition * 1f;
                    this.camPos += this.v3 * this.firstpersonTransition * 1f;
                }
            }
            float num8 = Mathf.Pow(1.5f - UserSettings.data.cameraSmoothing, 3f);
            this.camPos_actual += (this.camPos - this.camPos_actual) * Game.cap(this.camFollowAccel * num8, 0f, 1f);
            this.mainCam.transform.parent.position = this.camPos_actual;
            this.camTarget_actual += (this.camTarget - this.camTarget_actual) * Game.cap(this.camFollowAccel * num8, 0f, 1f);
            this.v3 = Vector3.up;
            this.mainCam.transform.parent.LookAt(this.camTarget_actual, this.v3);
            if (this.customizingCharacter)
            {
                this.mainCam.transform.parent.Rotate(0f, -20f, 0f);
            }
            if (this.freeCam || TestingRoom.editingMode)
            {
                this.mainCam.GetComponent<Camera>().fieldOfView += (80f - this.mainCam.GetComponent<Camera>().fieldOfView) * Game.cap(Time.deltaTime * 5f, 0f, 1f);
            }
            else
            {
                this.mainCam.GetComponent<Camera>().fieldOfView += (65f - this.mainCam.GetComponent<Camera>().fieldOfView) * Game.cap(Time.deltaTime * 5f, 0f, 1f);
            }
            this.DOFfocus.transform.position = this.camTarget_actual;
            if (this.popupOpen || this.shopOpen || this.chemicalSynthesisMenuOpen || this.inventoryOpen)
            {
                Transform transform = this.DOFfocus.transform;
                transform.position += (this.DOFfocus.transform.position - this.mainCam.transform.parent.position) * -100f;
            }
            else if (this.timeScale_act < 0.99f && !Input.GetKey(KeyCode.Keypad9))
            {
                Transform transform2 = this.DOFfocus.transform;
                transform2.position += (this.DOFfocus.transform.position - this.mainCam.transform.parent.position) * (1f - this.timeScale_act) * -10f;
            }
            this.setAlphaRecursive(this.thinkingIndicator.transform, this.rtBlur * 0.5f);
            if (this.recentThinking * 2f > this.rtBlur)
            {
                this.rtBlur += (this.recentThinking * 2f - this.rtBlur) * Time.deltaTime * 8f;
            }
            else
            {
                this.rtBlur += (this.recentThinking * 2f - this.rtBlur) * Time.deltaTime * 3f;
            }
            if (this.cameraBoundsMask == -99)
            {
                this.cameraBoundsMask = LayerMask.GetMask("Default", "StaticObjects");
            }
            if (!this.firstPersonMode)
            {
                if (this.inResearchMode)
                {
                    if (Physics.Raycast(this.camPos_actual, (this.camTarget_actual - this.camPos_actual).normalized, out this.camHit, (this.camPos_actual - this.camTarget_actual).magnitude + 0.1f, LayerMask.GetMask("Default")))
                    {
                        this.mainCam.transform.parent.position = this.camHit.point;
                    }
                }
                else if (Physics.Raycast(this.camTarget_actual, (this.camPos_actual - this.camTarget_actual).normalized, out this.camHit, (this.camPos_actual - this.camTarget_actual).magnitude + 0.1f, this.cameraBoundsMask))
                {
                    this.OOBoffset += (((this.camPos_actual - this.camTarget_actual).magnitude - this.camHit.distance) * 5.5f - this.OOBoffset) * 0.1f;
                    this.mainCam.transform.parent.position = this.camHit.point;
                }
                else
                {
                    this.OOBoffset *= 0.96f;
                }
            }
            else if (Physics.Raycast(this.camPos_actual, (this.DOFfocus.transform.position - this.camPos_actual).normalized, out this.camHit, (this.camPos_actual - this.DOFfocus.transform.position).magnitude + 0.1f, this.cameraBoundsMask))
            {
                this.DOFfocus.transform.position = this.camHit.point;
            }
        }
    }

    public GameObject createCharacterSkeleton(RackCharacter character)
    {
        this.masterSkeleton.SetActive(true);
        GameObject gameObject = UnityEngine.Object.Instantiate(this.masterSkeleton);
        Collider[] componentsInChildren = gameObject.GetComponentsInChildren<Collider>();
        for (int i = 0; i < componentsInChildren.Length; i++)
        {
            Physics.IgnoreCollision(((UnityEngine.Component)gameObject.transform.Find("MovementTarget")).GetComponent<Collider>(), componentsInChildren[i]);
        }
        this.masterSkeleton.SetActive(false);
        return gameObject;
    }

    public static Vector3 degreeDist3(Vector3 vA, Vector3 vB)
    {
        Vector3 zero = Vector3.zero;
        zero.x = Game.degreeDist(vA.x, vB.x);
        zero.y = Game.degreeDist(vA.y, vB.y);
        zero.z = Game.degreeDist(vA.z, vB.z);
        return zero;
    }

    public static float degreeDist(float from, float to)
    {
        while (from < 0f)
        {
            from += 360f;
        }
        while (from > 360f)
        {
            from -= 360f;
        }
        while (to < 0f)
        {
            to += 360f;
        }
        while (to > 360f)
        {
            to -= 360f;
        }
        float num = to - from;
        if (num < -180f)
        {
            num += 360f;
        }
        if (num > 180f)
        {
            num -= 360f;
        }
        return num;
    }

    public static void OpenInMacFileBrowser(string path)
    {
        bool flag = false;
        string text = path.Replace("\\", "/");
        if (Directory.Exists(text))
        {
            flag = true;
        }
        if (!text.StartsWith("\""))
        {
            text = "\"" + text;
        }
        if (!text.EndsWith("\""))
        {
            text += "\"";
        }
        string arguments = ((!flag) ? "-R " : string.Empty) + text;
        try
        {
            Process.Start("open", arguments);
        }
        catch (Win32Exception ex)
        {
            ex.HelpLink = string.Empty;
        }
    }

    public static void OpenInWinFileBrowser(string path)
    {
        bool flag = false;
        string text = path.Replace("/", "\\");
        if (Directory.Exists(text))
        {
            flag = true;
        }
        try
        {
            Process.Start("explorer.exe", ((!flag) ? "/select," : "/root,") + text);
        }
        catch (Win32Exception ex)
        {
            ex.HelpLink = string.Empty;
        }
    }

    public static void OpenInFileBrowser(string path)
    {
        Game.OpenInWinFileBrowser(path);
        Game.OpenInMacFileBrowser(path);
    }
}
